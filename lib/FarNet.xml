<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarNet</name>
    </assembly>
    <members>
        <member name="T:FarNet.MacroArea">
            <summary>
            Macro areas.
            </summary>
            <remarks>
            Names are mostly the same as in macros (and as the registry key names).
            Positive values are real areas, the others are for internal use.
            </remarks>
        </member>
        <member name="F:FarNet.MacroArea.None">
            <summary>No area.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Other">
            <summary>Screen grabbing mode ([AltIns]).</summary>
        </member>
        <member name="F:FarNet.MacroArea.Shell">
            <summary>File panels.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Viewer">
            <summary>File viewer.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Editor">
            <summary>File editor.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Dialog">
            <summary>Dialog window.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Search">
            <summary>Quick file search ([AltLetter]).</summary>
        </member>
        <member name="F:FarNet.MacroArea.Disks">
            <summary>Drive menu.</summary>
        </member>
        <member name="F:FarNet.MacroArea.MainMenu">
            <summary>Main menu.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Menu">
            <summary>Other menus.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Help">
            <summary>Help window.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Info">
            <summary>Information panel.</summary>
        </member>
        <member name="F:FarNet.MacroArea.QView">
            <summary>Quick view panel.</summary>
        </member>
        <member name="F:FarNet.MacroArea.Tree">
            <summary>Folder tree panel.</summary>
        </member>
        <member name="F:FarNet.MacroArea.FindFolder">
            <summary>Folder search panel.</summary>
        </member>
        <member name="F:FarNet.MacroArea.UserMenu">
            <summary>User menu.</summary>
        </member>
        <member name="F:FarNet.MacroArea.ShellAutoCompletion">
            <summary>Auto completion menu.</summary>
        </member>
        <member name="F:FarNet.MacroArea.DialogAutoCompletion">
            <summary>Auto completion menu.</summary>
        </member>
        <member name="T:FarNet.IEditorBase">
            <summary>
            Common editor events.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Closed">
            <summary>
            Called when the editor is closed.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Opened">
            <summary>
            Called when the editor is opened.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Saving">
            <summary>
            Called before saving.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.KeyDown">
            <summary>
            Called on a key pressed.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.KeyUp">
            <summary>
            Called on a key pressed.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.MouseClick">
            <summary>
            Occurs when a mouse button is clicked.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.MouseDoubleClick">
            <summary>
            Occurs when a mouse button is clicked two times.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.MouseMove">
            <summary>
            Occurs when the mouse pointer moves.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.MouseWheel">
            <summary>
            Occurs when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.GotFocus">
            <summary>
            Called when the editor has got focus.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.LosingFocus">
            <summary>
            Called when the editor is losing focus.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Idled">
            <summary>
            Called periodically when a user is idle.
            </summary>
            <seealso cref="T:FarNet.IdledHandler"/>
        </member>
        <member name="E:FarNet.IEditorBase.CtrlCPressed">
            <summary>
            Called on [CtrlC] in asynchronous mode, see <see cref="M:FarNet.IEditor.BeginAsync"/>.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Redrawing">
            <summary>
            Called on redrawing.
            </summary>
        </member>
        <member name="E:FarNet.IEditorBase.Changed">
            <summary>
            Called on changes.
            </summary>
        </member>
        <member name="T:FarNet.IAnyEditor">
            <summary>
            Any editor operator, common editor events, options and tools.
            </summary>
            <remarks>
            It is exposed as <see cref="P:FarNet.IFar.AnyEditor"/>.
            <para>
            It is used to subscribe to events of editors that are not yet opened.
            It also exposes common editor tools.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IAnyEditor.EditText(System.String,System.String)">
            <summary>
            Opens a modal temporary editor to edit the given text.
            </summary>
        </member>
        <member name="T:FarNet.IEditor">
            <summary>
            Editor operator. Exposed as <see cref="P:FarNet.IFar.Editor"/>. Created by <see cref="M:FarNet.IFar.CreateEditor"/>.
            </summary>
            <remarks>
            Normally this object should be created or requested, used instantly and never kept for future use.
            When you need the current editor operator next time call <see cref="P:FarNet.IFar.Editor"/> again to get it.
            <para>
            In fact all dynamic members operate on the current editor, not on the editor associated with the instance.
            Thus, if you use an operator of not current editor then results may be unexpected.
            </para>
            <para>
            The editor has members making it semantically similar to a list of <see cref="T:FarNet.ILine"/> lines and strings.
            These members are: <see cref="P:FarNet.IEditor.Count"/> (line count), <see cref="P:FarNet.IEditor.Item(System.Int32)"/> (gets a line by its index),
            <see cref="M:FarNet.IEditor.RemoveAt(System.Int32)"/> (removes a line by its index), <see cref="M:FarNet.IEditor.Clear"/> (removes all lines),
            <see cref="M:FarNet.IEditor.Add(System.String)"/>\<see cref="M:FarNet.IEditor.Insert(System.Int32,System.String)"/> (adds\inserts text line(s)).
            </para>
            <para>
            Still, the editor is not a standard list of strings or lines.
            Standard string list is <see cref="P:FarNet.IEditor.Strings"/>, it has all useful list members implemented.
            Standard line lists are <see cref="P:FarNet.IEditor.Lines"/> or <see cref="P:FarNet.IEditor.SelectedLines"/>, they have members mostly for reading.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Add(System.String)">
            <summary>
            Adds the text to the end.
            </summary>
            <param name="text">Text to be inserted.</param>
            <remarks>
            If the last editor line is empty then it does not add a new line
            into the list but technically speaking it inserts it before the
            last. But this way is actually rather expected for the editor.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Clear">
            <summary>
            Removes all lines but one empty.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.Insert(System.Int32,System.String)">
            <summary>
            Inserts the text at the given line index.
            </summary>
            <param name="line">Line index.</param>
            <param name="text">Text to be inserted.</param>
        </member>
        <member name="M:FarNet.IEditor.RemoveAt(System.Int32)">
            <summary>
            Removes the line by its index.
            </summary>
            <param name="index">Index of the line to be removed.</param>
        </member>
        <member name="M:FarNet.IEditor.InsertText(System.String)">
            <summary>
            Inserts the text at the caret position.
            </summary>
            <param name="text">The text. Supported line delimiters: CR, LF, CR+LF.</param>
            <remarks>
            The text is processed in the same way as it is typed.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.InsertChar(System.Char)">
            <summary>
            Inserts a character at the caret position.
            </summary>
            <param name="text">Character to be inserted.</param>
            <remarks>
            The character is processed in the same way as it is typed.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Redraw">
            <summary>
            Redraws the editor window.
            </summary>
            <remarks>
            Normally it should be called when changes are done to make them visible immediately.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.DeleteChar">
            <summary>
            Deletes a character under the caret.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.DeleteLine">
            <summary>
            Deletes the line where the caret is.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.DeleteText">
            <summary>
            Deletes the selected text.
            </summary>
            <remarks>
            To clear selection use <see cref="M:FarNet.IEditor.UnselectText"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Close">
            <summary>
            Closes the current editor.
            </summary>
            <remarks>
            Changes, if any, are lost. Call <see cref="M:FarNet.IEditor.Save"/> to save them.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Save">
            <summary>
            Saves changes, if any. Exception on failure.
            </summary>
            <remarks>
            This method does nothing if there are no changes to save (<see cref="P:FarNet.IEditor.IsSaved"/> gets true).
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Save(System.Boolean)">
            <summary>
            Saves the file in the current editor even with no changes. Exception on failure.
            </summary>
            <param name="force">Tells to write the file even if there are no changes.</param>
        </member>
        <member name="M:FarNet.IEditor.Save(System.String)">
            <summary>
            Saves the file in the current editor as the specified file. Exception on failure.
            </summary>
            <param name="fileName">File name to save to.</param>
        </member>
        <member name="M:FarNet.IEditor.InsertLine">
            <summary>
            Inserts a new line at the caret position.
            </summary>
            <remarks>
            After insertion the caret is moved to the first position in the inserted line.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.InsertLine(System.Boolean)">
            <summary>
            Inserts a new line at the caret position with optional indent.
            </summary>
            <param name="indent">Insert a line with indent.</param>
            <remarks>
            After insertion the caret is moved to the first position in the inserted line
            or to the indented position in it. Indent is the same as on [Enter].
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.ConvertColumnEditorToScreen(System.Int32,System.Int32)">
            <summary>
            Converts char position to tab position for the given line.
            </summary>
            <param name="line">Line index, -1 for current.</param>
            <param name="column">Column index to be converted.</param>
        </member>
        <member name="M:FarNet.IEditor.ConvertColumnScreenToEditor(System.Int32,System.Int32)">
            <summary>
            Converts tab position to char position for the given line.
            </summary>
            <param name="line">Line index, -1 for current.</param>
            <param name="column">Column index to be converted.</param>
        </member>
        <member name="M:FarNet.IEditor.ConvertPointEditorToScreen(FarNet.Point)">
            <summary>
            Converts the point in editor coordinates to the point in screen coordinates.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.ConvertPointScreenToEditor(FarNet.Point)">
            <summary>
            Converts the point in screen coordinates to the point in editor coordinates.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.GoTo(System.Int32,System.Int32)">
            <summary>
            Sets the caret position or posts it for opening.
            </summary>
            <param name="column">Column index.</param>
            <param name="line">Line index.</param>
            <seealso cref="P:FarNet.IEditor.Caret"/>
            <seealso cref="P:FarNet.IEditor.Frame"/>
        </member>
        <member name="M:FarNet.IEditor.GoToLine(System.Int32)">
            <summary>
            Sets the current line or posts it for opening.
            </summary>
            <param name="line">Line index.</param>
            <seealso cref="P:FarNet.IEditor.Caret"/>
            <seealso cref="P:FarNet.IEditor.Frame"/>
        </member>
        <member name="M:FarNet.IEditor.GoToColumn(System.Int32)">
            <summary>
            Goes to a character in the current line.
            </summary>
            <param name="column">Column index.</param>
            <seealso cref="P:FarNet.IEditor.Caret"/>
            <seealso cref="P:FarNet.IEditor.Frame"/>
        </member>
        <member name="M:FarNet.IEditor.GoToEnd(System.Boolean)">
            <summary>
            Goes to the end of text.
            </summary>
            <param name="addLine">Add an empty line if the last is not empty.</param>
        </member>
        <member name="M:FarNet.IEditor.GetText">
            <summary>
            Gets text with the default line separator.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.GetText(System.String)">
            <summary>
            Gets text with the specified line separator.
            </summary>
            <param name="separator">Line separator. null ~ default.</param>
        </member>
        <member name="M:FarNet.IEditor.SetText(System.String)">
            <summary>
            Sets the new text.
            </summary>
            <param name="text">New text.</param>
            <remarks>
            There is no selection after this.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Open">
            <summary>
            Opens the editor.
            </summary>
            <remarks>
            It is the same as <see cref="M:FarNet.IEditor.Open(FarNet.OpenMode)"/> with open mode <see cref="F:FarNet.OpenMode.None"/>.
            See remarks there.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Open(FarNet.OpenMode)">
            <summary>
            Opens the editor.
            </summary>
            <remarks>
            To open an editor you should create an editor operator by <see cref="M:FarNet.IFar.CreateEditor"/>,
            set at least its <see cref="P:FarNet.IEditor.FileName"/> and optionally: <see cref="P:FarNet.IEditor.DeleteSource"/>,
            <see cref="P:FarNet.IEditor.DisableHistory"/>, <see cref="P:FarNet.IEditor.Switching"/>, <see cref="P:FarNet.IEditor.Title"/>,
            and <see cref="P:FarNet.IEditor.Window"/>. Then this method is called.
            <para>
            If the file is already opened in an editor then this instance should not be used after opening
            because technically an editor was not opened but reused. The safe way is to get the current
            <see cref="P:FarNet.IFar.Editor"/> after opening and work with it.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.BeginUndo">
            <summary>
            Begins an undo block.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.EndUndo">
            <summary>
            Ends an undo block.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.Undo">
            <summary>
            Invokes undo.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.Redo">
            <summary>
            Invokes redo.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.OpenWriter">
            <summary>
            Opens and returns a writer for output text at the caret position of the current editor.
            </summary>
            <remarks>
            It is not recommended to change the caret position during writing,
            but it seems to be safe to do so if you <c>Flush()</c> the writer before the change.
            </remarks>
            <returns>Opened writer. It has to be closed after use.</returns>
        </member>
        <member name="M:FarNet.IEditor.BeginAsync">
            <summary>
            Begins asynchronous mode.
            </summary>
            <remarks>
            This mode is designed for writing text to a not current editor or from background jobs.
            The editor is partially blocked until the mode is not closed by <see cref="M:FarNet.IEditor.EndAsync"/>.
            Actual writing happens when the editor has or gets focus, otherwise data are queued.
            <para>
            In this mode data are always appended to the end of the current text, so that the
            output procedure is similar to console output.
            </para>
            <para>
            Only <c>Insert*</c> methods should be called during asynchronous mode even if you can
            call something else technically without problems.
            </para>
            <para>
            Input events (keys, mouse, idle) are disabled in asynchronous mode.
            There is only a special event <see cref="E:FarNet.IEditorBase.CtrlCPressed"/>
            that can be used for example for stopping the mode by a user.
            </para>
            <ul>
            <li>Nested calls of are not allowed.</li>
            <li>Use this mode only when it is absolutely needed.</li>
            <li>Module <b>PowerShellFar</b> uses this mode for asynchronous editor consoles.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.EndAsync">
            <summary>
            Ends asynchronous mode.
            </summary>
            <remarks>
            It must be called after <see cref="M:FarNet.IEditor.BeginAsync"/> when asynchronous operations complete.
            Note: it is OK to call it when asynchronous mode is already stopped or even was not started.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.GetSelectedText">
            <summary>
            Gets the selected text with the default line separator.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.GetSelectedText(System.String)">
            <summary>
            Gets the selected text with the specified line separator.
            </summary>
            <param name="separator">Line separator. null ~ default.</param>
        </member>
        <member name="M:FarNet.IEditor.SetSelectedText(System.String)">
            <summary>
            Sets (replaces) the selected text.
            </summary>
            <param name="text">New text.</param>
            <seealso cref="M:FarNet.IEditor.UnselectText"/>
        </member>
        <member name="M:FarNet.IEditor.SelectText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the specified stream of text.
            </summary>
            <param name="column1">Column 1.</param>
            <param name="line1">Line 1.</param>
            <param name="column2">Column 2.</param>
            <param name="line2">Line 2.</param>
            <seealso cref="M:FarNet.IEditor.UnselectText"/>
        </member>
        <member name="M:FarNet.IEditor.SelectText(System.Int32,System.Int32,System.Int32,System.Int32,FarNet.PlaceKind)">
            <summary>
            Selects the specified place of text.
            </summary>
            <param name="column1">Column 1.</param>
            <param name="line1">Line 1.</param>
            <param name="column2">Column 2.</param>
            <param name="line2">Line 2.</param>
            <param name="kind">Selected place kind.</param>
            <remarks>
            Columns are given in editor coordinates for stream selection
            and in screen coordinates for column selection.
            </remarks>
            <seealso cref="M:FarNet.IEditor.ConvertColumnEditorToScreen(System.Int32,System.Int32)"/>
            <seealso cref="M:FarNet.IEditor.UnselectText"/>
        </member>
        <member name="M:FarNet.IEditor.SelectAllText">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.UnselectText">
            <summary>
            Turns the text selection off.
            </summary>
            <remarks>
            To delete the selected text use <see cref="M:FarNet.IEditor.DeleteText"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IEditor.Activate">
            <summary>
            Makes the instance window active.
            </summary>
            <remarks>It may throw if the window cannot be activated.</remarks>
        </member>
        <member name="M:FarNet.IEditor.GetColors(System.Int32)">
            <summary>
            Returns color spans of the specified line.
            </summary>
        </member>
        <member name="M:FarNet.IEditor.AddDrawer(FarNet.IModuleDrawer)">
            <summary>
            Adds the drawer to this editor.
            </summary>
            <param name="drawer">The drawer.</param>
        </member>
        <member name="M:FarNet.IEditor.RemoveDrawer(System.Guid)">
            <summary>
            Removes the drawer from this editor.
            </summary>
            <param name="id">The drawer ID.</param>
        </member>
        <member name="P:FarNet.IEditor.Count">
            <summary>
            Gets line count. At least one line always exists.
            </summary>
            <seealso cref="P:FarNet.IEditor.Item(System.Int32)"/>
        </member>
        <member name="P:FarNet.IEditor.Item(System.Int32)">
            <summary>
            Gets the line by its index.
            </summary>
            <param name="index">Line index.</param>
            <returns>The requested line.</returns>
            <seealso cref="P:FarNet.IEditor.Count"/>
            <seealso cref="P:FarNet.IEditor.Lines"/>
            <seealso cref="P:FarNet.IEditor.SelectedLines"/>
            <remarks>
            The returned line instance should be used instantly and should never be kept for future use.
            The index is permanent, the instance always points to a line at this index even if it is invalid after text changes.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Line">
            <summary>
            Gets the current editor line.
            </summary>
            <remarks>
            The returned object is not a copy of the current line but rather a pointer to the current line.
            If the caret moves to another line then the object operates on a new current line.
            </remarks>
            <seealso cref="P:FarNet.IFar.Line"/>
        </member>
        <member name="P:FarNet.IEditor.Id">
            <summary>
            Gets the internal identifier.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.TabSize">
            <summary>
            Gets or sets tab size in spaces in the current editor.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.ExpandTabs">
            <summary>
            Gets or sets expand tabs mode in the current editor.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.DeleteSource">
            <summary>
            Gets or sets the option to delete the source file on exit.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.Switching">
            <summary>
            Tells how editor\viewer switching should work on [F6].
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.DisableHistory">
            <summary>
            Tells to not use history.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.Lines">
            <summary>
            Gets the list of editor lines.
            </summary>
            <remarks>
            <para>
			WARNING: This feature should work fine but it is experimental.
			It is not yet clear that it is needed. User feedback is welcome.
		</para>
            <para>
			This list is only for iterations, access by indexes, and removal by
			indexes. Accessed lines allow changes but new strings should not
			contain line separators. Other editor changes during using this
			list may cause unexpected results and should be avoided.
		</para>
            </remarks>
            <seealso cref="P:FarNet.IEditor.Strings"/>
            <seealso cref="P:FarNet.IEditor.SelectedLines"/>
        </member>
        <member name="P:FarNet.IEditor.SelectedLines">
            <summary>
            Gets the list of selected lines.
            </summary>
            <remarks>
            <para>
			WARNING: This feature should work fine but it is experimental.
			It is not yet clear that it is needed. User feedback is welcome.
		</para>
            <para>
			This list is only for iterations, access by indexes, and removal by
			indexes. Accessed lines allow changes but new strings should not
			contain line separators. Other editor changes during using this
			list may cause unexpected results and should be avoided.
		</para>
            <para>
            Recommended ways to change the selected text are:
            get the selected text by <see cref="M:FarNet.IEditor.GetSelectedText"/> and operate on this string
            or iterate through selected lines and build a new text, for example using a string builder.
            Then use <see cref="M:FarNet.IEditor.SetSelectedText(System.String)"/> if you want new text to be selected after replacement
            or use <see cref="M:FarNet.IEditor.DeleteText"/> + <see cref="M:FarNet.IEditor.InsertText(System.String)"/> to delete selected and insert new text.
            </para>
            <para>
            The last line of the selection area is not included if nothing is actually selected there.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Strings">
            <summary>
            Gets the string list representation of editor lines.
            </summary>
            <remarks>
            <para>
			WARNING: This feature should work fine but it is experimental.
			It is not yet clear that it is needed. User feedback is welcome.
		</para>
            <para>
            See MSDN <c>IList(Of T)</c> interface for members, almost all of them are implemented.
            Not implemented members are: <c>Contains(string)</c>, <c>IndexOf(string)</c>, and <c>Remove(string)</c>.
            </para>
            <para>
            Note that this string list is almost like any standard list but
            there are three main differences. 1) Clear() does not removes all
            lines because one empty line still exists. 2) If the last line is
            empty then Add() actually inserts before it. 3) If a new string
            being inserted contains line separators then more than one item is
            inserted into the list.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.FileName">
            <summary>
            Gets or sets the name of a file being or to be edited.
            Set it before opening.
            </summary>
            <remarks>
            Before opening it sets a file to be edited (on opening it can be changed, e.g. converted into its full path).
            For an opened editor it gets the file being edited.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.CodePage">
            <summary>
            Gets or sets the code page identifier.
            </summary>
            <remarks>
            Before opening it sets encoding for reading a file.
            After opening it gets and sets the current encoding.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Window">
            <summary>
            Gets or sets the start window place.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.WindowSize">
            <summary>
            Gets the current window size.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.IsOpened">
            <summary>
            Gets true if the editor is opened.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.Title">
            <summary>
            Gets or sets the window title. Set it before or after opening.
            </summary>
            <remarks>
            For the current editor setting the title to null or empty restores the original title.
            <para>
            NOTE: Far API only allows setting the title.
            Thus, the title just gets the last value set by a module, if any, not the actual title.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Overtype">
            <summary>
            Gets or sets overtype mode.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.IsModified">
            <summary>
            Gets true if the text is modified in the current editor (see remarks).
            </summary>
            <remarks>
            It gets true if the text is modified at least once and these changes are not undone.
            Note that in this case it will get true even after saving. Use <see cref="P:FarNet.IEditor.IsSaved"/>
            in order to check for not saved changes.
            </remarks>
            <seealso cref="P:FarNet.IEditor.TimeOfSave"/>
        </member>
        <member name="P:FarNet.IEditor.IsSaved">
            <summary>
            Gets true if there are no changes to save in the current editor (see remarks).
            </summary>
            <remarks>
            It is true when the editor is just opened or saved.
            Use <see cref="P:FarNet.IEditor.TimeOfSave"/> to check whether it was saved at least once.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.IsLocked">
            <summary>
            Gets or sets the lock mode ([CtrlL]).
            </summary>
            <remarks>
            Set it before or after opening.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Frame">
            <summary>
            Gets or sets the current text frame.
            </summary>
            <seealso cref="P:FarNet.IEditor.Caret"/>
        </member>
        <member name="P:FarNet.IEditor.Caret">
            <summary>
            Gets or sets the caret position.
            </summary>
            <seealso cref="P:FarNet.IEditor.Frame"/>
            <seealso cref="M:FarNet.IEditor.GoTo(System.Int32,System.Int32)"/>
        </member>
        <member name="P:FarNet.IEditor.Host">
            <summary>
            Gets or sets a host operating on the editor.
            </summary>
            <remarks>
            This property is set by a module in advanced scenarios when an editor is used in a very unusual way.
            It can be set once, usually by a creator or by a handler on opening. It is not used internally, it
            is just for avoiding module conflicts.
            <para>Example scenario: <b>PowerShellFar</b> may use editors as command consoles. On opening it
            attaches a host object which is subscribed to the editor events. This approach makes impossible
            to attach yet another editor host and prevents advanced use of the editor from other modules
            (if they also follow this technique of attaching a host).
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.IsVirtualSpace">
            <summary>
            Tells to enable or disable the caret position beyond end of lines.
            Set it before or after opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.ShowWhiteSpace">
            <summary>
            Tells to show or hide white space symbols.
            Set it before or after opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.WriteByteOrderMark">
            <summary>
            Tells to write BOM on saving.
            Set it before or after opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.SelectionExists">
            <summary>
            Gets true if selection exists.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.SelectionKind">
            <summary>
            Gets the selection kind.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.SelectionPlace">
            <summary>
            Gets the selected place.
            </summary>
            <remarks>
            The returned columns are given in editor coordinates for any kind of selection.
            </remarks>
            <seealso cref="M:FarNet.IEditor.ConvertColumnEditorToScreen(System.Int32,System.Int32)"/>
        </member>
        <member name="P:FarNet.IEditor.SelectionPoint">
            <summary>
            Gets the selected point.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.WordDiv">
            <summary>
            Gets or sets editor word delimiters.
            Set it before or after opening.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.Bookmark">
            <summary>
            Gets the bookmark operator.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.TimeOfOpen">
            <summary>
            Gets the opening time of the instance.
            </summary>
        </member>
        <member name="P:FarNet.IEditor.TimeOfSave">
            <summary>
            Gets the saving time of the instance.
            </summary>
            <remarks>
            If the editor has not been saved at least once then it is equal to <c>DateTime.MinValue</c>.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.KeyCount">
            <summary>
            Gets count of changes.
            </summary>
            <remarks>
            It is designed for the Vessel module and not recommended for public use.
            </remarks>
        </member>
        <member name="P:FarNet.IEditor.Data">
            <summary>
			Gets the user data key/value table.
		</summary><remarks>
			Any user data can be attached by one or more external tools.
			Keys should be chosen carefully in order to avoid conflicts.
			When in doubts generate and use <c>Guid</c> based keys.
		</remarks>
        </member>
        <member name="T:FarNet.IEditorBookmark">
            <summary>
            Editor bookmark operator.
            </summary>
            <remarks>
            It is exposed as <see cref="P:FarNet.IEditor.Bookmark"/>.
            It operates on standard (permanent) and stack (temporary) bookmarks in the current editor.
            </remarks>
        </member>
        <member name="M:FarNet.IEditorBookmark.Bookmarks">
            <summary>
            Gets permanent bookmarks in the current editor.
            </summary>
            <remarks>
            Bookmarks are defined as <see cref="T:FarNet.TextFrame"/>.
            Negative <see cref="P:FarNet.TextFrame.CaretLine"/> means undefined bookmark.
            To go to a bookmark set the editor <see cref="P:FarNet.IEditor.Frame"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IEditorBookmark.SessionBookmarks">
            <summary>
            Gets stack bookmarks in the current editor.
            </summary>
            <remarks>
            Bookmarks are defined as <see cref="T:FarNet.TextFrame"/>.
            To go to a bookmark set the editor <see cref="P:FarNet.IEditor.Frame"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IEditorBookmark.AddSessionBookmark">
            <summary>
            Adds a new stack bookmark at the current bookmark stack position.
            </summary>
            <remarks>
            Bookmarks after the current position, if any, are removed.
            </remarks>
        </member>
        <member name="M:FarNet.IEditorBookmark.ClearSessionBookmarks">
            <summary>
            Clears the bookmark stack.
            </summary>
        </member>
        <member name="M:FarNet.IEditorBookmark.RemoveSessionBookmarkAt(System.Int32)">
            <summary>
            Removes the specified stack bookmark.
            </summary>
            <param name="index">Bookmark index or -1 for the current stack position.</param>
        </member>
        <member name="M:FarNet.IEditorBookmark.GoToNextSessionBookmark">
            <summary>
            Navigates to the next stack bookmark, if any.
            </summary>
        </member>
        <member name="M:FarNet.IEditorBookmark.GoToPreviousSessionBookmark">
            <summary>
            Navigates to the previous stack bookmark, if any.
            </summary>
        </member>
        <member name="T:FarNet.EditorChangeKind">
            <summary>
            Editor change constants.
            </summary>
        </member>
        <member name="F:FarNet.EditorChangeKind.LineChanged">
            
        </member>
        <member name="F:FarNet.EditorChangeKind.LineAdded">
            
        </member>
        <member name="F:FarNet.EditorChangeKind.LineRemoved">
            
        </member>
        <member name="T:FarNet.EditorChangedEventArgs">
            <summary>
            Arguments of editor changed event.
            </summary>
        </member>
        <member name="M:FarNet.EditorChangedEventArgs.#ctor(FarNet.EditorChangeKind,System.Int32)">
            
        </member>
        <member name="P:FarNet.EditorChangedEventArgs.Kind">
            
        </member>
        <member name="P:FarNet.EditorChangedEventArgs.Line">
            
        </member>
        <member name="T:FarNet.ILine">
            <summary>
            Abstract line in various text and line editors.
            </summary>
            <remarks>
            It can be:
            *) an item of <see cref="P:FarNet.IEditor.Lines"/> or <see cref="P:FarNet.IEditor.SelectedLines"/> in <see cref="T:FarNet.IEditor"/>;
            *) the command line <see cref="P:FarNet.IFar.CommandLine"/>;
            *) <see cref="P:FarNet.Forms.IEditable.Line"/> of <see cref="T:FarNet.Forms.IEdit"/>) or <see cref="T:FarNet.Forms.IComboBox"/> in a dialog.
            </remarks>
        </member>
        <member name="M:FarNet.ILine.InsertText(System.String)">
            <summary>
            Inserts text at the caret position.
            </summary>
            <param name="text">String to insert to the line.</param>
            <remarks>
            In the editor this method should not be used for the current line only.
            </remarks>
        </member>
        <member name="M:FarNet.ILine.SelectText(System.Int32,System.Int32)">
            <summary>
            Selects the span of text in the current editor line, the command line, or the dialog line.
            </summary>
            <param name="startPosition">Start position.</param>
            <param name="endPosition">End position, not included into the span.</param>
        </member>
        <member name="M:FarNet.ILine.UnselectText">
            <summary>
            Turns selection off in the current editor line, the command line, or the dialog line.
            </summary>
        </member>
        <member name="M:FarNet.ILine.ToString">
            <summary>
            Returns the line text.
            </summary>
        </member>
        <member name="M:FarNet.ILine.MatchCaret(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets the match for the current caret position.
            </summary>
            <param name="regex">Regular expression that defines "words".</param>
            <returns>The found match or null if the caret is not at any "word".</returns>
            <remarks>
            This methods is useful for the common task of getting the current "word".
            In the editor it should be called on the current line only.
            "Words" to look for are defined by a regular expression.
            </remarks>
        </member>
        <member name="P:FarNet.ILine.Index">
            <summary>
            Gets the line index in the source editor.
            </summary>
            <remarks>
            It returns -1 for the editor current line, the command line, and dialog edit lines.
            </remarks>
        </member>
        <member name="P:FarNet.ILine.Text">
            <summary>
            Gets or sets the line text.
            </summary>
            <seealso cref="P:FarNet.ILine.ActiveText"/>
            <seealso cref="P:FarNet.ILine.SelectedText"/>
        </member>
        <member name="P:FarNet.ILine.SelectedText">
            <summary>
            Gets or sets (replaces) the selected text.
            </summary>
            <remarks>
            If there is no selection then <c>get</c> returns null, <c>set</c> throws.
            </remarks>
            <seealso cref="P:FarNet.ILine.ActiveText"/>
            <seealso cref="P:FarNet.ILine.Text"/>
        </member>
        <member name="P:FarNet.ILine.Caret">
            <summary>
            Gets or sets the caret position.
            </summary>
            <remarks>
            Returns -1 if it is an editor line and it is not current.
            Setting of a negative value moves the caret to the end.
            </remarks>
        </member>
        <member name="P:FarNet.ILine.Length">
            <summary>
            Gets the text length.
            </summary>
            <remarks>
            Use it instead of more expensive <see cref="P:FarNet.ILine.Text"/> in cases when just length is needed.
            </remarks>
        </member>
        <member name="P:FarNet.ILine.WindowKind">
            <summary>
            Gets the parent window kind (<c>Editor</c>, <c>Panels</c>, <c>Dialog</c>).
            </summary>
        </member>
        <member name="P:FarNet.ILine.SelectionSpan">
            <summary>
            Gets the selection span.
            </summary>
            <remarks>
            If selection does not exists then returned position and length values are negative.
            </remarks>
        </member>
        <member name="P:FarNet.ILine.ActiveText">
            <summary>
            Gets or sets <see cref="P:FarNet.ILine.SelectedText"/> if any, otherwise gets or sets <see cref="P:FarNet.ILine.Text"/>.
            </summary>
        </member>
        <member name="T:FarNet.KeyEventArgs">
            <summary>
            Arguments of key events.
            </summary>
        </member>
        <member name="M:FarNet.KeyEventArgs.#ctor(FarNet.KeyInfo)">
            <param name="key">Key data.</param>
        </member>
        <member name="P:FarNet.KeyEventArgs.Key">
            <summary>
            Key data.
            </summary>
        </member>
        <member name="P:FarNet.KeyEventArgs.Ignore">
            <summary>
            Ignore event.
            </summary>
        </member>
        <member name="T:FarNet.MouseEventArgs">
            <summary>
            Arguments of mouse events.
            </summary>
        </member>
        <member name="M:FarNet.MouseEventArgs.#ctor(FarNet.MouseInfo)">
            <param name="mouse">Mouse data.</param>
        </member>
        <member name="P:FarNet.MouseEventArgs.Mouse">
            <summary>
            Mouse data.
            </summary>
        </member>
        <member name="P:FarNet.MouseEventArgs.Ignore">
            <summary>
            Ignore event.
            </summary>
        </member>
        <member name="T:FarNet.ExpandTabsMode">
            <summary>
            Editor expand tabs mode.
            </summary>
        </member>
        <member name="F:FarNet.ExpandTabsMode.None">
            <summary>
            Tabs are not replaced with spaces.
            </summary>
        </member>
        <member name="F:FarNet.ExpandTabsMode.All">
            <summary>
            All tabs are replaced with spaces.
            </summary>
        </member>
        <member name="F:FarNet.ExpandTabsMode.New">
            <summary>
            Only new tabs are replaced with spaces.
            </summary>
        </member>
        <member name="T:FarNet.TextFrame">
            <summary>
            Information about the text frame and the caret position.
            </summary>
        </member>
        <member name="M:FarNet.TextFrame.#ctor(System.Int32)">
            <summary>
            Sets the same value for all members.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:FarNet.TextFrame.op_Equality(FarNet.TextFrame,FarNet.TextFrame)">
            
        </member>
        <member name="M:FarNet.TextFrame.op_Inequality(FarNet.TextFrame,FarNet.TextFrame)">
            
        </member>
        <member name="M:FarNet.TextFrame.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.TextFrame.GetHashCode">
            
        </member>
        <member name="M:FarNet.TextFrame.ToString">
            
        </member>
        <member name="P:FarNet.TextFrame.CaretLine">
            <summary>
            Caret line index.
            </summary>
        </member>
        <member name="P:FarNet.TextFrame.CaretColumn">
            <summary>
            Caret character index.
            </summary>
        </member>
        <member name="P:FarNet.TextFrame.CaretScreenColumn">
            <summary>
            Caret screen column index.
            </summary>
        </member>
        <member name="P:FarNet.TextFrame.VisibleLine">
            <summary>
            First visible line index.
            </summary>
        </member>
        <member name="P:FarNet.TextFrame.VisibleChar">
            <summary>
            First visible character index.
            </summary>
        </member>
        <member name="T:FarNet.EditorColor">
            <summary>
            Editor line color span.
            </summary>
        </member>
        <member name="M:FarNet.EditorColor.#ctor(System.Int32,System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor)">
            
        </member>
        <member name="M:FarNet.EditorColor.ToString">
            
        </member>
        <member name="P:FarNet.EditorColor.Line">
            <summary>
            Line index.
            </summary>
        </member>
        <member name="P:FarNet.EditorColor.Start">
            <summary>
            Start position.
            </summary>
        </member>
        <member name="P:FarNet.EditorColor.End">
            <summary>
            End position, not included into the span, <c>End - Start</c> is the span length.
            </summary>
        </member>
        <member name="P:FarNet.EditorColor.Foreground">
            <summary>
            Foreground color. Black on black is the special case.
            </summary>
        </member>
        <member name="P:FarNet.EditorColor.Background">
            <summary>
            Background color. Black on black is the special case.
            </summary>
        </member>
        <member name="T:FarNet.EditorColorInfo">
            <summary>
            Editor line color info.
            </summary>
        </member>
        <member name="M:FarNet.EditorColorInfo.#ctor(System.Int32,System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.Guid,System.Int32)">
            
        </member>
        <member name="M:FarNet.EditorColorInfo.ToString">
            
        </member>
        <member name="P:FarNet.EditorColorInfo.Owner">
            <summary>
            Color owner ID.
            </summary>
        </member>
        <member name="P:FarNet.EditorColorInfo.Priority">
            <summary>
            Color priority.
            </summary>
        </member>
        <member name="T:FarNet.ExplorerFunctions">
            <summary>
            Defines the functions that are either implemented or supported by the explorer.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.None">
            
        </member>
        <member name="F:FarNet.ExplorerFunctions.ExploreLocation">
            <summary>
            It implements <see cref="M:FarNet.Explorer.ExploreLocation(FarNet.ExploreLocationEventArgs)"/>, works with pure paths, i.e. files without <see cref="P:FarNet.FarFile.Data"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.AcceptFiles">
            <summary>
            It implements <see cref="M:FarNet.Explorer.AcceptFiles(FarNet.AcceptFilesEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.ImportFiles">
            <summary>
            It implements <see cref="M:FarNet.Explorer.ImportFiles(FarNet.ImportFilesEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.ExportFiles">
            <summary>
            It implements <see cref="M:FarNet.Explorer.ExportFiles(FarNet.ExportFilesEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.DeleteFiles">
            <summary>
            It implements <see cref="M:FarNet.Explorer.DeleteFiles(FarNet.DeleteFilesEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.CreateFile">
            <summary>
            It implements <see cref="M:FarNet.Explorer.CreateFile(FarNet.CreateFileEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.GetContent">
            <summary>
            It implements <see cref="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.SetFile">
            <summary>
            It implements <see cref="M:FarNet.Explorer.SetFile(FarNet.SetFileEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.SetText">
            <summary>
            It implements <see cref="M:FarNet.Explorer.SetText(FarNet.SetTextEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.OpenFile">
            <summary>
            It implements <see cref="M:FarNet.Explorer.OpenFile(FarNet.OpenFileEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.CloneFile">
            <summary>
            It implements <see cref="M:FarNet.Explorer.CloneFile(FarNet.CloneFileEventArgs)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerFunctions.RenameFile">
            <summary>
            It implements <see cref="M:FarNet.Explorer.RenameFile(FarNet.RenameFileEventArgs)"/>.
            </summary>
        </member>
        <member name="T:FarNet.ExplorerModes">
            <summary>
            Explorer call mode flags.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.None">
            
        </member>
        <member name="F:FarNet.ExplorerModes.Silent">
            <summary>
            A job should not interact with a user because it is a part of another job that does not want this.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.Find">
            <summary>
            A job is called from a search or scan operation; screen output and user interaction should be avoided.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.View">
            <summary>
            A job is a part of the file view operation.
            If a file is opened in the quick view panel, than the <c>View</c> and <c>QuickView</c> flags are both set.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.Edit">
            <summary>
            A job is a part of a file edit operation.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.TopLevel">
            <summary>
            All files in a host file of file based panel should be processed.
            This flag is set on [ShiftF2], [ShiftF3] commands outside of a host file.
            Passed in an operation file list also contains all necessary information,
            so that this flag can be either ignored or used to speed up processing.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.Description">
            <summary>
            A job is called for files with file descriptions.
            </summary>
        </member>
        <member name="F:FarNet.ExplorerModes.QuickView">
            <summary>
            A job is a part of a file view operation in the quick view panel ([CtrlQ]).
            </summary>
        </member>
        <member name="T:FarNet.JobResult">
            <summary>
            Job results.
            </summary>
        </member>
        <member name="F:FarNet.JobResult.Done">
            <summary>
            A job is done.
            </summary>
        </member>
        <member name="F:FarNet.JobResult.Ignore">
            <summary>
            A job is not done and the core should not use default methods.
            Example: a method is supposed to process only special files.
            It is implemented and called but it ignores some files.
            </summary>
        </member>
        <member name="F:FarNet.JobResult.Default">
            <summary>
            A job is not done and the core should do the job as if a method is not implemented.
            Example: a method is implemented but it is only a wrapper of an actual worker.
            If a worker is optional and not specified then the core should work itself.
            </summary>
        </member>
        <member name="F:FarNet.JobResult.Incomplete">
            <summary>
            A job is done but not completely. The core should try to recover if possible.
            </summary>
        </member>
        <member name="T:FarNet.ExplorerEventArgs">
            <summary>
            Common explorer method arguments.
            </summary>
        </member>
        <member name="M:FarNet.ExplorerEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="M:FarNet.ExplorerEventArgs.ParameterOrDefault``1">
            <summary>
            Casts the not null <see cref="P:FarNet.ExplorerEventArgs.Parameter"/> to the specified type or creates and returns a new instance.
            </summary>
            <typeparam name="T">The type of the parameter to be created or converted to.</typeparam>
            <exception cref="T:System.InvalidCastException">The parameter cannot be converted to the specified type.</exception>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.Mode">
            <summary>
            Gets the explorer mode.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.Parameter">
            <summary>
            Gets or sets the parameter to be used by the explorer.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.Result">
            <summary>
            Gets or sets the job result.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.Data">
            <summary>
            Gets or sets any co-explorer data (not used by the core).
            </summary>
            <remarks>
            Use case. Some complex operation has to be performed by several calls to one or more co-explorers.
            On the first call an explorer may ask a user for extra options and keep this information in here.
            On the next calls this or another co-explorer uses this information.
            </remarks>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.PostData">
            <summary>
            To be set current.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.PostFile">
            <summary>
            To be set current.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.PostName">
            <summary>
            To be set current.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerEventArgs.UI">
            <summary>
            Tells whether user interaction is allowed.
            </summary>
        </member>
        <member name="T:FarNet.GetFilesEventArgs">
            <summary>
            <see cref="M:FarNet.Explorer.GetFiles(FarNet.GetFilesEventArgs)"/> arguments.
            </summary>
        </member>
        <member name="M:FarNet.GetFilesEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="M:FarNet.GetFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Int32,System.Int32,System.Boolean)">
            
        </member>
        <member name="P:FarNet.GetFilesEventArgs.Limit">
            <summary>
            Gets the maximum number of files to get on paging.
            </summary>
        </member>
        <member name="P:FarNet.GetFilesEventArgs.Offset">
            <summary>
            Gets the number of files to skip on paging.
            </summary>
        </member>
        <member name="P:FarNet.GetFilesEventArgs.NewFiles">
            <summary>
            Tells to gets new (not cached) files, for example on paging.
            </summary>
        </member>
        <member name="T:FarNet.CreateFileEventArgs">
            <summary>
            Create file arguments.
            </summary>
        </member>
        <member name="M:FarNet.CreateFileEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="T:FarNet.ExploreEventArgs">
            <summary>
            Arguments of ExploreX methods.
            </summary>
        </member>
        <member name="M:FarNet.ExploreEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="P:FarNet.ExploreEventArgs.NewPanel">
            <summary>
            Tells to create a new panel even if the new explorer has the same type as the current.
            </summary>
        </member>
        <member name="T:FarNet.ExploreDirectoryEventArgs">
            <summary>
            Arguments of <see cref="M:FarNet.Explorer.ExploreDirectory(FarNet.ExploreDirectoryEventArgs)"/>
            </summary>
        </member>
        <member name="M:FarNet.ExploreDirectoryEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile)">
            
        </member>
        <member name="P:FarNet.ExploreDirectoryEventArgs.File">
            <summary>
            Gets the directory file to explore.
            </summary>
        </member>
        <member name="T:FarNet.ExploreLocationEventArgs">
            <summary>
            Explore location arguments.
            </summary>
        </member>
        <member name="M:FarNet.ExploreLocationEventArgs.#ctor(FarNet.ExplorerModes,System.String)">
            
        </member>
        <member name="P:FarNet.ExploreLocationEventArgs.Location">
            <summary>
            Gets the location.
            </summary>
        </member>
        <member name="T:FarNet.ExploreParentEventArgs">
            <summary>
            Arguments of <see cref="M:FarNet.Explorer.ExploreParent(FarNet.ExploreParentEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.ExploreParentEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="T:FarNet.ExploreRootEventArgs">
            <summary>
            Arguments of <see cref="M:FarNet.Explorer.ExploreRoot(FarNet.ExploreRootEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.ExploreRootEventArgs.#ctor(FarNet.ExplorerModes)">
            
        </member>
        <member name="T:FarNet.ExplorerFileEventArgs">
            <summary>
            Arguments of methods operating on a single file.
            </summary>
        </member>
        <member name="M:FarNet.ExplorerFileEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile)">
            
        </member>
        <member name="P:FarNet.ExplorerFileEventArgs.File">
            <summary>
            Gets the file to be processed.
            </summary>
        </member>
        <member name="T:FarNet.OpenFileEventArgs">
            <summary>
            Open file arguments.
            </summary>
        </member>
        <member name="M:FarNet.OpenFileEventArgs.#ctor(FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.CloneFileEventArgs">
            <summary>
            Clone file arguments.
            </summary>
        </member>
        <member name="M:FarNet.CloneFileEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.RenameFileEventArgs">
            <summary>
            Rename file arguments.
            </summary>
        </member>
        <member name="M:FarNet.RenameFileEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.GetContentEventArgs">
            <summary>
            Export file arguments.
            </summary>
        </member>
        <member name="M:FarNet.GetContentEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile,System.String)">
            
        </member>
        <member name="P:FarNet.GetContentEventArgs.FileName">
            <summary>
            Gets the destination file path.
            </summary>
        </member>
        <member name="P:FarNet.GetContentEventArgs.CanSet">
            <summary>
            Tells that the file can be updated.
            </summary>
            <remarks>
            Use case. The core opens the file in the editor. By default the editor is locked:
            the core assumes the changes will be lost. This flag tells to not lock the editor.
            </remarks>
        </member>
        <member name="P:FarNet.GetContentEventArgs.UseText">
            <summary>
            Gets or set the exported text.
            </summary>
            <remarks>
            It can be a string or an object to be converted by <c>ToString</c>
            or a collection of objects to be converted to lines by <c>ToString</c>.
            </remarks>
        </member>
        <member name="P:FarNet.GetContentEventArgs.UseFileName">
            <summary>
            Gets or set the actual source file name to be used instead.
            </summary>
        </member>
        <member name="P:FarNet.GetContentEventArgs.UseFileExtension">
            <summary>
            Gets or sets the file extension to use.
            </summary>
            <remarks>
            It is used on opening the file in the editor.
            The extension may be useful in order to get proper syntax highlighting with the <i>Colorer</i> plugin.
            </remarks>
        </member>
        <member name="P:FarNet.GetContentEventArgs.CodePage">
            <summary>
            Gets or sets the code page to use in the editor.
            </summary>
            <remarks>
            It may be use together with <see cref="P:FarNet.GetContentEventArgs.UseFileName"/>.
            With <see cref="P:FarNet.GetContentEventArgs.UseText"/> the code page is set to 1200.
            </remarks>
        </member>
        <member name="T:FarNet.SetFileEventArgs">
            <summary>
            Update file from file arguments.
            </summary>
        </member>
        <member name="M:FarNet.SetFileEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile,System.String)">
            
        </member>
        <member name="P:FarNet.SetFileEventArgs.FileName">
            <summary>
            Gets the source file path.
            </summary>
        </member>
        <member name="T:FarNet.SetTextEventArgs">
            <summary>
            Update file from text arguments.
            </summary>
        </member>
        <member name="M:FarNet.SetTextEventArgs.#ctor(FarNet.ExplorerModes,FarNet.FarFile,System.String)">
            
        </member>
        <member name="P:FarNet.SetTextEventArgs.Text">
            <summary>
            Gets the text to be imported.
            </summary>
        </member>
        <member name="T:FarNet.ExplorerFilesEventArgs">
            <summary>
            Common arguments of batch file methods.
            </summary>
        </member>
        <member name="M:FarNet.ExplorerFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile})">
            
        </member>
        <member name="P:FarNet.ExplorerFilesEventArgs.Files">
            <summary>
            Gets the files to be processed.
            </summary>
            <remarks>
            Explorers must not change the list unless this is allowed.
            </remarks>
        </member>
        <member name="P:FarNet.ExplorerFilesEventArgs.FilesData">
            <summary>
            Gets data attached to <see cref="P:FarNet.ExplorerFilesEventArgs.Files"/>.
            </summary>
        </member>
        <member name="P:FarNet.ExplorerFilesEventArgs.FilesToStay">
            <summary>
            Gets the list of source files to stay selected and not deleted on move if the job is incomplete.
            </summary>
            <remarks>
            If the job is <see cref="F:FarNet.JobResult.Incomplete"/> then not processed files should normally stay selected
            and not deleted on move if the core is told to delete files. Such files have to added to this list.
            <para>
            If the list is empty and the job is incomplete then all input files
            that still exist in the source stay selected and not deleted.
            </para>
            <para>
            It is important that the files added to this list must be taken from the input file list.
            </para>
            <para>
            Choose a proper <see cref="P:FarNet.Explorer.FileComparer"/> otherwise source files that should stay
            may lose selection or even may be deleted because the comparer cannot find them.
            </para>
            </remarks>
        </member>
        <member name="T:FarNet.DeleteFilesEventArgs">
            <summary>
            Delete files arguments.
            </summary>
        </member>
        <member name="M:FarNet.DeleteFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile},System.Boolean)">
            
        </member>
        <member name="P:FarNet.DeleteFilesEventArgs.Force">
            <summary>
            Gets the force mode, e.g. on [ShiftDel] instead of [Del].
            </summary>
        </member>
        <member name="T:FarNet.ImportFilesEventArgs">
            <summary>
            Import files arguments.
            </summary>
        </member>
        <member name="M:FarNet.ImportFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile},System.Boolean,System.String)">
            
        </member>
        <member name="P:FarNet.ImportFilesEventArgs.Move">
            <summary>
            Tells that the files are moved.
            </summary>
        </member>
        <member name="P:FarNet.ImportFilesEventArgs.DirectoryName">
            <summary>
            The source directory name.
            </summary>
        </member>
        <member name="T:FarNet.CopyFilesEventArgs">
            <summary>
            Copy files arguments.
            </summary>
        </member>
        <member name="M:FarNet.CopyFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile},System.Boolean)">
            
        </member>
        <member name="P:FarNet.CopyFilesEventArgs.Move">
            <summary>
            Tells that the files are moved.
            </summary>
            <remarks>
            On Move an explorer may do only the Copy part of the action and set the <see cref="P:FarNet.CopyFilesEventArgs.ToDeleteFiles"/> flag.
            In that case the core calls <see cref="M:FarNet.Explorer.DeleteFiles(FarNet.DeleteFilesEventArgs)"/> of the source explorer.
            </remarks>
        </member>
        <member name="P:FarNet.CopyFilesEventArgs.ToDeleteFiles">
            <summary>
            Tells the core to delete the source files on move.
            </summary>
            <remarks>
            On move the explorer may only copy files and tell the core to delete the source files.
            The core does not delete itself, it calls <see cref="M:FarNet.Explorer.DeleteFiles(FarNet.DeleteFilesEventArgs)"/> of the source explorer.
            </remarks>
        </member>
        <member name="T:FarNet.AcceptFilesEventArgs">
            <summary>
            Accept files arguments.
            </summary>
        </member>
        <member name="M:FarNet.AcceptFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile},System.Boolean,FarNet.Explorer)">
            
        </member>
        <member name="P:FarNet.AcceptFilesEventArgs.Explorer">
            <summary>
            Gets the source file explorer.
            </summary>
        </member>
        <member name="T:FarNet.ExportFilesEventArgs">
            <summary>
            Export files arguments.
            </summary>
        </member>
        <member name="M:FarNet.ExportFilesEventArgs.#ctor(FarNet.ExplorerModes,System.Collections.Generic.IList{FarNet.FarFile},System.Boolean,System.String)">
            
        </member>
        <member name="P:FarNet.ExportFilesEventArgs.DirectoryName">
            <summary>
            The target directory name.
            </summary>
        </member>
        <member name="T:FarNet.ExplorerEnteredEventArgs">
            <summary>
            Arguments of the <see cref="M:FarNet.Panel.UIExplorerEntered(FarNet.ExplorerEnteredEventArgs)"/> method and the <see cref="E:FarNet.Panel.ExplorerEntered"/> event.
            </summary>
        </member>
        <member name="M:FarNet.ExplorerEnteredEventArgs.#ctor(FarNet.Explorer)">
            
        </member>
        <member name="P:FarNet.ExplorerEnteredEventArgs.Explorer">
            <summary>
            The old explorer replaced by the new just entered <see cref="P:FarNet.Panel.Explorer"/>.
            </summary>
        </member>
        <member name="T:FarNet.Explorer">
            <summary>
            Explorer of a virtual file system, file provider and manager, and optionally a panel maker.
            </summary>
            <remarks>
            <para>
            Explorers are used for virtual file system navigation and operations on files.
            They provide files and explorers of other file locations.
            </para>
            <para>
            Explorers are designed for panels and they normally implement the <see cref="M:FarNet.Explorer.CreatePanel"/> method.
            But panels are not required for file operations, explorers can be used for pure file management.
            Explorers can but do not have to create, configure, and update panels.
            The core creates default panels for files when needed.
            </para>
            <para>
            On requests explorers have to create and return new explorers or return nulls.
            They should never return themselves because the core assumes that each explorer
            is responsible for its own virtual directory that never change. In other words:
            once created, an explorer should always return the same data, of course,
            if these data are not changed in the virtual file system.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.#ctor(System.Guid)">
            <summary>
            New explorer with its type ID.
            </summary>
        </member>
        <member name="M:FarNet.Explorer.GetFiles(FarNet.GetFilesEventArgs)">
            <summary>
            Returns the files.
            </summary>
            <remarks>
            <para>
            The method should choose the type of the result list carefully.
            The caller does not make a copy, it users the result as it is.
            The caller may iterate through the list many times.
            The caller assumes that the list is never changed.
            If this is not the case then the method has to return a copy.
            But it is fine to reuse or update the same list on next calls.
            </para>
            <para>
			In the "Find" mode the method may be called from a background thread, most of FarNet API is not allowed.
			In the "Silent" mode any user interactions including error messages are not allowed.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.ExploreDirectory(FarNet.ExploreDirectoryEventArgs)">
            <summary>
            Returns a new directory explorer or null. It must not return itself.
            </summary>
            <remarks>
            It is not called if <see cref="P:FarNet.Explorer.Functions"/> contains the <see cref="M:FarNet.Explorer.ExploreLocation(FarNet.ExploreLocationEventArgs)"/> flag.
            <para>
            It is called when a user enters a directory, on search, and scan.
            It should just get another explorer with a new location and do nothing else.
            </para>
            <para>
			In the "Find" mode the method may be called from a background thread, most of FarNet API is not allowed.
			In the "Silent" mode any user interactions including error messages are not allowed.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.ExploreLocation(FarNet.ExploreLocationEventArgs)">
            <summary>
            Returns a new location explorer or null. It must not return itself.
            </summary>
            <remarks>
            It is called only if <see cref="P:FarNet.Explorer.Functions"/> contains the <see cref="M:FarNet.Explorer.ExploreLocation(FarNet.ExploreLocationEventArgs)"/> flag.
            <para>
			In the "Find" mode the method may be called from a background thread, most of FarNet API is not allowed.
			In the "Silent" mode any user interactions including error messages are not allowed.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.ExploreParent(FarNet.ExploreParentEventArgs)">
            <summary>
            Returns a new parent explorer or null. It must not return itself.
            </summary>
            <remarks>
            <para>
			In the "Find" mode the method may be called from a background thread, most of FarNet API is not allowed.
			In the "Silent" mode any user interactions including error messages are not allowed.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.ExploreRoot(FarNet.ExploreRootEventArgs)">
            <summary>
            Returns a new root explorer or null. It must not return itself.
            </summary>
            <remarks>
            <para>
			In the "Find" mode the method may be called from a background thread, most of FarNet API is not allowed.
			In the "Silent" mode any user interactions including error messages are not allowed.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)">
            <summary>
            Exports the file content to a file or returns it as text.
            </summary>
            <remarks>
            <para>
            It is normally called by the core on [F3], [F4], [CtrlQ], if the
            explorer sets the flag <see cref="P:FarNet.Explorer.CanGetContent"/>. It is also
            called in order to copy files to native destinations if the
            advanced method <see cref="M:FarNet.Explorer.ExportFiles(FarNet.ExportFilesEventArgs)"/> is not implemented. A
            user corrects invalid file system names interactively, if this is
            allowed. Otherwise such files are ignored.
            </para>
            <para>
            For export operations, especially batch, consider to use <see cref="M:FarNet.Explorer.ExportFiles(FarNet.ExportFilesEventArgs)"/>, it gets more overall control and it is more
            flexible in case of failures. Besides, content for view and edit
            operations does not have to be the same as content for export and
            import operations.
            </para>
            <para>
            If the content is settable then this method should set the <see cref="P:FarNet.GetContentEventArgs.CanSet"/>. It is used on editing ([F4]).
            If the flag is not set then an editor is opened locked, changes are
            not allowed by default.
            </para>
            <para>
            There are three ways of getting file content:
            <ol>
            <li>Assign a string or a line collection to the <see cref="P:FarNet.GetContentEventArgs.UseText"/>.</li>
            <li>Copy data to a temporary file with the provided <see cref="P:FarNet.GetContentEventArgs.FileName"/>.</li>
            <li>If a file represents a system file then assign its path to the <see cref="P:FarNet.GetContentEventArgs.UseFileName"/>.</li>
            </ol>
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.SetFile(FarNet.SetFileEventArgs)">
            <summary>
            Sets the file content given the system file.
            </summary>
            <remarks>
            If this method is used then <see cref="P:FarNet.Explorer.Functions"/> should contain the <see cref="F:FarNet.ExplorerFunctions.SetFile"/> flag.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.SetText(FarNet.SetTextEventArgs)">
            <summary>
            Sets the file content given the text string.
            </summary>
            <remarks>
            If this method is used then <see cref="P:FarNet.Explorer.Functions"/> should contain the <see cref="F:FarNet.ExplorerFunctions.SetText"/> flag.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.AcceptFiles(FarNet.AcceptFilesEventArgs)">
            <summary>
            Accepts module files from another explorer, normally from another module panel.
            </summary>
            <remarks>
            Read carefully all about <see cref="T:FarNet.AcceptFilesEventArgs"/> and all its members.
            <para>
            The source explorer can be any explorer of any module panel, not even from this module.
            The method should check the source type or type ID and ignore unknown or not supported.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.DeleteFiles(FarNet.DeleteFilesEventArgs)">
            <summary>
            Deletes the files.
            </summary>
        </member>
        <member name="M:FarNet.Explorer.ExportFiles(FarNet.ExportFilesEventArgs)">
            <summary>
            Exports files to a native destination.
            </summary>
            <remarks>
            This method gives some more control than default export performed with <see cref="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.ImportFiles(FarNet.ImportFilesEventArgs)">
            <summary>
            Imports files from a native source.
            </summary>
        </member>
        <member name="M:FarNet.Explorer.CloneFile(FarNet.CloneFileEventArgs)">
            <summary>
            Clones the file.
            </summary>
            <remarks>
            It is normally called for the current item in a panel on [ShiftF5].
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.CreateFile(FarNet.CreateFileEventArgs)">
            <summary>
            Creates a new directory/file.
            </summary>
            <remarks>
            It is normally called by the core on [F7] if the explorer has its flag <see cref="P:FarNet.Explorer.CanCreateFile"/> set.
            If the explorer creates something then it may also want to set one of the <c>Post*</c>,
            so that the specified file, normally just created, is set current by the core.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.OpenFile(FarNet.OpenFileEventArgs)">
            <summary>
            Opens the file.
            </summary>
            <returns>The explorer to be opened in a child panel, or null.</returns>
            <remarks>
            It is normally called for the current file in a panel on [Enter].
            The core does nothing after the call if it returns null.
            Otherwise it opens the returned explorer.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.RenameFile(FarNet.RenameFileEventArgs)">
            <summary>
            Renames the file.
            </summary>
            <remarks>
            It is normally called for the current item in a panel on [ShiftF6].
            If renaming is done then the core updates and redraws the panel
            so that an item with the new name remains current.
            If names are not unique then this is not always possible to do correctly.
            In this case set one of the <c>Post*</c>.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.CreatePanel">
            <summary>
            Creates a panel to show the explorer files.
            </summary>
            <remarks>
            The base method creates the default panel.
            </remarks>
        </member>
        <member name="M:FarNet.Explorer.EnterPanel(FarNet.Panel)">
            <summary>
            Updates the panel when this explorer gets assigned to it.
            </summary>
        </member>
        <member name="M:FarNet.Explorer.OpenPanel">
            <summary>
            Opens the explorer in a panel.
            </summary>
        </member>
        <member name="M:FarNet.Explorer.OpenPanelChild(FarNet.Panel)">
            <summary>
            Opens the explorer in a panel that is a child of the specified panel.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.TypeId">
            <summary>
            Gets the explorer type ID.
            </summary>
            <remarks>
            The core distinguishes explorer types by their type IDs, not by their class types.
            Thus, if a few classes share the same type ID then all of them are treated by the core as the same explorer type.
            </remarks>
        </member>
        <member name="P:FarNet.Explorer.Location">
            <summary>
            Gets or sets the location assigned to this explorer.
            It is set once on creation.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.Functions">
            <summary>
            Gets or sets the explorer function flags.
            It is normally set on creation and should not change.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanExploreLocation">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanGetContent">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanSetFile">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanSetText">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanAcceptFiles">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanDeleteFiles">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanExportFiles">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanImportFiles">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanCreateFile">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanOpenFile">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanCloneFile">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.CanRenameFile">
            <summary>
            Gets or sets the flag in the <see cref="P:FarNet.Explorer.Functions"/>.
            </summary>
        </member>
        <member name="P:FarNet.Explorer.FileComparer">
            <summary>
            Gets or sets the file comparer.
            </summary>
            <remarks>
            Some core procedures have to be able to compare equality of files provided by explorers. This task is difficult:
            file names are not always unique and same files from different calls are not always represented by same objects.
            Only file explorers know how to compare their files.
            <para>
            <see cref="T:FarNet.FileNameComparer"/> is used by default, i.e. files are compared by names (<c>OrdinalIgnoreCase</c>).
            <see cref="T:FarNet.FileFileComparer"/> is used when an explorer caches its files and always returns the same file objects.
            <see cref="T:FarNet.FileDataComparer"/> is used when an explorer caches its data and always gets the same data attached to files.
            <c>FileMetaComparer</c> is used in PowerShell scripts.
            Alternatively, an explorer may implement and use any custom file comparer.
            </para>
            <para>
            Use case: a panel shows some frequently changed data like current system processes.
            On update it simply recreates the files and attaches just requested process objects.
            Thus, the files and data change from call to call and they cannot be used for comparison.
            If process names are used as file names then names cannot be used for comparison, too,
            because process names are not unique even within the same call.
            Solution: a custom comparer that compares process IDs extracted from file data.
            </para>
            </remarks>
        </member>
        <member name="T:FarNet.Far">
            <summary>
            Holder of the global <see cref="T:FarNet.IFar"/> host instance.
            </summary>
        </member>
        <member name="P:FarNet.Far.Net">
            <summary>
            The global <see cref="T:FarNet.IFar"/> instance.
            </summary>
        </member>
        <member name="T:FarNet.IFar">
            <summary>
            Main interface which exposes top entries of the FarNet object model.
            </summary>
            <remarks>
            The only instance of this class is exposed as the static property <see cref="P:FarNet.Far.Net"/> of the class <see cref="T:FarNet.Far"/>.
            Both names <c>Far</c> and <c>Net</c> are symbolic and make sense only when used together as <c>Far.Net</c>.
            <para>
            The exposed instance provides access to top level Far methods and objects or creates new Far objects like
            menus, input and message boxes, dialogs, editors, viewers, panels and etc.
            Further operations are performed on that objects.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IFar.WorksPanel(FarNet.Panel,FarNet.Explorer)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IFar.GetModuleAction(System.Guid)">
            <summary>
            Gets a module action by its ID. Null is returned if the ID is not found.
            </summary>
        </member>
        <member name="M:FarNet.IFar.Message(System.String)">
            <summary>
            Shows a message box.
            </summary>
            <param name="body">Message text.</param>
            <seealso cref="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[],System.String)"/>
        </member>
        <member name="M:FarNet.IFar.Message(System.String,System.String)">
            <summary>
            Shows a message box.
            </summary>
            <param name="body">Message text.</param>
            <param name="header">Message header.</param>
            <seealso cref="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[],System.String)"/>
        </member>
        <member name="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions)">
            <summary>
            Shows a message box with options.
            </summary>
            <param name="body">Message text.</param>
            <param name="header">Message header.</param>
            <param name="options">Message options.</param>
            <returns>Button index or -1 if canceled.</returns>
            <seealso cref="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[],System.String)"/>
        </member>
        <member name="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[])">
            <summary>
            Shows a message box with options and buttons.
            </summary>
            <param name="body">Message text.</param>
            <param name="header">Message header.</param>
            <param name="options">Message options.</param>
            <param name="buttons">Message buttons. Not supported with <c>Gui*</c> options.</param>
            <returns>Button index or -1 if canceled.</returns>
            <seealso cref="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[],System.String)"/>
        </member>
        <member name="M:FarNet.IFar.Message(System.String,System.String,FarNet.MessageOptions,System.String[],System.String)">
            <summary>
            Shows a message box with options, buttons and help.
            </summary>
            <param name="body">Message text.</param>
            <param name="header">Message header.</param>
            <param name="options">Message options.</param>
            <param name="buttons">Message buttons. Not supported with <c>Gui*</c> options.</param>
            <param name="helpTopic">
            <summary>
			Help topic. Use <see cref="M:FarNet.IFar.GetHelpTopic(System.String)"/>. (Format details: <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/>)
		</summary>
            It is ignored in GUI and drawn messages.
            </param>
            <returns>Button index or -1 if canceled, or 0 in the drawn message.</returns>
            <remarks>
            <para>
            If the <see cref="F:FarNet.MessageOptions.Draw"/> option is set then GUI or buttons are not allowed.
            A message box with no buttons is simply drawn and the execution continues immediately.
            The caller has to remove the message by redrawing or restoring the screen.
            </para>
            <para>
            If the <see cref="F:FarNet.MessageOptions.Draw"/> option is not set then the message is modal and
            it shows at least the OK button if there are no buttons provided by the parameters.
            </para>
            <para>
            In extreme cases when a message contains too many or too long buttons
            a listbox dialog is used where the listbox items work as buttons.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IFar.CreateInputBox">
            <summary>
            Creates a new input box.
            You set its properties and call <see cref="M:FarNet.IInputBox.Show"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.CreateMenu">
            <summary>
            Creates a new standard Far menu.
            You set its properties and call <see cref="M:FarNet.IAnyMenu.Show"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.CreateListMenu">
            <summary>
            Creates a new menu implemented with <see cref="T:FarNet.Forms.IListBox"/>.
            You set its properties and call <see cref="M:FarNet.IAnyMenu.Show"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.PasteFromClipboard">
            <summary>
            Gets the clipboard text.
            </summary>
        </member>
        <member name="M:FarNet.IFar.CopyToClipboard(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
        </member>
        <member name="M:FarNet.IFar.CreateEditor">
            <summary>
            Creates a new editor.
            You set its properties and call <see cref="M:FarNet.IEditor.Open(FarNet.OpenMode)"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.CreateViewer">
            <summary>
            Creates a new viewer.
            You set its properties and call <see cref="M:FarNet.IViewer.Open(FarNet.OpenMode)"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.PostMacro(System.String)">
            <summary>
            Posts a macro to Far. Processing is not displayed. Keys are sent to editor plugins.
            </summary>
            <param name="macro">Macro text.</param>
        </member>
        <member name="M:FarNet.IFar.PostMacro(System.String,System.Boolean,System.Boolean)">
            <summary>
            Posts a macro to Far.
            </summary>
            <param name="macro">Macro text.</param>
            <param name="enableOutput">Tells to display processing.</param>
            <param name="disablePlugins">Don't send keystrokes to editor plugins.</param>
        </member>
        <member name="M:FarNet.IFar.NameToKeyInfo(System.String)">
            <summary>
            Converts a key string representation to <see cref="T:FarNet.KeyInfo"/>. Returns null on errors.
            </summary>
        </member>
        <member name="M:FarNet.IFar.KeyInfoToName(FarNet.KeyInfo)">
            <summary>
            Converts a <see cref="T:FarNet.KeyInfo"/> to its string representation. Returns null on errors.
            </summary>
        </member>
        <member name="M:FarNet.IFar.Editors">
            <summary>
            Gets the list of all editors. Use it sparingly.
            </summary>
            <remarks>
            Work on not current editor instances is strongly not recommended.
            Still, this list provides access to them all, so be careful.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.Viewers">
            <summary>
            Gets the list of all viewers. Use it sparingly.
            </summary>
            <remarks>
            Work on not current viewer instances is strongly not recommended.
            Still, this list provides access to them all, so be careful.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.ShowError(System.String,System.Exception)">
            <summary>
            Shows an error information in a message box which also stops any macro.
            </summary>
            <param name="title">Message.</param>
            <param name="exception">Exception.</param>
            <remarks>
            For safety sake: avoiding unexpected results on exceptions during a running
            macro this method stops a macro before showing an error dialog. That is why
            this method should be called only in exceptional situations.
            <para>
            Basically it is called internally on all exceptions not handled by modules
            but it is as well designed for direct calls, too.
            </para>
            <seealso cref="T:FarNet.ModuleException"/>
            </remarks>
        </member>
        <member name="M:FarNet.IFar.CreateDialog(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new dialog.
            You set its properties, add controls, event handlers and then call <see cref="M:FarNet.Forms.IDialog.Show"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
            <remarks>
            You can set <c>left</c> = -1 or <c>top</c> = -1 to be auto-calculated.
            In this case <c>right</c> or <c>bottom</c> should be width and height.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)">
            <summary>Shows the help topic from a help file.</summary><param name="path">Help file location, see options.</param><param name="topic">Help topic. If this parameter is empty, then the topic "Contents" is used.</param><param name="options">Help options describing path and topic.</param><remarks>
			This method is used in special cases when <see cref="M:FarNet.IFar.ShowHelpTopic(System.String)"/> is not enough.
			<para>
			The <c>topic</c> parameter describes a help topic and can be in one of the following formats:
			</para>
			<code>
				<![CDATA[
"Topic"
Reference to a topic in the help file.

":Topic"
Reference to a topic from the main Far Manager help file.

"<FullPath\>Topic"
Reference to a topic in a help file located in a folder with full or relative
path of FullPath. An ending backslash must be added. The reference must not be
split on multiple lines. For example, the help file is located in the folder
"D:\Far\FarNet\Modules\Foo" and we need the topic "FooInfo" from it:
"<D:\Far\FarNet\Modules\Foo\>FooInfo"

"<FullModuleName>Topic"
Reference to a topic in a help file located in the same folder as the module
with the relative or full path of FullModuleName. The reference must not be
split on mutiple lines. For example, we need the help topic "FooInfo" from the
help file of the module Foo "D:\Far\FarNet\Modules\Foo\Foo.dll":
"<D:\Far\FarNet\Modules\Foo\Foo.dll>FooInfo"
]]>
			</code>
		</remarks>
        </member>
        <member name="M:FarNet.IFar.ShowHelpTopic(System.String)">
            <summary>
            Shows the help topic from a help file located in the directory of the calling assembly.
            </summary>
        </member>
        <member name="M:FarNet.IFar.GetHelpTopic(System.String)">
            <summary>
            Formats the help topic path for <c>HelpTopic</c> properties of various UI classes.
            </summary>
            <param name="topic">Module help topic name.</param>
            <returns>Help topic path formatted for the core.</returns>
            <remarks>
            The help topic path is formatted for a help file located in the directory of the calling assembly.
            Normally it is a module assembly but it can be any other, e.g. a shared library or a sub-module.
            <para>
            This method is enough for typical use cases and <c>HelpTopic</c> strings are formatted internally.
            In special cases see <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/> for help topic format details.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IFar.Panels(System.Type)">
            <summary>
            Returns opened module panels having optionally specified type.
            </summary>
            <param name="type">The panel class type. Use null for any module panel.</param>
        </member>
        <member name="M:FarNet.IFar.Panels(System.Guid)">
            <summary>
            Returns opened module panels having specified type ID.
            </summary>
            <param name="typeId">The panel type ID (normally assigned on creation).</param>
        </member>
        <member name="M:FarNet.IFar.Input(System.String)">
            <summary>
			Creates and shows <see cref="T:FarNet.IInputBox"/>.
			Note: <see cref="P:FarNet.IInputBox.EmptyEnabled"/> is set to true.
			If you need more input box options, use the interface directly.
		</summary>
            <param name="prompt">Prompt text.</param>
            <returns>Entered text or null if canceled.</returns>
        </member>
        <member name="M:FarNet.IFar.Input(System.String,System.String)">
            <summary>
			Creates and shows <see cref="T:FarNet.IInputBox"/>.
			Note: <see cref="P:FarNet.IInputBox.EmptyEnabled"/> is set to true.
			If you need more input box options, use the interface directly.
		</summary>
            <param name="prompt">Prompt text.</param>
            <param name="history">History string.</param>
            <returns>Entered text or null if canceled.</returns>
        </member>
        <member name="M:FarNet.IFar.Input(System.String,System.String,System.String)">
            <summary>
			Creates and shows <see cref="T:FarNet.IInputBox"/>.
			Note: <see cref="P:FarNet.IInputBox.EmptyEnabled"/> is set to true.
			If you need more input box options, use the interface directly.
		</summary>
            <param name="prompt">Prompt text.</param>
            <param name="history">History string.</param>
            <param name="title">Title of the box.</param>
            <returns>Entered text or null if canceled.</returns>
        </member>
        <member name="M:FarNet.IFar.Input(System.String,System.String,System.String,System.String)">
            <summary>
			Creates and shows <see cref="T:FarNet.IInputBox"/>.
			Note: <see cref="P:FarNet.IInputBox.EmptyEnabled"/> is set to true.
			If you need more input box options, use the interface directly.
		</summary>
            <param name="prompt">Prompt text.</param>
            <param name="history">History string.</param>
            <param name="title">Title of the box.</param>
            <param name="text">Text to be edited.</param>
            <returns>Entered text or null if canceled.</returns>
        </member>
        <member name="M:FarNet.IFar.PostStep(System.Action)">
            <summary>
            Posts a single step action, see <see cref="M:FarNet.IFar.PostSteps(System.Collections.Generic.IEnumerable{System.Object})"/>.
            </summary>
        </member>
        <member name="M:FarNet.IFar.PostSteps(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Posts a sequence of steps enumerated asynchronously (e.g. coroutine with <c>yield</c>).
            </summary>
            <remarks>
            Some operations take effect only when module code finishes and the core gets control.
            Such operations cannot be invoked synchronously in the middle of module code.
            But with this method they may be invoked in the middle of a step sequence.
            <para>
            This method internally uses the plugin menu [F11] for chaining steps.
            Thus, steps should not end in areas where this menu is not available.
            </para>
            <para>
            Allowed types of step objects:
            *) Nulls are ignored (they may be needed with yield);
            *) Strings are posted as macros;
            *) Action delegates are invoked.
            Action delegates should be not post macros.
            </para>
            <para>
            An enumerator implemented with <c>yield</c> works as "coroutine".
            Its code is suspended on <c>yield return</c> and the core gets
            control. The code is resumed on the next iteration. The code may
            yield nulls in order to separate steps.
            </para>
            <para>
            Multiple and nested step sequences are allowed. The last posted
            sequence is processed first. The only caveat: new sequences must
            not be posted from <c>MoveNext</c> when they return false.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IFar.PostJob(System.Action)">
            <summary>
            Posts a job that will be called by the core when it gets control.
            </summary>
            <param name="handler">Job handler to be posted.</param>
            <remarks>
            It is mostly designed for background job calls. Normally other threads are not allowed to call the core.
            Violation of this rule may lead to crashes and unpredictable results. This method is thread safe. It is
            used to post a job that will be called from the main thread as soon as the core gets control.
            The posted job can call the core as usual.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.TempName(System.String)">
            <summary>
            Generates full path for a temp file or directory in %TEMP% (nothing is created).
            </summary>
            <param name="prefix">If empty "FTMP" is generated otherwise at most 4 first characters are used and padded by "0".</param>
            <returns>Generated name.</returns>
        </member>
        <member name="M:FarNet.IFar.TempName">
            <summary>
            See <see cref="M:FarNet.IFar.TempName(System.String)"/>
            </summary>
        </member>
        <member name="M:FarNet.IFar.TempFolder(System.String)">
            <summary>
            Creates a folder in %TEMP%.
            </summary>
            <param name="prefix">If empty "FTMP" is generated otherwise at most 4 first characters are used and padded by "0".</param>
            <returns>Full path of the created folder.</returns>
        </member>
        <member name="M:FarNet.IFar.TempFolder">
            <summary>
            See <see cref="M:FarNet.IFar.TempFolder(System.String)"/>
            </summary>
        </member>
        <member name="M:FarNet.IFar.GetCurrentUICulture(System.Boolean)">
            <summary>
            Returns the current UI culture.
            </summary>
            <param name="update">Tells to update the internal cached value.</param>
            <returns>The current UI culture (cached or updated).</returns>
        </member>
        <member name="M:FarNet.IFar.Quit">
            <summary>
            Tells Far to exit if it is possible.
            </summary>
            <remarks>
            Before sending this request to Far it calls <see cref="M:FarNet.ModuleHost.CanExit"/> for each module.
            If all modules return true then Far is called. If there is an editor with not saved changes
            then Far asks a user how to proceed and, in fact, a user may continue work in Far.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.IsMaskMatch(System.String,System.String)">
            <summary>
            Gets true if a file path matches a Far Manager file mask.
            </summary>
            <param name="path">Input file path.</param>
            <param name="mask">Mask: "include-wildcard-list[|exclude-wildcard-list]" or "/regex/[option]".</param>
        </member>
        <member name="M:FarNet.IFar.IsMaskValid(System.String)">
            <summary>
            Gets true if a Far Manager file mask is valid.
            </summary>
        </member>
        <member name="M:FarNet.IFar.GetFolderPath(FarNet.SpecialFolder)">
            <summary>
            For internal use. Gets the local or roamimg data directory path of the application.
            </summary>
            <remarks>
            This method and directories are used by the core and not designed for modules.
            Modules should use <see cref="M:FarNet.IModuleManager.GetFolderPath(FarNet.SpecialFolder,System.Boolean)"/> in order to get their data directories.
            </remarks>
        </member>
        <member name="M:FarNet.IFar.GetModuleManager(System.String)">
            <summary>
            Returns the manager of a module specified by its name.
            </summary>
            <param name="name">The module name.</param>
        </member>
        <member name="M:FarNet.IFar.GetModuleManager(System.Type)">
            <summary>
            Returns the manager of a module specified by any type from it.
            </summary>
            <param name="type">Any type from the module assembly.</param>
        </member>
        <member name="M:FarNet.IFar.GetSetting(FarNet.FarSetting,System.String)">
            <summary>
            Gets the specified setting value.
            </summary>
            <param name="settingSet">Setting set.</param>
            <param name="settingName">Setting name.</param>
            <returns>Requested value (long, string, or byte[]).</returns>
            <exception cref="T:System.ArgumentException">The specified set or name is invalid.</exception>
        </member>
        <member name="P:FarNet.IFar.FarVersion">
            <summary>
            Gets Far version.
            </summary>
        </member>
        <member name="P:FarNet.IFar.FarNetVersion">
            <summary>
            Gets FarNet version.
            </summary>
        </member>
        <member name="P:FarNet.IFar.AnyEditor">
            <summary>
            Gets the object with global editor events, settings and tools.
            </summary>
            <remarks>
            Members of the returned object deal with global editor events, settings and tools.
            Subscribe to its events if you want to handle some events in the same way for all editors.
            </remarks>
        </member>
        <member name="P:FarNet.IFar.AnyViewer">
            <summary>
            Gets the object with global viewer events, settings and tools.
            </summary>
            <remarks>
            Members of the returned object deal with global viewer events, settings and tools.
            Subscribe to its events if you want to handle some events in the same way for all viewers.
            </remarks>
        </member>
        <member name="P:FarNet.IFar.Editor">
            <summary>
            Gets the current editor or null if none.
            </summary>
            <remarks>
            Normally you use this object instantly and do not keep it for later use.
            Next time when you work on the current editor request this object again.
            </remarks>
        </member>
        <member name="P:FarNet.IFar.Viewer">
            <summary>
            Gets the current viewer or null if none.
            </summary>
            <remarks>
            Normally you use this object instantly and do not keep it for later use.
            Next time when you work on the current viewer request this object again.
            </remarks>
        </member>
        <member name="P:FarNet.IFar.Panel">
            <summary>
            Gets the active panel or null if Far started with /e or /v.
            </summary>
            <remarks>
            If it is a module panel it returns <see cref="P:FarNet.IFar.Panel"/>, you can keep its reference for later use,
            just remember that its state may change and it can be even closed.
            <para>
            If it is not a FarNet panel then you use this object instantly and do not keep it.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IFar.Panel2">
            <summary>
            Gets the passive panel or null if Far started with /e or /v.
            </summary>
            <remarks>
            See remarks for the active panel (<see cref="P:FarNet.IFar.Panel"/>).
            </remarks>
        </member>
        <member name="P:FarNet.IFar.CommandLine">
            <summary>
            Gets the command line operator.
            </summary>
            <remarks>
            If a module is called from the command line (including user menu [F2])
            then command line properties and methods may not work correctly. In
            this case consider to call an operation from the plugins menu [F11].
            <para>
            A module can set the entire command line text if it is called
            from the command line but not from the user menu.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IFar.MacroArea">
            <summary>
            Gets the current macro area.
            </summary>
        </member>
        <member name="P:FarNet.IFar.MacroState">
            <summary>
            Gets the current macro state.
            </summary>
        </member>
        <member name="P:FarNet.IFar.Dialog">
            <summary>
            Gets the current dialog or null if the current window is not dialog.
            </summary>
        </member>
        <member name="P:FarNet.IFar.Line">
            <summary>
            Gets the current editor or dialog edit box line or the command line.
            </summary>
            <remarks>
            It is null if there is no current editor line available.
            </remarks>
        </member>
        <member name="P:FarNet.IFar.CurrentDirectory">
            <summary>
            Gets the internal current directory.
            </summary>
            <remarks>
            The process current directory is not related to panels paths at all (Far 2.0.1145).
            and normally modules should forget about the current directory, they should use this path.
            It should be used as the default path for file system operations (e.g. where to create a new file).
            </remarks>
        </member>
        <member name="P:FarNet.IFar.Window">
            <summary>
            Gets the window operator.
            </summary>
        </member>
        <member name="P:FarNet.IFar.UI">
            <summary>
            Gets the low level UI operator.
            </summary>
        </member>
        <member name="P:FarNet.IFar.History">
            <summary>
            Gets the history operator.
            </summary>
        </member>
        <member name="T:FarNet.TaskbarProgressBarState">
            <summary>
            Represents the thumbnail progress bar state.
            </summary>
        </member>
        <member name="F:FarNet.TaskbarProgressBarState.NoProgress">
            <summary>
            No progress is displayed.
            </summary>
        </member>
        <member name="F:FarNet.TaskbarProgressBarState.Indeterminate">
            <summary>
            The progress is indeterminate (marquee).
            </summary>
        </member>
        <member name="F:FarNet.TaskbarProgressBarState.Normal">
            <summary>
            Normal progress is displayed.
            </summary>
        </member>
        <member name="F:FarNet.TaskbarProgressBarState.Error">
            <summary>
            An error occurred (red).
            </summary>
        </member>
        <member name="F:FarNet.TaskbarProgressBarState.Paused">
            <summary>
            The operation is paused (yellow).
            </summary>
        </member>
        <member name="T:FarNet.HelpOptions">
            <summary>
            Options for <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/>.
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.None">
            <summary>
            Show the topic from the help file of the calling plugin
            (note: it is always FarNet and the path is <c>Far.Net.GetType().Assembly.Location</c>).
            If topic begins with a colon ':', the topic from the main Far help file is shown and path is ignored.
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.Far">
            <summary>
            Path is ignored and the topic from the main Far help file is shown.
            In this case you do not need to start the topic with a colon ':'.
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.File">
            <summary>
            Assume path specifies full path to a HLF file (c:\path\filename).
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.Path">
            <summary>
            Assume path specifies full path to a folder (c:\path) from which
            a help file is selected according to current language settings.
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.UseContents">
            <summary>
            If the topic is not found, try to show the "Contents" topic.
            This flag can be combined with other flags.
            </summary>
        </member>
        <member name="F:FarNet.HelpOptions.NoError">
            <summary>
            Disable file or topic not found error messages for this function call.
            This flag can be combined with other flags.
            </summary>
        </member>
        <member name="T:FarNet.MacroState">
            <summary>
            States of macro processing.
            </summary>
        </member>
        <member name="F:FarNet.MacroState.None">
            <summary>
            No processing.
            </summary>
        </member>
        <member name="F:FarNet.MacroState.Executing">
            <summary>
            Executing with plugins excluded.
            </summary>
        </member>
        <member name="F:FarNet.MacroState.ExecutingCommon">
            <summary>
            Executing with plugins included.
            </summary>
        </member>
        <member name="F:FarNet.MacroState.Recording">
            <summary>
            Recording with plugins excluded.
            </summary>
        </member>
        <member name="F:FarNet.MacroState.RecordingCommon">
            <summary>
            Recording with plugins included.
            </summary>
        </member>
        <member name="T:FarNet.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
        </member>
        <member name="F:FarNet.SpecialFolder.LocalData">
            <summary>
            The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.
            </summary>
        </member>
        <member name="F:FarNet.SpecialFolder.RoamingData">
            <summary>
            The directory that serves as a common repository for application-specific data for the current roaming user.
            </summary>
        </member>
        <member name="T:FarNet.FarSetting">
            <summary>
            Far Manager settings.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.None">
            
        </member>
        <member name="F:FarNet.FarSetting.Confirmations">
            <summary>
            Confirmation settings:
            Copy, Move, RO, Drag, Delete, DeleteFolder, Esc, HistoryClear, Exit, RemoveConnection.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.System">
            <summary>
            System settings:
            DeleteToRecycleBin, CopyOpened, PluginMaxReadData, ScanJunction.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.Panels">
            <summary>
            Panels settings:
            ShowHidden.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.Editor">
            <summary>
            Editor settings:
            WordDiv.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.Screen">
            <summary>
            Screen settings:
            KeyBar.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.Dialog">
            <summary>
            Dialog settings:
            EditBlock, EULBsClear, DelRemovesBlocks.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.Interface">
            <summary>
            Interface settings:
            ShowMenuBar.
            </summary>
        </member>
        <member name="F:FarNet.FarSetting.PanelLayout">
            <summary>
            Panel layout settings:
            ColumnTitles, StatusLine, SortMode.
            </summary>
        </member>
        <member name="T:FarNet.XmlAttributeInfo">
            <summary>
            TEST ONLY
            </summary>
        </member>
        <member name="M:FarNet.XmlAttributeInfo.#ctor(System.String,System.Func{System.Object,System.Object})">
            <summary>
            TEST ONLY
            </summary>
        </member>
        <member name="P:FarNet.XmlAttributeInfo.Name">
            <summary>
            TEST ONLY
            </summary>
        </member>
        <member name="P:FarNet.XmlAttributeInfo.Getter">
            <summary>
            TEST ONLY
            </summary>
        </member>
        <member name="T:FarNet.IXmlInfo">
            <summary>
            Not yet public.
            </summary>
        </member>
        <member name="M:FarNet.IXmlInfo.XmlNodeName">
            
        </member>
        <member name="M:FarNet.IXmlInfo.XmlAttributes">
            
        </member>
        <member name="T:FarNet.FarFile">
            <summary>
            Abstract panel item representing file, directory, plugin item, or module item.
            </summary>
            <remarks>
            Modules may implement derived classes in order to represent their panel
            items effectively. Alternatively, they may use <see cref="T:FarNet.SetFile"/>,
            already implemented simple property set.
            <para>
            Although this class is abstract all its virtual properties are defined,
            they get default values and throw <c>NotImplementedException</c> on
            setting. Thus, derived classes do not have to implement every property,
            at least <see cref="P:FarNet.FarFile.Name"/> has to be defined (in order to be shown in
            a panel), other properties are implemented only if they are used.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.FarFile.ToString">
            <summary>
            Returns the <see cref="P:FarNet.FarFile.Name"/>.
            </summary>
        </member>
        <member name="M:FarNet.FarFile.XmlNodeName">
            <summary>
            Not yet public.
            </summary>
        </member>
        <member name="M:FarNet.FarFile.XmlAttributes">
            <summary>
            Not yet public.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Name">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Owner">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Data">
            <summary>
            User data. Only for <see cref="T:FarNet.Panel"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.LastAccessTime">
            <summary>
            Last access time.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.LastWriteTime">
            <summary>
            Last write time.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Length">
            <summary>
            File length.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Columns">
            <summary>
            Custom columns. See <see cref="T:FarNet.PanelPlan"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.Attributes">
            <summary>
            File attributes. All <c>Is*</c> properties are based on this value.
            </summary>
            <remarks>
            Derived class may override this property and cannot override <c>Is*</c>.
            All <c>Is*</c> properties are completely mapped to this value.
            </remarks>
        </member>
        <member name="P:FarNet.FarFile.IsReadOnly">
            <summary>
            Read only attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsHidden">
            <summary>
            Hidden attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsSystem">
            <summary>
            System attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsDirectory">
            <summary>
            Directory attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsArchive">
            <summary>
            Archive attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsReparsePoint">
            <summary>
            Reparse point attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsCompressed">
            <summary>
            Compressed attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarFile.IsEncrypted">
            <summary>
            Encrypted attribute.
            See <see cref="P:FarNet.FarFile.Attributes"/>.
            </summary>
        </member>
        <member name="T:FarNet.SetFile">
            <summary>
            Straightforward implementation of <see cref="T:FarNet.FarFile"/> ready to use by module panels.
            </summary>
            <remarks>
            It is just a set of properties where any property can be set. In most
            cases panels may use this class for their items. In some cases they may
            implement custom classes derived from <see cref="T:FarNet.FarFile"/> in order to
            represent data more effectively (using less memory or working faster).
            </remarks>
        </member>
        <member name="M:FarNet.SetFile.#ctor">
            <summary>
            Creates an empty file data object.
            </summary>
        </member>
        <member name="M:FarNet.SetFile.#ctor(FarNet.FarFile)">
            <summary>
            Creates file data snapshot from a <see cref="T:FarNet.FarFile"/> object.
            </summary>
            <param name="file">Any panel file which data are taken.</param>
        </member>
        <member name="M:FarNet.SetFile.#ctor(System.IO.FileSystemInfo,System.Boolean)">
            <summary>
            Creates file data snapshot from a <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
            <param name="info">File system item info (normally <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/>).</param>
            <param name="fullName">Use the full name (path) as the name.</param>
        </member>
        <member name="P:FarNet.SetFile.Name">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Owner">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.CreationTime">
            <summary>
            Creation time.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.LastAccessTime">
            <summary>
            Last access time.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.LastWriteTime">
            <summary>
            Last write time.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Length">
            <summary>
            File length.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Data">
            <summary>
            User data. Only for <see cref="T:FarNet.Panel"/>.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Attributes">
            <summary>
            File attributes.
            </summary>
        </member>
        <member name="P:FarNet.SetFile.Columns">
            <summary>
            Custom columns. See <see cref="T:FarNet.PanelPlan"/>.
            </summary>
        </member>
        <member name="T:FarNet.WrapFile">
            <summary>
            File that wraps another file.
            </summary>
        </member>
        <member name="M:FarNet.WrapFile.#ctor(FarNet.FarFile)">
            
        </member>
        <member name="P:FarNet.WrapFile.File">
            <summary>
            Gets the source file.
            </summary>
        </member>
        <member name="P:FarNet.WrapFile.Name">
            
        </member>
        <member name="P:FarNet.WrapFile.Description">
            
        </member>
        <member name="P:FarNet.WrapFile.Owner">
            
        </member>
        <member name="P:FarNet.WrapFile.Data">
            
        </member>
        <member name="P:FarNet.WrapFile.CreationTime">
            
        </member>
        <member name="P:FarNet.WrapFile.LastAccessTime">
            
        </member>
        <member name="P:FarNet.WrapFile.LastWriteTime">
            
        </member>
        <member name="P:FarNet.WrapFile.Length">
            
        </member>
        <member name="P:FarNet.WrapFile.Columns">
            
        </member>
        <member name="P:FarNet.WrapFile.Attributes">
            
        </member>
        <member name="T:FarNet.FileFileComparer">
            <summary>
            Compares files by their references.
            </summary>
        </member>
        <member name="M:FarNet.FileFileComparer.Equals(FarNet.FarFile,FarNet.FarFile)">
            
        </member>
        <member name="M:FarNet.FileFileComparer.GetHashCode(FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.FileDataComparer">
            <summary>
            Compares files by their <see cref="P:FarNet.FarFile.Data"/> references.
            </summary>
        </member>
        <member name="M:FarNet.FileDataComparer.Equals(FarNet.FarFile,FarNet.FarFile)">
            
        </member>
        <member name="M:FarNet.FileDataComparer.GetHashCode(FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.FileNameComparer">
            <summary>
            Compares files by their names.
            </summary>
        </member>
        <member name="M:FarNet.FileNameComparer.#ctor">
            <summary>
            New comparer with the <c>OrdinalIgnoreCase</c> string comparer.
            </summary>
        </member>
        <member name="M:FarNet.FileNameComparer.#ctor(System.StringComparer)">
            <summary>
            New comparer with the specified string comparer.
            </summary>
        </member>
        <member name="M:FarNet.FileNameComparer.Equals(FarNet.FarFile,FarNet.FarFile)">
            
        </member>
        <member name="M:FarNet.FileNameComparer.GetHashCode(FarNet.FarFile)">
            
        </member>
        <member name="T:FarNet.Forms.IControl">
            <summary>
            Base dialog control.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IControl.Drawing">
            <summary>
            Called to draw the control.
            </summary>
            <remarks>
            Event handlers of <see cref="T:FarNet.Forms.IUserControl"/> controls use this event to draw them.
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IControl.Coloring">
            <summary>
            Called to color the control.
            </summary>
            <remarks>
            Event handlers change the default colors provided by the event arguments.
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IControl.GotFocus">
            <summary>
            Called when the control has got focus.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IControl.LosingFocus">
            <summary>
            Called when the control is losing focus.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IControl.MouseClicked">
            <summary>
            Called when the mouse has clicked on the control.
            </summary>
            <remarks>
            For a <see cref="T:FarNet.Forms.IUserControl"/> mouse coordinates are relative to its left top;
            for other controls mouse coordinates are absolute screen coordinates.
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IControl.KeyPressed">
            <summary>
            Called when a key has been pressed.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Id">
            <summary>
            Gets the control by its ID.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Text">
            <summary>
            Gets or sets the control text.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Disabled">
            <summary>
            Gets or sets the disabled state flag.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Hidden">
            <summary>
            Gets or sets the hidden state flag.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Rect">
            <summary>
            Gets or sets the control rectangular.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Data">
            <summary>
            Gets or set any data (not used by the core).
            It is settable in FarNet dialogs.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IControl.Name">
            <summary>
            Gets or sets a name (not used by the core).
            It is settable in FarNet dialogs.
            </summary>
        </member>
        <member name="T:FarNet.Forms.IEditable">
            <summary>
            An editable dialog item.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IEditable.TextChanged">
            <summary>
            Called when the text has changed (say, on typing).
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEditable.Line">
            <summary>
            Gets the editor line operator.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEditable.ReadOnly">
            <summary>
            Tells to disable text changes for a user.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEditable.SelectOnEntry">
            <summary>
            Tells to select the text when the control gets focus.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEditable.IsTouched">
            <summary>
            Gets or sets the touched state.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEditable.ExpandEnvironmentVariables">
            <summary>
			Tells to expand environment variables in the input text.
		</summary>
        </member>
        <member name="T:FarNet.Forms.IBox">
            <summary>
            Double line or single line box control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddBox(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/>.
            </summary>
            <remarks>
            If the box is the first dialog control then its <see cref="P:FarNet.Forms.IControl.Text"/> is used as the Far console title.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IBox.Single">
            <summary>
            Tells to create the single line box.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBox.LeftText">
            <summary>
            Tells to align the text left.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBox.ShowAmpersand">
            <summary>
			Tells to show ampersand symbols in the text instead of using them as hotkey marks.
		</summary>
        </member>
        <member name="T:FarNet.Forms.IButton">
            <summary>
            Button control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddButton(System.Int32,System.Int32,System.String)"/>.
            </summary>
            <remarks>
            When a button is clicked then <see cref="E:FarNet.Forms.IButton.ButtonClicked"/> event is called and the dialog normally closes.
            <para>
            There are a few ways to keep the dialog running: set the button property <see cref="P:FarNet.Forms.IButton.NoClose"/> or
            set the event property <see cref="P:FarNet.Forms.ButtonClickedEventArgs.Ignore"/>.
            </para>
            </remarks>
            <seealso cref="P:FarNet.Forms.IDialog.Cancel"/>
        </member>
        <member name="E:FarNet.Forms.IButton.ButtonClicked">
            <summary>
			Called on the button clicks and similar actions: [Enter] when focused or the hotkey at any time.
		</summary><remarks>
			NOTE: even if this is the default control (<see cref="P:FarNet.Forms.IDialog.Default"/>) or
			the cancel button (<see cref="P:FarNet.Forms.IDialog.Cancel"/>) the event is not triggered
			if the button is not explicitly clicked or a similar action is performed.
			Thus, [CtrlEnter] (accept the dialog) and [Esc] (cancel the dialog)
			do not trigger this event.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IButton.NoClose">
            <summary>
            Tells to not close the dialog on using this button.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IButton.CenterGroup">
            <summary>
			Tells that the control if one of the centered group.
		</summary><remarks>
			Sequential items having this flag set and the same vertical coordinates are centered horizontally.
			Their horizontal coordinates are ignored.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IButton.NoBrackets">
            <summary>
            Tells to display the button without brackets.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IButton.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IButton.ShowAmpersand">
            <summary>
			Tells to show ampersand symbols in the text instead of using them as hotkey marks.
		</summary>
        </member>
        <member name="T:FarNet.Forms.ICheckBox">
            <summary>
            Check box control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddCheckBox(System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Forms.ICheckBox.ButtonClicked">
            <summary>
			Called on the button clicks and similar actions: [Enter] when focused or the hotkey at any time.
		</summary><remarks>
			NOTE: even if this is the default control (<see cref="P:FarNet.Forms.IDialog.Default"/>) or
			the cancel button (<see cref="P:FarNet.Forms.IDialog.Cancel"/>) the event is not triggered
			if the button is not explicitly clicked or a similar action is performed.
			Thus, [CtrlEnter] (accept the dialog) and [Esc] (cancel the dialog)
			do not trigger this event.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.ICheckBox.Selected">
            <summary>
            Selected state.
            Standard: 0: off; 1: on.
            ThreeState: 0: off; 1: on; 2: undefined.
            </summary>
        </member>
        <member name="P:FarNet.Forms.ICheckBox.ThreeState">
            <summary>
            Tells to use three possible states: "off", "on", "undefined".
            </summary>
        </member>
        <member name="P:FarNet.Forms.ICheckBox.CenterGroup">
            <summary>
			Tells that the control if one of the centered group.
		</summary><remarks>
			Sequential items having this flag set and the same vertical coordinates are centered horizontally.
			Their horizontal coordinates are ignored.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.ICheckBox.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="P:FarNet.Forms.ICheckBox.ShowAmpersand">
            <summary>
			Tells to show ampersand symbols in the text instead of using them as hotkey marks.
		</summary>
        </member>
        <member name="T:FarNet.Forms.IEdit">
            <summary>
            Edit control.
            It is created and added to a dialog by:
            <see cref="M:FarNet.Forms.IDialog.AddEdit(System.Int32,System.Int32,System.Int32,System.String)"/>, <see cref="M:FarNet.Forms.IDialog.AddEditFixed(System.Int32,System.Int32,System.Int32,System.String)"/>, <see cref="M:FarNet.Forms.IDialog.AddEditPassword(System.Int32,System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEdit.Fixed">
            <summary>
            Gets true if it is the fixed size edit control.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IEdit.IsPath">
            <summary>
            Tells that it is used for file system path input.
            </summary>
            <remarks>
            Setting this to true enables some extras, e.g. on typing: a dropdown list of matching available paths.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.IsPassword">
            <summary>
            Gets true if it is used for password input.
            </summary>
            <remarks>
            It is true if it is created by <see cref="M:FarNet.Forms.IDialog.AddEditPassword(System.Int32,System.Int32,System.Int32,System.String)"/>.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.History">
            <summary>
            Gets or sets the history name. It overrides <see cref="P:FarNet.Forms.IEdit.Mask"/> text if any.
            </summary>
            <remarks>
            Setting after opening is not yet implemented, this can be done when needed.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.Mask">
            <summary>
            Gets or sets the mask for fixed size mode. It overrides <see cref="P:FarNet.Forms.IEdit.History"/> text if any.
            </summary>
            <remarks>
            Setting after opening is not supported.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.Editor">
            <summary>
            Tells that this is a line of a multi-line group.
            </summary>
            <remarks>
            Sequential edit controls with this flag set are grouped into a simple editor with the ability to insert and delete lines.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.ManualAddHistory">
            <summary>
            Tells to not add items to the history automatically.
            </summary>
            <remarks>
            Specifies that items will be added to the history list of an edit box manually, not automatically.
            It should be used together with <see cref="P:FarNet.Forms.IEdit.History"/>.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IEdit.UseLastHistory">
            <summary>
			Tells to use the last history as the initial text if it is not set.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IEdit.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IEdit.NoAutoComplete">
            <summary>
            Tells to disable auto completion from history.
            </summary>
        </member>
        <member name="T:FarNet.Forms.IRadioButton">
            <summary>
            Radio button control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddRadioButton(System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IRadioButton.ButtonClicked">
            <summary>
			Called on the button clicks and similar actions: [Enter] when focused or the hotkey at any time.
		</summary><remarks>
			NOTE: even if this is the default control (<see cref="P:FarNet.Forms.IDialog.Default"/>) or
			the cancel button (<see cref="P:FarNet.Forms.IDialog.Cancel"/>) the event is not triggered
			if the button is not explicitly clicked or a similar action is performed.
			Thus, [CtrlEnter] (accept the dialog) and [Esc] (cancel the dialog)
			do not trigger this event.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.Selected">
            <summary>
            Selected state.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.Group">
            <summary>
            Tells to use this as the first radio button item in the following group.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.MoveSelect">
            <summary>
            Tells to change selection in the radio button group when focus is moved.
            </summary>
            <remarks>
            Radio buttons with this flag set are also drawn without parentheses around the selection mark
            (example: Far color selection dialog).
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.CenterGroup">
            <summary>
			Tells that the control if one of the centered group.
		</summary><remarks>
			Sequential items having this flag set and the same vertical coordinates are centered horizontally.
			Their horizontal coordinates are ignored.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IRadioButton.ShowAmpersand">
            <summary>
			Tells to show ampersand symbols in the text instead of using them as hotkey marks.
		</summary>
        </member>
        <member name="T:FarNet.Forms.IText">
            <summary>
            Static text label.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddText(System.Int32,System.Int32,System.Int32,System.String)"/>, <see cref="M:FarNet.Forms.IDialog.AddVerticalText(System.Int32,System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IText.BoxColor">
            <summary>
            Tells to use the same color as for the frame.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IText.CenterGroup">
            <summary>
			Tells that the control if one of the centered group.
		</summary><remarks>
			Sequential items having this flag set and the same vertical coordinates are centered horizontally.
			Their horizontal coordinates are ignored.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IText.Separator">
            <summary>
            Tells to draw a single-line (1) or double-line (2) separator including text if any.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IText.ShowAmpersand">
            <summary>
			Tells to show ampersand symbols in the text instead of using them as hotkey marks.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IText.Centered">
            <summary>
            Tells to center the text (horizontally or vertically).
            </summary>
        </member>
        <member name="P:FarNet.Forms.IText.Vertical">
            <summary>
            Gets true if the text is vertical.
            </summary>
            <remarks>
            Vertical text controls are added by <see cref="M:FarNet.Forms.IDialog.AddVerticalText(System.Int32,System.Int32,System.Int32,System.String)"/>.
            </remarks>
        </member>
        <member name="T:FarNet.Forms.IUserControl">
            <summary>
            User control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddUserControl(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            Use <see cref="E:FarNet.Forms.IControl.Drawing"/> event to draw this control by
            <see cref="M:FarNet.IUserInterface.DrawPalette(System.Int32,System.Int32,FarNet.PaletteColor,System.String)"/> or <see cref="M:FarNet.IUserInterface.DrawColor(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.String)"/>
            with <see cref="M:FarNet.IUserInterface.GetPaletteForeground(FarNet.PaletteColor)"/> and <see cref="M:FarNet.IUserInterface.GetPaletteBackground(FarNet.PaletteColor)"/>.
            Also usually you should at first calculate absolute coordinates using
            absolute dialog <see cref="P:FarNet.Forms.IDialog.Rect"/> and relative control <see cref="P:FarNet.Forms.IControl.Rect"/>.
            <para>
            User control can be used to emulate <c>MouseClicked</c> event for a dialog:
            add this control so that it covers all the dialog area and use its event handler.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IUserControl.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="T:FarNet.Forms.IBaseList">
            <summary>
            Base interface for <see cref="T:FarNet.Forms.IComboBox"/> and <see cref="T:FarNet.Forms.IListBox"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.IBaseList.Add(System.String)">
            <summary>
            Adds and returns a new item.
            </summary>
            <param name="text">Item text.</param>
            <remarks>
            This is the simplest way to setup items before opening a dialog.
            After opening it is better to create and add items directly to <see cref="P:FarNet.Forms.IBaseList.Items"/>.
            </remarks>
        </member>
        <member name="M:FarNet.Forms.IBaseList.AttachItems">
            <summary>
            Attaches previously detached items.
            </summary>
            <seealso cref="P:FarNet.Forms.IBaseList.Items"/>
        </member>
        <member name="M:FarNet.Forms.IBaseList.DetachItems">
            <summary>
            Detaches the items before large changes for better performance.
            You have to call <see cref="M:FarNet.Forms.IBaseList.AttachItems"/> when changes are done.
            <seealso cref="P:FarNet.Forms.IBaseList.Items"/>
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.Selected">
            <summary>
            Gets or sets the selected item index.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.AutoAssignHotkeys">
            <summary>
			Tells to assigns item hotkeys automatically starting with the first item.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.NoAmpersands">
            <summary>
            Tells to not show ampersand symbols and use them as hotkey marks.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.WrapCursor">
            <summary>
			Tells to use the wrap cursor mode.
		</summary><remarks>
			In the wrap cursor mode moving the cursor up from the first element or down from the last element
			moves the cursor to the bottom or the top.
		</remarks>
        </member>
        <member name="P:FarNet.Forms.IBaseList.NoFocus">
            <summary>
			Tells that the control cannot get focus. But it still processes other events.
		</summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.NoClose">
            <summary>
            Tells to not close the dialog on item selection.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.SelectLast">
            <summary>
            Tells to select the last item if <see cref="P:FarNet.Forms.IBaseList.Selected"/> is not set.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IBaseList.Items">
            <summary>
			List item collection. STOP: see remarks.
		</summary><remarks>
			Normally you fill the list with items and set their properties before opening a
			dialog. After opening this collection is mapped to a control dynamically, i.e.
			all operations (set, insert, remove and etc.) are displayed immediately. The
			items themselves are not mapped dynamically, so that if you change an item then
			you have to reset it explicitly, see the example.
			<para>
				Dynamic mapping is simple, useful and effective when you change (or add, remove)
				one item at a time (or just a few items). But if you actually recreate all the
				items then for better performance you have to use <see cref="M:FarNet.Forms.IBaseList.DetachItems"/>
				before changes and <see cref="M:FarNet.Forms.IBaseList.AttachItems"/> after changes.
			</para>
		</remarks><example>
			(PowerShell): how to set an item checked when the dialog is running
			<code>
				<![CDATA[
# get an item
$item = $listbox.Items[3]
# change it
$item.Checked = $true
# set it!
$listbox.Items[3] = $item
]]>
			</code>
		</example>
        </member>
        <member name="T:FarNet.Forms.IComboBox">
            <summary>
            Combo box control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddComboBox(System.Int32,System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IComboBox.DropDownList">
            <summary>
            Tells to show non-editable drop-down list instead of a common combo box.
            </summary>
        </member>
        <member name="T:FarNet.Forms.IListBox">
            <summary>
            List box control.
            It is created and added to a dialog by <see cref="M:FarNet.Forms.IDialog.AddListBox(System.Int32,System.Int32,System.Int32,System.Int32,System.String)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.IListBox.SetFrame(System.Int32,System.Int32)">
            <summary>
            Sets both cursor and top positions. It should be called when a dialog is shown.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IListBox.NoBox">
            <summary>
            Tells to not draw the box around the list.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IListBox.Title">
            <summary>
            Gets or sets the title line text.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IListBox.Bottom">
            <summary>
            Gets or sets the bottom line text.
            </summary>
        </member>
        <member name="T:FarNet.Forms.IDialog">
            <summary>
            Far dialog.
            It is created by <see cref="M:FarNet.IFar.CreateDialog(System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <remarks>
            After creation of a dialog by <see cref="M:FarNet.IFar.CreateDialog(System.Int32,System.Int32,System.Int32,System.Int32)"/> you have to:
            <ul>
            <li>set the dialog properties and add event handlers;</li>
            <li>create and add controls using <c>Add*</c> methods;</li>
            <li>set control properties and add event handlers;</li>
            <li>show the dialog.</li>
            </ul>
            <para>
            Event <see cref="E:FarNet.Forms.IDialog.Closing"/> can be used for input data validation without closing the dialog.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Forms.IDialog.Show">
            <summary>
            Shows the dialog.
            </summary>
            <returns>False if the user canceled the dialog or clicked the <see cref="P:FarNet.Forms.IDialog.Cancel"/> button.</returns>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddBox(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a double or single box control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
            <param name="text">Control text.</param>
            <remarks>
            If <c>right</c>\<c>bottom</c> is 0 then it is calculated.
            </remarks>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddButton(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddCheckBox(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a check box control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddComboBox(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a combo box control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddEdit(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a standard edit control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddEditFixed(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a fixed size edit control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddEditPassword(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a password edit control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddListBox(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a list box control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
            <param name="title">Title.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddRadioButton(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a radio button. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddText(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a text control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddVerticalText(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a vertical text control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="bottom">Bottom line.</param>
            <param name="text">Control text.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.AddUserControl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a user control. See <see cref="P:FarNet.Forms.IDialog.NoSmartCoordinates"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="M:FarNet.Forms.IDialog.SetFocus(System.Int32)">
            <summary>
            Sets focus to the specified control.
            </summary>
            <param name="id">Control ID (index).</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.Move(FarNet.Point,System.Boolean)">
            <summary>
            Moves the dialog window to a new position.
            </summary>
            <param name="point">Absolute point or relative shift.</param>
            <param name="absolute">true: point is absolute (use -1 to center the dialog); false: point is relative.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.Resize(FarNet.Point)">
            <summary>
            Resizes the dialog window.
            </summary>
            <param name="size">New size.</param>
        </member>
        <member name="M:FarNet.Forms.IDialog.DisableRedraw">
            <summary>
            Disables redrawing of the dialog.
            </summary>
            <remarks>
            This method is used to prevent excessive dialog redraws when modifying multiple dialog items.
            <para>
            It increments the internal redraw lock counter.
            WARNING: you must call <see cref="M:FarNet.Forms.IDialog.EnableRedraw"/> (normally when dialog changes are done).
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Forms.IDialog.EnableRedraw">
            <summary>
            Enables redrawing of the dialog.
            </summary>
            <remarks>
            It decrements the internal redraw lock counter; when it is equal to 0 the dialog gets drawn.
            WARNING: it must be called after any call of <see cref="M:FarNet.Forms.IDialog.DisableRedraw"/>.
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IDialog.Initialized">
            <summary>
            Called when all dialog items are initialized and about to be shown.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IDialog.Closing">
            <summary>
            Called when the dialog is about to be closed (normally a user closes it).
            </summary>
            <remarks>
            This event can be used for example for input data validation before the dialog is closed.
            If event argument <see cref="P:FarNet.Forms.AnyEventArgs.Control"/> is null then the dialog is about to
            be closed by [Esc] or [F10]; in this case normally you should not stop closing.
            Otherwise you may check validity of input data.
            If a user mistake is found you may show a message box (<see cref="M:FarNet.IFar.Message(System.String)"/>),
            set focus to the control with a mistake (<see cref="P:FarNet.Forms.IDialog.Focused"/>) and finally set
            event argument <see cref="P:FarNet.Forms.ClosingEventArgs.Ignore"/> to keep the dialog running,
            so that a user may correct the input or cancel the dialog.
            <para>
            It is not recommended to change control states during this event.
            Doing so may trigger actions that may be unexpected on closing.
            </para>
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IDialog.Idled">
            <summary>
            Called periodically when a user is idle.
            </summary>
            <seealso cref="T:FarNet.IdledHandler"/>
        </member>
        <member name="E:FarNet.Forms.IDialog.MouseClicked">
            <summary>
            Called on mouse clicks outside of the dialog and on not handled clicks on the controls.
            </summary>
            <remarks>
            Mouse coordinates are absolute screen coordinates.
            </remarks>
        </member>
        <member name="E:FarNet.Forms.IDialog.KeyPressed">
            <summary>
            Called when a key is pressed in the dialog and the active control does not handle the key.
            </summary>
        </member>
        <member name="E:FarNet.Forms.IDialog.ConsoleSizeChanged">
            <summary>
            Called when the console window size has changed, e.g. on [AltF9].
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.Focused">
            <summary>
            Gets or sets the control which has focus.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.Selected">
            <summary>
            Gets the selected dialog control.
            </summary>
            <remarks>
            Normally it is a closing button or the <see cref="P:FarNet.Forms.IDialog.Default"/> control.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.IsWarning">
            <summary>
            Tells to use "Warning" dialog color scheme.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.IsSmall">
            <summary>
            Tells to create the dialog with reduced border size.
            </summary>
            <remarks>
            In "small" dialogs there is no space between the border and the double box.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.KeepWindowTitle">
            <summary>
            Tells to keep the window title instead of setting it to the first control text.
            </summary>
            <remarks>
            Text of the first control added to the dialog is normally used as the main window title.
            Set this flag to true in order to keep the window title intact.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.NoShadow">
            <summary>
            Tells to create the dialog with no shadow.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.NoPanel">
            <summary>
            Tells to create the dialog with no panel shown.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.NoSmartCoordinates">
            <summary>
            Tells to disable use of smart coordinates.
            </summary>
            <remarks>
            Smart coordinates mode: not positive <c>Top</c> is subtracted from the previous control <c>Top</c>:
            i.e. 0: the same line, -1: next line and so on; <c>Bottom</c> value, if any, should be relative to 0.
            Example: last <c>Top</c> is 5, then <c>AddBox(*, -1, *, 2, *)</c> is recalculated as <c>AddBox(*, 6, *, 8, *)</c>.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.HelpTopic">
            <summary>
			Help topic. Use <see cref="M:FarNet.IFar.GetHelpTopic(System.String)"/>. (Format details: <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/>)
		</summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.Rect">
            <summary>
            Gets or sets the dialog window rectangular.
            </summary>
        </member>
        <member name="P:FarNet.Forms.IDialog.TypeId">
            <summary>
            Gets or sets the dialog type ID.
            </summary>
            <remarks>
            It is normally set by the dialog creator.
            It cannot be changed for running dialogs.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.Cancel">
            <summary>
            Gets or sets the "Cancel" button.
            </summary>
            <remarks>
            If this button is clicked then <see cref="M:FarNet.Forms.IDialog.Show"/> returns false.
            NOTE: the opposite is not always true, see <see cref="E:FarNet.Forms.IButton.ButtonClicked"/> remarks.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.Default">
            <summary>
            Gets or sets the default control: it gets selected on [Enter] if the focus is not on a button.
            </summary>
            <remarks>
            NOTE: "selected" and "clicked" are different events, see <see cref="E:FarNet.Forms.IButton.ButtonClicked"/> remarks.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.Item(System.Int32)">
            <summary>
            Gets a control by its ID.
            </summary>
            <param name="id">Control ID.</param>
            <returns>Requested control or null if ID is not valid.</returns>
            <remarks>
            Control IDs are indexes in the dialog control collection.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.Controls">
            <summary>
            Gets the dialog control collection.
            </summary>
            <remarks>
            It should be used only when control indexes are not known or not used.
            Otherwise <see cref="P:FarNet.Forms.IDialog.Item(System.Int32)"/> should be used.
            </remarks>
        </member>
        <member name="P:FarNet.Forms.IDialog.Data">
            <summary>
			Gets the user data key/value table.
		</summary><remarks>
			Any user data can be attached by one or more external tools.
			Keys should be chosen carefully in order to avoid conflicts.
			When in doubts generate and use <c>Guid</c> based keys.
		</remarks>
        </member>
        <member name="T:FarNet.Forms.AnyEventArgs">
            <summary>
            Base class of dialog and control event arguments.
            </summary>
        </member>
        <member name="M:FarNet.Forms.AnyEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="control">Control involved into this event or null.</param>
        </member>
        <member name="P:FarNet.Forms.AnyEventArgs.Control">
            <summary>
            Event's control or null. See the constructor for details.
            </summary>
        </member>
        <member name="T:FarNet.Forms.InitializedEventArgs">
            <summary>
            <see cref="E:FarNet.Forms.IDialog.Initialized"/> event arguments.
            </summary>
        </member>
        <member name="M:FarNet.Forms.InitializedEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="focused">Control that will initially receive focus.</param>
        </member>
        <member name="P:FarNet.Forms.InitializedEventArgs.Ignore">
            <summary>
            Ingore changes.
            </summary>
        </member>
        <member name="T:FarNet.Forms.ClosingEventArgs">
            <summary>
            <see cref="E:FarNet.Forms.IDialog.Closing"/> event arguments.
            </summary>
        </member>
        <member name="M:FarNet.Forms.ClosingEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="selected">Control that had the keyboard focus when [CtrlEnter] was pressed or the default control.</param>
        </member>
        <member name="P:FarNet.Forms.ClosingEventArgs.Ignore">
            <summary>
            Ingore and don't close the dialog.
            </summary>
        </member>
        <member name="T:FarNet.Forms.DrawingEventArgs">
            <summary>
            <see cref="E:FarNet.Forms.IControl.Drawing"/> event arguments.
            </summary>
        </member>
        <member name="M:FarNet.Forms.DrawingEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="control">Control that is about to be drawn.</param>
        </member>
        <member name="P:FarNet.Forms.DrawingEventArgs.Ignore">
            <summary>
            Ingore and don't draw the control.
            </summary>
        </member>
        <member name="T:FarNet.Forms.ColoringEventArgs">
            <summary>
            <see cref="E:FarNet.Forms.IControl.Coloring"/> event arguments.
            </summary>
            <remarks>
            Event handlers change the default colors provided by the event arguments.
            There are up to 4 color pairs (foreground and background).
            <para>
            <see cref="T:FarNet.Forms.IBox"/>: 1: Title; 2: HiText; 3: Frame.
            </para>
            <para>
            <see cref="T:FarNet.Forms.IText"/>:
            Normal text: 1: Title; 2: HiText; 3: Frame.
            Vertical text: 1: Title.
            The box color applies only to text items with the <see cref="P:FarNet.Forms.IText.Separator"/> flag set.
            </para>
            <para>
            <see cref="T:FarNet.Forms.IEdit"/>, <see cref="T:FarNet.Forms.IComboBox"/>: 1: EditLine; 2: Selected Text; 3: Unchanged Color; 4: History and ComboBox pointer.
            </para>
            <para>
            <see cref="T:FarNet.Forms.IButton"/>, <see cref="T:FarNet.Forms.ICheckBox"/>, <see cref="T:FarNet.Forms.IRadioButton"/>: 1: Title; 2: HiText.
            </para>
            <para>
            <see cref="T:FarNet.Forms.IListBox"/> recieves another event which is not yet exposed by FarNet.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Forms.ColoringEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="control">Control to set colors for.</param>
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Foreground1">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Background1">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Foreground2">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Background2">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Foreground3">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Background3">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Foreground4">
            
        </member>
        <member name="P:FarNet.Forms.ColoringEventArgs.Background4">
            
        </member>
        <member name="T:FarNet.Forms.LosingFocusEventArgs">
            <summary>
            <see cref="E:FarNet.Forms.IControl.LosingFocus"/> event arguments.
            </summary>
        </member>
        <member name="M:FarNet.Forms.LosingFocusEventArgs.#ctor(FarNet.Forms.IControl)">
            <param name="losing">Control losing focus.</param>
        </member>
        <member name="P:FarNet.Forms.LosingFocusEventArgs.Focused">
            <summary>
            Control you want to pass focus to or leave it null to allow losing focus.
            </summary>
        </member>
        <member name="T:FarNet.Forms.ButtonClickedEventArgs">
            <summary>
            <c>ButtonClicked</c> event arguments for <see cref="T:FarNet.Forms.IButton"/>, <see cref="T:FarNet.Forms.ICheckBox"/>, <see cref="T:FarNet.Forms.IRadioButton"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.ButtonClickedEventArgs.#ctor(FarNet.Forms.IControl,System.Int32)">
            <param name="button">Button clicked.</param>
            <param name="selected">Selected state.</param>
        </member>
        <member name="P:FarNet.Forms.ButtonClickedEventArgs.Selected">
            <summary>
            Selected state:
            <see cref="T:FarNet.Forms.IButton"/>: 0;
            <see cref="T:FarNet.Forms.ICheckBox"/>: 0 (unchecked), 1 (checked) and 2 (undefined for ThreeState);
            <see cref="T:FarNet.Forms.IRadioButton"/>: 0 - for the previous element in the group, 1 - for the active element in the group.
            </summary>
        </member>
        <member name="P:FarNet.Forms.ButtonClickedEventArgs.Ignore">
            <summary>
            The message has been handled and it should not be processed by the kernel.
            </summary>
        </member>
        <member name="T:FarNet.Forms.TextChangedEventArgs">
            <summary>
            <c>TextChanged</c> event arguments for <see cref="T:FarNet.Forms.IEdit"/>, <see cref="T:FarNet.Forms.IComboBox"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.TextChangedEventArgs.#ctor(FarNet.Forms.IControl,System.String)">
            <param name="edit">Edit control.</param>
            <param name="text">New text.</param>
        </member>
        <member name="P:FarNet.Forms.TextChangedEventArgs.Text">
            <summary>
            New text.
            </summary>
        </member>
        <member name="P:FarNet.Forms.TextChangedEventArgs.Ignore">
            <summary>
            Ignore changes.
            </summary>
        </member>
        <member name="T:FarNet.Forms.KeyPressedEventArgs">
            <summary>
            <c>KeyPressed</c> event arguments for <see cref="T:FarNet.Forms.IDialog"/> and <see cref="T:FarNet.Forms.IControl"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.KeyPressedEventArgs.#ctor(FarNet.Forms.IControl,FarNet.KeyInfo)">
            <param name="control">Current control.</param>
            <param name="key">The key.</param>
        </member>
        <member name="P:FarNet.Forms.KeyPressedEventArgs.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:FarNet.Forms.KeyPressedEventArgs.Ignore">
            <summary>
            Ignore further processing.
            </summary>
        </member>
        <member name="T:FarNet.Forms.MouseClickedEventArgs">
            <summary>
            <c>MouseClicked</c> event arguments for <see cref="T:FarNet.Forms.IDialog"/> and <see cref="T:FarNet.Forms.IControl"/>.
            </summary>
        </member>
        <member name="M:FarNet.Forms.MouseClickedEventArgs.#ctor(FarNet.Forms.IControl,FarNet.MouseInfo)">
            <param name="control">Current control.</param>
            <param name="mouse">Mouse info.</param>
        </member>
        <member name="P:FarNet.Forms.MouseClickedEventArgs.Mouse">
            <summary>
            Mouse info.
            </summary>
        </member>
        <member name="P:FarNet.Forms.MouseClickedEventArgs.Ignore">
            <summary>
            Ignore further processing.
            </summary>
        </member>
        <member name="T:FarNet.Forms.SizeEventArgs">
            <summary>
            Size event arguments, e.g. of <see cref="E:FarNet.Forms.IDialog.ConsoleSizeChanged"/> event.
            </summary>
        </member>
        <member name="M:FarNet.Forms.SizeEventArgs.#ctor(FarNet.Forms.IControl,FarNet.Point)">
            <param name="control">It is null.</param>
            <param name="size">The size.</param>
        </member>
        <member name="P:FarNet.Forms.SizeEventArgs.Size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="T:FarNet.Point">
            <summary>
            Ordered pair of integer X and Y coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:FarNet.Point.#ctor(System.Int32)">
            <summary>
            Initializes a point with the same x and y.
            </summary>
        </member>
        <member name="M:FarNet.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance with the specified coordinates.
            </summary>
            <param name="column">The horizontal position of the point.</param>
            <param name="row">The vertical position of the point.</param>
        </member>
        <member name="M:FarNet.Point.op_Equality(FarNet.Point,FarNet.Point)">
            
        </member>
        <member name="M:FarNet.Point.op_Inequality(FarNet.Point,FarNet.Point)">
            
        </member>
        <member name="M:FarNet.Point.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.Point.GetHashCode">
            
        </member>
        <member name="M:FarNet.Point.ToString">
            
        </member>
        <member name="P:FarNet.Point.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
        </member>
        <member name="P:FarNet.Point.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
        </member>
        <member name="T:FarNet.Place">
            <summary>
            Ordered pair of two points defining a rectangle or a stream region.
            </summary>
        </member>
        <member name="M:FarNet.Place.#ctor(System.Int32)">
            <param name="value">Value used for all coordinates.</param>
        </member>
        <member name="M:FarNet.Place.#ctor(FarNet.Point,FarNet.Point)">
            <param name="first">First point.</param>
            <param name="last">Last Point.</param>
        </member>
        <member name="M:FarNet.Place.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
        </member>
        <member name="M:FarNet.Place.op_Equality(FarNet.Place,FarNet.Place)">
            
        </member>
        <member name="M:FarNet.Place.op_Inequality(FarNet.Place,FarNet.Place)">
            
        </member>
        <member name="M:FarNet.Place.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.Place.GetHashCode">
            
        </member>
        <member name="M:FarNet.Place.ToString">
            
        </member>
        <member name="M:FarNet.Place.RectContains(FarNet.Point)">
            <summary>
            Returns true if the rectangular contains the point.
            </summary>
        </member>
        <member name="P:FarNet.Place.First">
            <summary>
            First point.
            </summary>
        </member>
        <member name="P:FarNet.Place.Last">
            <summary>
            Last point.
            </summary>
        </member>
        <member name="P:FarNet.Place.Size">
            <summary>
            Size as (<c>Width</c>, <c>Height</c>) pair.
            </summary>
        </member>
        <member name="P:FarNet.Place.Top">
            <summary>
            Top line.
            </summary>
        </member>
        <member name="P:FarNet.Place.Left">
            <summary>
            Left position.
            </summary>
        </member>
        <member name="P:FarNet.Place.Bottom">
            <summary>
            Bottom line.
            </summary>
        </member>
        <member name="P:FarNet.Place.Right">
            <summary>
            Right position.
            </summary>
        </member>
        <member name="P:FarNet.Place.Width">
            <summary>
            Horizontal size.
            </summary>
        </member>
        <member name="P:FarNet.Place.Height">
            <summary>
            Vertical size.
            </summary>
        </member>
        <member name="T:FarNet.PlaceKind">
            <summary>
            Kinds of screen or text places.
            </summary>
            <remarks>
            A place is completely defined by its kind and coordinates (<see cref="T:FarNet.Place"/>).
            </remarks>
        </member>
        <member name="F:FarNet.PlaceKind.None">
            
        </member>
        <member name="F:FarNet.PlaceKind.Stream">
            <summary>
            Continuous stream place. Example: classic editor selection.
            </summary>
        </member>
        <member name="F:FarNet.PlaceKind.Column">
            <summary>
            Rectangular place, block of columns. Example: column editor selection.
            </summary>
        </member>
        <member name="T:FarNet.Span">
            <summary>
            Line or column span, for example span of selected text in an editor line.
            </summary>
        </member>
        <member name="M:FarNet.Span.op_Equality(FarNet.Span,FarNet.Span)">
            
        </member>
        <member name="M:FarNet.Span.op_Inequality(FarNet.Span,FarNet.Span)">
            
        </member>
        <member name="M:FarNet.Span.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.Span.GetHashCode">
            
        </member>
        <member name="M:FarNet.Span.ToString">
            
        </member>
        <member name="P:FarNet.Span.Start">
            <summary>
            Start position, included into the span.
            </summary>
        </member>
        <member name="P:FarNet.Span.End">
            <summary>
            End position, excluded from the span.
            </summary>
        </member>
        <member name="P:FarNet.Span.Length">
            <summary>
            Gets length of the span or a negative value if the span does not exist.
            </summary>
        </member>
        <member name="T:FarNet.IHistory">
            <summary>
            History operator.
            </summary>
        </member>
        <member name="M:FarNet.IHistory.Command">
            <summary>
            Returns command history.
            </summary>
        </member>
        <member name="M:FarNet.IHistory.Dialog(System.String)">
            <summary>
            Returns dialog history.
            </summary>
        </member>
        <member name="M:FarNet.IHistory.Editor">
            <summary>
            Returns editor history.
            </summary>
        </member>
        <member name="M:FarNet.IHistory.Folder">
            <summary>
            Returns folder history.
            </summary>
        </member>
        <member name="M:FarNet.IHistory.Viewer">
            <summary>
            Returns viewer history.
            </summary>
        </member>
        <member name="T:FarNet.HistoryInfo">
            <summary>
            History information.
            </summary>
        </member>
        <member name="M:FarNet.HistoryInfo.#ctor(System.String,System.DateTime,System.Boolean)">
            
        </member>
        <member name="P:FarNet.HistoryInfo.Name">
            <summary>
            History information, text.
            </summary>
        </member>
        <member name="P:FarNet.HistoryInfo.Time">
            <summary>
            Last time.
            </summary>
        </member>
        <member name="P:FarNet.HistoryInfo.IsLocked">
            <summary>
            Locked state.
            </summary>
        </member>
        <member name="T:FarNet.IInputBox">
            <summary>
            Input box. It is created by <see cref="M:FarNet.IFar.CreateInputBox"/>.
            </summary>
        </member>
        <member name="M:FarNet.IInputBox.Show">
            <summary>
            Shows the input box and waits until user press OK or Cancel.
            </summary>
            <returns>True if OK is pressed.</returns>
        </member>
        <member name="P:FarNet.IInputBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.Title">
            <summary>
            Gets or sets the box title.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.Prompt">
            <summary>
            Gets or sets the prompt text.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.History">
            <summary>
            Gets or sets the history name.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.MaxLength">
            <summary>
            Gets or sets the max text length.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.EmptyEnabled">
            <summary>
            Tells to enable empty input permission.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.IsPath">
            <summary>
            Tells that it is used for file system path input.
            </summary>
            <remarks>
            Setting this to true enables some extras, e.g. on typing: a dropdown list of matching available paths.
            </remarks>
        </member>
        <member name="P:FarNet.IInputBox.IsPassword">
            <summary>
            Tells that it is used for password input.
            </summary>
            <remarks>
            If it is true then asterisks are displaied instead of input characters.
            </remarks>
        </member>
        <member name="P:FarNet.IInputBox.ExpandEnvironmentVariables">
            <summary>
			Tells to expand environment variables in the input text.
		</summary>
        </member>
        <member name="P:FarNet.IInputBox.UseLastHistory">
            <summary>
			Tells to use the last history as the initial text if it is not set.
		</summary>
        </member>
        <member name="P:FarNet.IInputBox.ButtonsAreVisible">
            <summary>
            Tells that buttons are visible.
            </summary>
        </member>
        <member name="P:FarNet.IInputBox.HelpTopic">
            <summary>
            Gets or sets the help topic; the only supported format is "&lt;FullPath\&gt;Topic", see <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/>.
            </summary>
        </member>
        <member name="T:FarNet.Log">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.Log.FormatException(System.Exception)">
            
        </member>
        <member name="M:FarNet.Log.TraceError(System.String)">
            
        </member>
        <member name="M:FarNet.Log.TraceException(System.Exception)">
            
        </member>
        <member name="P:FarNet.Log.Source">
            
        </member>
        <member name="T:FarNet.MenuEventArgs">
            <summary>
            Arguments of a menu key handler.
            By default the key closes the menu and it is stored in <see cref="P:FarNet.IAnyMenu.Key"/>.
            Use <see cref="P:FarNet.MenuEventArgs.Ignore"/> or <see cref="P:FarNet.MenuEventArgs.Restart"/> to perform different actions.
            </summary>
        </member>
        <member name="M:FarNet.MenuEventArgs.#ctor(FarNet.FarItem)">
            <param name="item">Current item.</param>
        </member>
        <member name="P:FarNet.MenuEventArgs.Item">
            <summary>
            Current item.
            </summary>
        </member>
        <member name="P:FarNet.MenuEventArgs.Ignore">
            <summary>
            Tells to do nothing, a handler has processed everything.
            </summary>
        </member>
        <member name="P:FarNet.MenuEventArgs.Restart">
            <summary>
            Tells to restart the menu, normally when items or properties are changed.
            In some cases you may want to set proper <see cref="P:FarNet.IAnyMenu.Selected"/> or -1
            (e.g. you recreated all items and want the first or the last to be current after that).
            </summary>
        </member>
        <member name="T:FarNet.FarItem">
            <summary>
            Item of a menu, a list menu or one of list dialog controls.
            </summary>
            <seealso cref="T:FarNet.IMenu"/>
            <seealso cref="T:FarNet.IListMenu"/>
            <seealso cref="T:FarNet.Forms.IListBox"/>
            <seealso cref="T:FarNet.Forms.IComboBox"/>
        </member>
        <member name="P:FarNet.FarItem.Text">
            <summary>
            Item text.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Checked">
            <summary>
            Item is checked.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Disabled">
            <summary>
            Item is disabled. It cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Grayed">
            <summary>
            Item is shown, but cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Hidden">
            <summary>
            Item is hidden. It cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.IsSeparator">
            <summary>
            Item is a separator. <see cref="P:FarNet.FarItem.Text"/>, if any, is shown center aligned.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Data">
            <summary>
            Any user data attached to the item.
            </summary>
        </member>
        <member name="P:FarNet.FarItem.Click">
            <summary>
            Called when a menu item is selected.
            </summary>
        </member>
        <member name="T:FarNet.SetItem">
            <summary>
            Item of a menu, a list menu or one of list dialog controls.
            </summary>
            <seealso cref="T:FarNet.IMenu"/>
            <seealso cref="T:FarNet.IListMenu"/>
            <seealso cref="T:FarNet.Forms.IListBox"/>
            <seealso cref="T:FarNet.Forms.IComboBox"/>
        </member>
        <member name="P:FarNet.SetItem.Text">
            <summary>
            Item text.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Checked">
            <summary>
            Item is checked.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Disabled">
            <summary>
            Item is disabled. It cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Grayed">
            <summary>
            Item is shown, but cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Hidden">
            <summary>
            Item is hidden. It cannot be selected.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.IsSeparator">
            <summary>
            Item is a separator. <see cref="P:FarNet.SetItem.Text"/>, if any, is shown center aligned.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Data">
            <summary>
            Any user data attached to the item.
            </summary>
        </member>
        <member name="P:FarNet.SetItem.Click">
            <summary>
            Called when a menu item is clicked.
            </summary>
        </member>
        <member name="T:FarNet.IAnyMenu">
            <summary>
            Menu base interface.
            Contains common settings and item collection.
            </summary>
        </member>
        <member name="M:FarNet.IAnyMenu.Show">
            <summary>
            Shows the menu.
            </summary>
            <returns>
            True if any menu item is selected, false otherwise including the case of a break key hit in an empty menu.
            </returns>
            <remarks>
            If a menu item is selected and there is no break key hit then its <see cref="P:FarNet.FarItem.Click"/> is called.
            Break key cases should be processed by a caller.
            <para>
            Index of the selected item is kept in <see cref="P:FarNet.IAnyMenu.Selected"/>. It is reused if the menu is shown again:
            this is normally useful; if it is not then this value should be reset by a caller.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IAnyMenu.Add(System.String)">
            <summary>
            Adds a new item to <see cref="P:FarNet.IAnyMenu.Items"/> and returns it.
            </summary>
            <param name="text">Item text.</param>
            <returns>New menu item. You may set more properties.</returns>
        </member>
        <member name="M:FarNet.IAnyMenu.Add(System.String,System.EventHandler{FarNet.MenuEventArgs})">
            <summary>
            Adds a new item to <see cref="P:FarNet.IAnyMenu.Items"/> and returns it.
            </summary>
            <param name="text">Item text.</param>
            <param name="click">Handler to be called on <see cref="P:FarNet.FarItem.Click"/>.</param>
            <returns>New menu item. You may set more properties.</returns>
        </member>
        <member name="M:FarNet.IAnyMenu.AddKey(System.Int32)">
            <summary>
            Adds a key code that closes the menu.
            </summary>
            <param name="virtualKeyCode">Key code, for example <see cref="T:FarNet.KeyCode"/>.</param>
        </member>
        <member name="M:FarNet.IAnyMenu.AddKey(System.Int32,FarNet.ControlKeyStates)">
            <summary>
            Adds a key code that closes the menu.
            </summary>
            <param name="virtualKeyCode">Key code, for example <see cref="T:FarNet.KeyCode"/>.</param>
            <param name="controlKeyState">Key states.</param>
        </member>
        <member name="M:FarNet.IAnyMenu.AddKey(System.Int32,FarNet.ControlKeyStates,System.EventHandler{FarNet.MenuEventArgs})">
            <summary>
            Adds a key code that closes the menu and invokes a handler.
            </summary>
            <param name="virtualKeyCode">Key code, for example <see cref="T:FarNet.KeyCode"/>.</param>
            <param name="controlKeyState">Key states.</param>
            <param name="handler">Key handler triggered on the key pressed.</param>
        </member>
        <member name="P:FarNet.IAnyMenu.X">
            <summary>
            Gets or sets the X-position. Default: -1 (to be calculated).
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Y">
            <summary>
            Gets or sets the Y-position. Default: -1 (to be calculated).
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.MaxHeight">
            <summary>
            Gets or sets the max height (max number of visible items).
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Title">
            <summary>
            Gets or sets the title line text.
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Bottom">
            <summary>
            Gets or sets the bottom line text.
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Items">
            <summary>
            Gets the menu item list.
            </summary>
            <remarks>
            You should add your items to this list.
            </remarks>
        </member>
        <member name="P:FarNet.IAnyMenu.Selected">
            <summary>
            Gets or sets the selected item index.
            </summary>
            <remarks>
            Before and after <see cref="M:FarNet.IAnyMenu.Show"/>:
            before: selects the item by this index;
            after: gets the selected item index or -1 on cancel.
            </remarks>
        </member>
        <member name="P:FarNet.IAnyMenu.SelectedData">
            <summary>
            Gets user data attached to the <see cref="P:FarNet.IAnyMenu.Selected"/> item or null on cancel.
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.HelpTopic">
            <summary>
			Help topic. Use <see cref="M:FarNet.IFar.GetHelpTopic(System.String)"/>. (Format details: <see cref="M:FarNet.IFar.ShowHelp(System.String,System.String,FarNet.HelpOptions)"/>)
		</summary>
        </member>
        <member name="P:FarNet.IAnyMenu.SelectLast">
            <summary>
            Tells to select the last item on <see cref="M:FarNet.IAnyMenu.Show"/> if <see cref="P:FarNet.IAnyMenu.Selected"/> is not set.
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Sender">
            <summary>
            Gets or sets a sender to be passed in <see cref="P:FarNet.FarItem.Click"/> event handlers.
            </summary>
            <remarks>
            By default <see cref="T:FarNet.FarItem"/> is a sender. You can provide another sender passed in.
            </remarks>
        </member>
        <member name="P:FarNet.IAnyMenu.ShowAmpersands">
            <summary>
            Tells to show ampersands in items instead of using them as hotkey marks.
            </summary>
        </member>
        <member name="P:FarNet.IAnyMenu.WrapCursor">
            <summary>
			Tells to use the wrap cursor mode.
		</summary><remarks>
			In the wrap cursor mode moving the cursor up from the first element or down from the last element
			moves the cursor to the bottom or the top.
		</remarks>
        </member>
        <member name="P:FarNet.IAnyMenu.AutoAssignHotkeys">
            <summary>
			Tells to assigns item hotkeys automatically starting with the first item.
		</summary>
        </member>
        <member name="P:FarNet.IAnyMenu.Key">
            <summary>
            Gets a key that has closed the menu or an empty key.
            </summary>
            <remarks>
            Keys that close the menu are added before showing the menu.
            </remarks>
        </member>
        <member name="T:FarNet.IMenu">
            <summary>
            Standard Far menu.
            It is created by <see cref="M:FarNet.IFar.CreateMenu"/>.
            </summary>
        </member>
        <member name="M:FarNet.IMenu.Lock">
            <summary>
            Creates low level internal data of the menu from the current items.
            Normally you have to call <see cref="M:FarNet.IMenu.Unlock"/> after use.
            </summary>
            <remarks>
            Used for better performance when you call <see cref="M:FarNet.IAnyMenu.Show"/> repeatedly
            with an item set that never changes (e.g. a module menu with fixed command set:
            it can be created once on <see cref="M:FarNet.ModuleHost.Connect"/> and locked forever -
            in this particular case you don't even have to call <see cref="M:FarNet.IMenu.Unlock"/>).
            <para>
            Don't change the menu or item set before <see cref="M:FarNet.IMenu.Unlock"/>.
            You still can change item properties except <see cref="P:FarNet.FarItem.Text"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IMenu.Unlock">
            <summary>
            Destroys internal data created by <see cref="M:FarNet.IMenu.Lock"/>.
            Menu and items can be changed again if the menu is still in use.
            </summary>
        </member>
        <member name="P:FarNet.IMenu.ReverseAutoAssign">
            <summary>
            Tells to assign hotkeys automatically from bottom.
            </summary>
        </member>
        <member name="P:FarNet.IMenu.ChangeConsoleTitle">
            <summary>
            Tells to set the console title to the menu title.
            </summary>
        </member>
        <member name="T:FarNet.PatternOptions">
            <summary>
            Filter pattern options.
            All combinations are allowed though normally you have to set one and only of
            <see cref="F:FarNet.PatternOptions.Regex"/>, <see cref="F:FarNet.PatternOptions.Prefix"/> or <see cref="F:FarNet.PatternOptions.Substring"/>.
            </summary>
        </member>
        <member name="F:FarNet.PatternOptions.None">
            <summary>
            None. Usually it means that filter is not enabled.
            </summary>
        </member>
        <member name="F:FarNet.PatternOptions.Regex">
            <summary>
            Regular expression with forms: <c>standard</c> | <c>?prefix</c> | <c>*substring</c>.
            In prefix and substring forms * and ? are wildcards if <see cref="F:FarNet.PatternOptions.Literal"/> is not set,
            otherwise prefix and substring are exact string parts.
            </summary>
        </member>
        <member name="F:FarNet.PatternOptions.Prefix">
            <summary>
            Prefix pattern, * and ? are wildcards if <see cref="F:FarNet.PatternOptions.Literal"/> is not set.
            </summary>
        </member>
        <member name="F:FarNet.PatternOptions.Substring">
            <summary>
            Substring pattern, * and ? are wildcards if <see cref="F:FarNet.PatternOptions.Literal"/> is not set.
            </summary>
        </member>
        <member name="F:FarNet.PatternOptions.Literal">
            <summary>
            All filter symbols including * and ? are literal.
            Should be used with one of <see cref="F:FarNet.PatternOptions.Regex"/>, <see cref="F:FarNet.PatternOptions.Prefix"/> or <see cref="F:FarNet.PatternOptions.Substring"/>.
            </summary>
        </member>
        <member name="T:FarNet.IListMenu">
            <summary>
            Menu implemented as a dialog with a list box.
            It is created by <see cref="M:FarNet.IFar.CreateListMenu"/>.
            </summary>
            <remarks>
            This kind of a menu is more suitable for a list of objects than a set of commands.
            It provides incremental filtering with various options.
            <para>
            Keys:<br/>
            [CtrlC], [CtrlIns] - copy text of the current item to the clipboard.<br/>
            [CtrlDown] - this is a default key to open a permanent filter input box.<br/>
            [Backspace] - remove the last symbol from the incremental filter string (until the initial part is reached, if any).<br/>
            [ShiftBackspace] - remove the incremental filter string completely, even initial part (rarely needed, but there are some cases).<br/>
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IListMenu.IncrementalOptions">
            <summary>
            Gets or sets the incremental filter and related options.
            </summary>
            <remarks>
            Incremental filter mode disables hotkey highlighting and all related options.
            </remarks>
        </member>
        <member name="P:FarNet.IListMenu.Incremental">
            <summary>
            Gets or sets the predefined incremental filter pattern used to continue typing.
            </summary>
            <remarks>
            It is not used to filter the initial list, initial list contains all items.
            <para>
            It does not enable filter itself, you have to set <see cref="P:FarNet.IListMenu.IncrementalOptions"/>.
            </para>
            <para>
            In 'prefix' mode it is sometimes iseful to add '*' to the end of the initial pattern,
            as if it is already typed to filter with wildcard (it can be 'undone' by backspace).
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IListMenu.AutoSelect">
            <summary>
            Tells to select a single item or nothing automatically on less than two items.
            </summary>
        </member>
        <member name="P:FarNet.IListMenu.NoInfo">
            <summary>
            Tells to not show item count information at the bottom line.
            </summary>
        </member>
        <member name="P:FarNet.IListMenu.NoShadow">
            <summary>
            Tells to not show the dialog shadow.
            </summary>
        </member>
        <member name="P:FarNet.IListMenu.ScreenMargin">
            <summary>
            Gets or sets the screen margin size.
            </summary>
        </member>
        <member name="P:FarNet.IListMenu.UsualMargins">
            <summary>
            Tells to use usual Far menu margins.
            </summary>
        </member>
        <member name="T:FarNet.MessageOptions">
            <summary>
            Message box options.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Warning">
            <summary>
            Warning message colors are used (white text on red background by default).
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Error">
            <summary>
            If error type returned by <c>GetLastError</c> is known to Far or Windows,
            the error description is shown in the first message line and
            the text is shown below the error description.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.KeepBackground">
            <summary>
            Do not redraw the message background.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.LeftAligned">
            <summary>
            Left align the message lines.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Z1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Ok">
            <summary>
            Additional button: Ok.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.OkCancel">
            <summary>
            Additional buttons: Ok and Cancel.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.AbortRetryIgnore">
            <summary>
            Additional buttons: Abort, Retry and Ignore.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.YesNo">
            <summary>
            Additional buttons: Yes and No.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.YesNoCancel">
            <summary>
            Additional buttons: Yes, No and Cancel.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.RetryCancel">
            <summary>
            Additional buttons: Retry and Cancel.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Gui">
            <summary>
            For internal use (normally). GUI message.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.GuiOnMacro">
            <summary>
            For internal use (normally). GUI message on a macro in progress.
            </summary>
        </member>
        <member name="F:FarNet.MessageOptions.Draw">
            <summary>
            Tells to draw the message box with no buttons and continue.
            </summary>
        </member>
        <member name="T:FarNet.BaseModuleItem">
            <summary>
            Modules implement at least one public not abstract descendant of this class.
            </summary>
            <remarks>
            Any FarNet module implements at least one public not abstract descendant of this class.
            <para>
            Normally modules implement one or more actions, descendants of the <see cref="T:FarNet.ModuleAction"/> class.
            When such a module is just installed or updated FarNet loads it and caches module action attributes.
            Next time when FarNet starts it does not load the module, it reads the information from the cache.
            This information is enough to show module menu items, register command prefixes, and etc.
            The module is actually loaded only when a user invokes one of the actions.
            </para>
            <para>
            FarNet creates action class instances and calls <c>Invoke()</c> methods every time when a user invokes actions.
            Thus, only their static data can be shared between calls.
            These data can be initialized when the <c>Invoke()</c> or the default constructor is called the first time.
            If these or other data has to be initialized even before actions then the module host should be used.
            </para>
            The module host, descendant of the <see cref="T:FarNet.ModuleHost"/>, can be implemented for advanced scenarios.
            Unlike module actions the host class instance is created, connected and disconnected once.
            The moment of creation and call of the <see cref="M:FarNet.ModuleHost.Connect"/> method depends on the <see cref="P:FarNet.ModuleHostAttribute.Load"/> flag.
            If it is false (default) then the host is loaded and connected only when one of the module actions is invoked.
            If it is true (preloaded host) then the module is loaded and the host is connected every time.
            Preloaded hosts should not be used without good reasons.
            </remarks>
        </member>
        <member name="M:FarNet.BaseModuleItem.GetString(System.String)">
            <summary>
            Gets a localized string from .resources files.
            </summary>
            <returns>Localized string. If a best match is not possible, null is returned.</returns>
            <param name="name">String name.</param>
            <remarks>
            It gets a string from .resource files depending on the <see cref="P:FarNet.IModuleManager.CurrentUICulture"/>.
            <para>
            The module has to provide .resources files in its directory:
            </para>
            <ul>
            <li>ModuleBaseName.resources (default, English is recommended)</li>
            <li>ModuleBaseName.ru.resources (Russian)</li>
            <li>ModuleBaseName.de.resources (German)</li>
            <li>...</li>
            </ul>
            <para>
            The file "ModuleBaseName.resources" must exist. It normally contains language independent strings
            and other strings in a default\fallback language, English more likely. Other files are optional
            and can be added at any time. Note that they do not have to repeat language independent strings.
            </para>
            <para>
            See <see cref="T:System.Globalization.CultureInfo"/> about culture names and MSDN about file based resource management.
            Use ResGen.exe tool or MSBuild task GenerateResource for binary .resources files generation
            from trivial .txt/.restext text files or Visual Studio .resx XML files.
            </para>
            <para>
            If you edit source .resx files in Visual Studio (a very good idea) then ensure they are
            either excluded from the project or not compiled and embedded into the output assembly.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.BaseModuleItem.Manager">
            <summary>
            Gets the module manager.
            </summary>
        </member>
        <member name="T:FarNet.ModuleException">
            <summary>
            Module exception.
            </summary>
            <remarks>
            If a module throws exceptions then for better diagnostics it is
            recommended to use this or derived exceptions in order to be able to
            distinguish between system, module, and even particular module
            exceptions.
            <para>
            Best practice: catch an exception, wrap it by a new module exception
            with better explanation of a problem and throw the new one. Wrapped
            inner exception is not lost: its message and stack are shown, for
            example by <see cref="M:FarNet.IFar.ShowError(System.String,System.Exception)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleException.#ctor">
            
        </member>
        <member name="M:FarNet.ModuleException.#ctor(System.String)">
            
        </member>
        <member name="M:FarNet.ModuleException.#ctor(System.String,System.Exception)">
            
        </member>
        <member name="M:FarNet.ModuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            
        </member>
        <member name="T:FarNet.IModuleManager">
            <summary>
            The module manager shared between all module items.
            </summary>
        </member>
        <member name="M:FarNet.IModuleManager.GetString(System.String)">
            <summary>
            The <see cref="M:FarNet.BaseModuleItem.GetString(System.String)"/> worker.
            </summary>
        </member>
        <member name="M:FarNet.IModuleManager.GetFolderPath(FarNet.SpecialFolder,System.Boolean)">
            <summary>
            Gets the path to the system special folder that is identified by the specified enumeration.
            </summary>
            <param name="folder">Special folder enumeration.</param>
            <param name="create">Tells to create the directory if it does not exist.</param>
            <remarks>
            Local and roaming data directories are designed for module data and settings files.
            NOTE: Names like <b>FarNet.*</b> are reserved for the internal use.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleManager.Unregister">
            <summary>
            Unregisters the module in critical cases.
            </summary>
            <remarks>
            This method should be called only on fatal errors and similar cases.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleManager.RegisterModuleCommand(System.Guid,FarNet.ModuleCommandAttribute,System.EventHandler{FarNet.ModuleCommandEventArgs})">
            <summary>
            Registers the command handler invoked from the command line by its prefix.
            </summary>
            <param name="id">Unique ID.</param>
            <param name="handler">Command handler.</param>
            <param name="attribute">Command attribute.</param>
            <remarks>
            NOTE: Consider to implement the <see cref="T:FarNet.ModuleCommand"/> instead.
            Dynamic registration is not recommended for standard scenarios.
            <para>
			If you plan to unregister this action then keep the returned reference and call its <see cref="M:FarNet.IModuleAction.Unregister"/> later.
			Instead of keeping the reference you can get it by its ID by the <see cref="T:FarNet.IFar"/>.<c>GetModule*()</c> methods.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.IModuleManager.RegisterModuleDrawer(System.Guid,FarNet.ModuleDrawerAttribute,System.EventHandler{FarNet.ModuleDrawerEventArgs})">
            <summary>
            Registers the editor drawer handler.
            </summary>
            <param name="id">Unique ID.</param>
            <param name="handler">Drawer handler.</param>
            <param name="attribute">Drawer attribute.</param>
            <remarks>
            NOTE: Consider to implement the <see cref="T:FarNet.ModuleDrawer"/> instead.
            Dynamic registration is not recommended for standard scenarios.
            <para>
			If you plan to unregister this action then keep the returned reference and call its <see cref="M:FarNet.IModuleAction.Unregister"/> later.
			Instead of keeping the reference you can get it by its ID by the <see cref="T:FarNet.IFar"/>.<c>GetModule*()</c> methods.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.IModuleManager.RegisterModuleTool(System.Guid,FarNet.ModuleToolAttribute,System.EventHandler{FarNet.ModuleToolEventArgs})">
            <summary>
            Registers the tool handler invoked from one of Far menus.
            </summary>
            <param name="id">Unique ID.</param>
            <param name="handler">Tool handler.</param>
            <param name="attribute">Tool attribute.</param>
            <remarks>
            NOTE: Consider to implement the <see cref="T:FarNet.ModuleTool"/> instead.
            Dynamic registration is not recommended for standard scenarios.
            <para>
			If you plan to unregister this action then keep the returned reference and call its <see cref="M:FarNet.IModuleAction.Unregister"/> later.
			Instead of keeping the reference you can get it by its ID by the <see cref="T:FarNet.IFar"/>.<c>GetModule*()</c> methods.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.IModuleManager.LoadAssembly(System.Boolean)">
            <summary>
            For internal use. Loads the assembly.
            </summary>
        </member>
        <member name="M:FarNet.IModuleManager.SaveSettings">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:FarNet.IModuleManager.CurrentUICulture">
            <summary>
            Gets or sets the current UI culture.
            </summary>
            <remarks>
            Method <see cref="M:FarNet.IModuleManager.GetString(System.String)"/> gets localized strings depending exactly on this property value.
            This property is set internally to the Far UI culture and normally you do not care of it.
            But you may want to set it yourself:
            <ul>
            <li>To ensure it is the same as the current Far UI culture after its changes.</li>
            <li>To use cultures different from the current Far UI culture (for testing or whatever).</li>
            <li>To use cultures which are not even known to Far itself (there are no such .lng files).</li>
            </ul>
            </remarks>
        </member>
        <member name="P:FarNet.IModuleManager.ModuleName">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="P:FarNet.IModuleManager.StoredUICulture">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="T:FarNet.ModuleHostAttribute">
            <summary>
            Module host attribute.
            </summary>
        </member>
        <member name="P:FarNet.ModuleHostAttribute.Load">
            <summary>
            Tells to load and connect the host always. There should be good reasons for 'true'.
            </summary>
            <remarks>
            If the module host is the only implemented module item then this flag
            has to be set to true. Otherwise the host has no chances to be used.
            </remarks>
        </member>
        <member name="T:FarNet.ModuleHost">
            <summary>
            The module host. At most one public descendant can be implemented by a module.
            </summary>
            <remarks>
            In many cases the module actions should be implemented instead of the host
            (see predefined descendants of <see cref="T:FarNet.ModuleAction"/>).
            <para>
            If the attribute <see cref="P:FarNet.ModuleHostAttribute.Load"/> is true then the host is always loaded.
            If it is false then the host is loaded only on the first call of any action.
            A single instance of this class is created for the whole session.
            </para>
            <para>
            This class provides virtual methods called by the core.
            Normally the module implements the <see cref="M:FarNet.ModuleHost.Connect"/> method.
            There are a few more optional virtual members that can be implemented when needed.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleHost.Connect">
            <summary>
            Override this method to process the module connection.
            </summary>
            <remarks>
            This method is called once. For standard hosts it is called before
            creation of the first called module action. For preloadable hosts
            it is called immediately after loading of the module assembly and
            registration of its actions.
            </remarks>
        </member>
        <member name="M:FarNet.ModuleHost.Disconnect">
            <summary>
            Override this method to process the module disconnection.
            </summary>
            <remarks>
            NOTE: Don't call Far UI, it is not working on exiting.
            Consider to use GUI message boxes if it is absolutely needed.
            <para>
            The host does not have to unregister dynamically registered actions
            on disconnection. But added "global" event handlers have to be
            removed, for example, handlers added to <see cref="P:FarNet.IFar.AnyEditor"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleHost.Invoking">
            <summary>
            Called before invocation of any module action.
            </summary>
            <remarks>
            The module may override this method to perform preparation procedures.
            Normally this is not needed for a simple module with a single action.
            It is useful when a complex module provides several actions and
            wants common steps to be performed by this method.
            <para>
            NOTE: This method is called only for module actions:
            <c>Invoke()</c> methods and handlers registered by <c>Register*()</c> methods.
            It is not called on events added by a module to editors, viewers, dialogs or panels.
            </para>
            <para>
            Example: PowerShellFar starts loading of the PowerShell engine in a background thread on connection.
            This method waits for the engine loading to complete, if needed. Registered PowerShellFar actions
            simply assume that the engine is already loaded. But editor event handlers still have to care.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleHost.CanExit">
            <summary>
            Can the module exit now?
            </summary>
            <remarks>
            This method is normally called internally by the <see cref="M:FarNet.IFar.Quit"/>.
            The module can override this to perform preliminary checks before exit.
            Note that final exit actions should be performed in <see cref="M:FarNet.ModuleHost.Disconnect"/>.
            <para>
            It is allowed to return false but this option should be used sparingly,
            there must be really good reasons to disturb normal exiting process.
            The most important reason is that a user really wants that.
            </para>
            </remarks>
            <returns>True if the module is ready to exit.</returns>
        </member>
        <member name="T:FarNet.ModuleActionAttribute">
            <summary>
            Any action attribute parameters.
            </summary>
        </member>
        <member name="M:FarNet.ModuleActionAttribute.Clone">
            
        </member>
        <member name="P:FarNet.ModuleActionAttribute.Name">
            <summary>
            The action name shown in menus. It is mandatory to specify.
            </summary>
            <remarks>
            <para>
            If the module uses this name itself, for example as message boxes titles, then define this text
            as a public const string in a class, then use its name as the value of this attribute parameter.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.ModuleActionAttribute.Resources">
            <summary>
            Tells to use the <see cref="P:FarNet.ModuleActionAttribute.Name"/> as the resource name of the localized string.
            </summary>
            <remarks>
            Restart Far after changing the current Far language or the module culture
            to make sure that this and other action names are updated from resources.
            </remarks>
        </member>
        <member name="T:FarNet.ModuleAction">
            <summary>
            Abstract parent of <see cref="T:FarNet.ModuleTool"/>, <see cref="T:FarNet.ModuleCommand"/>, <see cref="T:FarNet.ModuleEditor"/>.
            </summary>
        </member>
        <member name="T:FarNet.ModuleCommandAttribute">
            <summary>
            Module command attribute.
            </summary>
        </member>
        <member name="P:FarNet.ModuleCommandAttribute.Prefix">
            <summary>
            The command prefix. It is mandatory to specify a not empty value.
            </summary>
            <remarks>
            This prefix is only a suggestion, the actual prefix is configured by a user.
            </remarks>
        </member>
        <member name="T:FarNet.ModuleCommandEventArgs">
            <summary>
            Arguments of a module command event.
            </summary>
        </member>
        <member name="M:FarNet.ModuleCommandEventArgs.#ctor(System.String)">
            
        </member>
        <member name="P:FarNet.ModuleCommandEventArgs.Command">
            <summary>
            Gets the command text.
            </summary>
        </member>
        <member name="P:FarNet.ModuleCommandEventArgs.IsMacro">
            <summary>
            Tells that command is called by <c>Plugin.Call()</c>.
            </summary>
        </member>
        <member name="P:FarNet.ModuleCommandEventArgs.Ignore">
            <summary>
            Tells to ignore the call and allows alternative actions.
            </summary>
            <remarks>
            This flag is used when the command is called from a macro.
            <para>
            A handler sets this to true to tell that nothing is done and
            it makes sense for a caller to perform an alternative action.
            </para>
            <para>
            Note: this is not the case when processing has started and failed;
            the handler should either throw an exception or keep this value as false:
            fallback actions make no sense, the problems have to be resolved instead.
            </para>
            </remarks>
        </member>
        <member name="T:FarNet.ModuleCommand">
            <summary>
            A command called by its prefix from command lines and macros.
            </summary>
            <remarks>
            The <see cref="M:FarNet.ModuleCommand.Invoke(System.Object,FarNet.ModuleCommandEventArgs)"/> method has to be implemented.
            <para>
            Commands are called by their prefixes from command lines: the panel
            command line and user menu and file association commands. Macros call
            commands by <c>Plugin.Call()</c> (see the FarNet manual).
            </para>
            <para>
            It is mandatory to use <see cref="T:FarNet.ModuleCommandAttribute"/> and specify the <see cref="P:FarNet.ModuleActionAttribute.Name"/>
            and the default command prefix <see cref="P:FarNet.ModuleCommandAttribute.Prefix"/>.
            </para>
            <para>
			It is mandatory to set the action ID by <c>System.Runtime.InteropServices.GuidAttribute</c>.
			The ID has to be generated exactly for this class and it should never change.
			FarNet uses this ID internally for storing and restoring data.
			Other modules may use this ID to access and call this action.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleCommand.Invoke(System.Object,FarNet.ModuleCommandEventArgs)">
            <summary>
            Command handler called from the command line with a prefix.
            </summary>
        </member>
        <member name="T:FarNet.ModuleEditorAttribute">
            <summary>
            Module editor action attribute.
            </summary>
        </member>
        <member name="P:FarNet.ModuleEditorAttribute.Mask">
            <summary>
			File(s) mask, see Far API help topic [File masks]; format "include|exclude" is also supported.
			This value is only the default suggestion, actual mask may be changed by a user.
		</summary>
        </member>
        <member name="T:FarNet.ModuleDrawerAttribute">
            <summary>
            Module editor drawer attribute.
            </summary>
        </member>
        <member name="P:FarNet.ModuleDrawerAttribute.Mask">
            <summary>
			File(s) mask, see Far API help topic [File masks]; format "include|exclude" is also supported.
			This value is only the default suggestion, actual mask may be changed by a user.
		</summary>
        </member>
        <member name="P:FarNet.ModuleDrawerAttribute.Priority">
            <summary>
            Color priority.
            </summary>
        </member>
        <member name="T:FarNet.ModuleEditorEventArgs">
            <summary>
            Module editor event arguments.
            </summary>
        </member>
        <member name="T:FarNet.ModuleDrawerEventArgs">
            <summary>
            Module drawer event arguments.
            </summary>
        </member>
        <member name="M:FarNet.ModuleDrawerEventArgs.#ctor(System.Collections.Generic.ICollection{FarNet.EditorColor},System.Collections.Generic.IList{FarNet.ILine},System.Int32,System.Int32)">
            
        </member>
        <member name="P:FarNet.ModuleDrawerEventArgs.Colors">
            <summary>
            Gets the result color collection. A drawer adds colors to it.
            </summary>
        </member>
        <member name="P:FarNet.ModuleDrawerEventArgs.Lines">
            <summary>
            Gets the lines to get colors for. A drawer should not change anything.
            </summary>
        </member>
        <member name="P:FarNet.ModuleDrawerEventArgs.StartChar">
            <summary>
            Index of the first character.
            </summary>
        </member>
        <member name="P:FarNet.ModuleDrawerEventArgs.EndChar">
            <summary>
            Index of the character after the last.
            </summary>
        </member>
        <member name="T:FarNet.ModuleEditor">
            <summary>
            A module editor action.
            </summary>
            <remarks>
            This action deals with an editor opening, not with menu commands in editors
            (in the latter case use <see cref="T:FarNet.ModuleTool"/> configured for editors).
            <para>
            The <see cref="M:FarNet.ModuleEditor.Invoke(System.Object,FarNet.ModuleEditorEventArgs)"/> method has to be implemented.
            </para>
            <para>
            It is mandatory to use <see cref="T:FarNet.ModuleEditorAttribute"/> and specify the <see cref="P:FarNet.ModuleActionAttribute.Name"/>.
            The optional default file mask is defined as <see cref="P:FarNet.ModuleEditorAttribute.Mask"/>.
            </para>
            <para>
			It is mandatory to set the action ID by <c>System.Runtime.InteropServices.GuidAttribute</c>.
			The ID has to be generated exactly for this class and it should never change.
			FarNet uses this ID internally for storing and restoring data.
			Other modules may use this ID to access and call this action.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleEditor.Invoke(System.Object,FarNet.ModuleEditorEventArgs)">
            <summary>
            Editor <see cref="E:FarNet.IEditorBase.Opened"/> handler.
            </summary>
            <remarks>
            This method is called once on opening an editor.
            Normally it adds editor event handlers, then they do the jobs.
            </remarks>
            <example>
            See the <c>TrimSaving</c> module.
            It is not just an example, it can be used for real.
            </example>
        </member>
        <member name="T:FarNet.ModuleDrawer">
            <summary>
            A module drawer action.
            </summary>
            <remarks>
            This action is called on editor drawing in order to get colors for the specified lines.
            <para>
            The <see cref="M:FarNet.ModuleDrawer.Invoke(System.Object,FarNet.ModuleDrawerEventArgs)"/> method has to be implemented.
            It should work as fast as possible because it is called frequently.
            Its goal is to fill the color collection, it should not change anything.
            </para>
            <para>
            It is mandatory to use <see cref="T:FarNet.ModuleDrawerAttribute"/> and specify the <see cref="P:FarNet.ModuleActionAttribute.Name"/>.
            The optional default file mask is defined as <see cref="P:FarNet.ModuleDrawerAttribute.Mask"/>
            and the default color priority <see cref="P:FarNet.ModuleDrawerAttribute.Priority"/>.
            </para>
            <para>
			It is mandatory to set the action ID by <c>System.Runtime.InteropServices.GuidAttribute</c>.
			The ID has to be generated exactly for this class and it should never change.
			FarNet uses this ID internally for storing and restoring data.
			Other modules may use this ID to access and call this action.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleDrawer.Invoke(System.Object,FarNet.ModuleDrawerEventArgs)">
            <summary>
            Gets colors for the specified editor lines.
            </summary>
        </member>
        <member name="T:FarNet.ModuleToolOptions">
            <summary>
            Module tool options, combination of flags.
            </summary>
            <remarks>
            Choose the flags carefully, include areas where the tool really works.
            Nobody wants to have their plugin menus polluted by not working items.
            </remarks>
        </member>
        <member name="F:FarNet.ModuleToolOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Config">
            <summary>
            Show the item in the config menu and call it from other specified menus by [ShiftF9].
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Disk">
            <summary>
            Show the item in the disk menu.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Editor">
            <summary>
            Show the item in the editor plugin menu.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Panels">
            <summary>
            Show the item in the panel plugin menu.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Viewer">
            <summary>
            Show the item in the viewer plugin menu.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.Dialog">
            <summary>
            Show the item in the dialog plugin menu.
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.F11Menus">
            <summary>
            Show the item in all [F11] menus (Panels | Editor | Viewer | Dialog).
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.AllMenus">
            <summary>
            Show the item in [F11] menus and in the disk menu (F11Menus | Disk).
            </summary>
        </member>
        <member name="F:FarNet.ModuleToolOptions.AllAreas">
            <summary>
            Show the item in [F11] menus, the disk menu and the config menu (AllMenus | Config).
            </summary>
        </member>
        <member name="T:FarNet.ModuleToolAttribute">
            <summary>
            Module tool action attribute.
            </summary>
        </member>
        <member name="P:FarNet.ModuleToolAttribute.Options">
            <summary>
            Tool options. It is mandatory to specify at least one menu or other area.
            </summary>
        </member>
        <member name="T:FarNet.ModuleToolEventArgs">
            <summary>
            Arguments of a module tool event.
            </summary>
            <remarks>
            This event is called from plugin, disk or configuration menus.
            </remarks>
        </member>
        <member name="P:FarNet.ModuleToolEventArgs.From">
            <summary>
            Where it is called from.
            </summary>
        </member>
        <member name="P:FarNet.ModuleToolEventArgs.Ignore">
            <summary>
            Tells to ignore results, for example when a configuration dialog is canceled.
            </summary>
        </member>
        <member name="P:FarNet.ModuleToolEventArgs.IsLeft">
            <summary>
            Gets true if the event is called from the left disk menu.
            </summary>
        </member>
        <member name="T:FarNet.ModuleTool">
            <summary>
            A module tool represented by an item in Far menus.
            </summary>
            <remarks>
            The <see cref="M:FarNet.ModuleTool.Invoke(System.Object,FarNet.ModuleToolEventArgs)"/> method has to be implemented.
            <para>
            It is mandatory to use <see cref="T:FarNet.ModuleToolAttribute"/> and specify the <see cref="P:FarNet.ModuleActionAttribute.Name"/>
            and the menu areas <see cref="P:FarNet.ModuleToolAttribute.Options"/>.
            </para>
            <para>
			It is mandatory to set the action ID by <c>System.Runtime.InteropServices.GuidAttribute</c>.
			The ID has to be generated exactly for this class and it should never change.
			FarNet uses this ID internally for storing and restoring data.
			Other modules may use this ID to access and call this action.
		</para>
            </remarks>
        </member>
        <member name="M:FarNet.ModuleTool.Invoke(System.Object,FarNet.ModuleToolEventArgs)">
            <summary>
            Tool handler called when its menu item is invoked.
            </summary>
        </member>
        <member name="T:FarNet.ModuleItemKind">
            <summary>
            Module item kinds.
            </summary>
        </member>
        <member name="F:FarNet.ModuleItemKind.None">
            
        </member>
        <member name="F:FarNet.ModuleItemKind.Host">
            
        </member>
        <member name="F:FarNet.ModuleItemKind.Command">
            
        </member>
        <member name="F:FarNet.ModuleItemKind.Editor">
            
        </member>
        <member name="F:FarNet.ModuleItemKind.Tool">
            
        </member>
        <member name="F:FarNet.ModuleItemKind.Drawer">
            
        </member>
        <member name="T:FarNet.IModuleAction">
            <summary>
            Module action runtime representation.
            </summary>
            <remarks>
            Any registered module action has its runtime representation, one of this inderface descendants.
            These representation interfaces are not directly related to action classes or handlers, they only represent them.
            <para>
            Action representations can be requested by their IDs by <see cref="M:FarNet.IFar.GetModuleAction(System.Guid)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IModuleAction.Unregister">
            <summary>
            Unregisters the module action dynamically.
            </summary>
            <remarks>
            Normally it is used for temporary actions dynamically registered by <c>Register*()</c>.
            <para>
            Note that module hosts on disconnection does not have to unregister registered actions.
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.IModuleAction.Id">
            <summary>
            Gets the action ID.
            </summary>
        </member>
        <member name="P:FarNet.IModuleAction.Name">
            <summary>
            Gets the action name.
            </summary>
        </member>
        <member name="P:FarNet.IModuleAction.Kind">
            <summary>
            Gets the action kind.
            </summary>
        </member>
        <member name="P:FarNet.IModuleAction.Manager">
            <summary>
            Gets the module manager.
            </summary>
        </member>
        <member name="T:FarNet.IModuleCommand">
            <summary>
            Module command runtime representation.
            </summary>
            <remarks>
            It represents an auto registered <see cref="T:FarNet.ModuleCommand"/> or a command registered by <see cref="M:FarNet.IModuleManager.RegisterModuleCommand(System.Guid,FarNet.ModuleCommandAttribute,System.EventHandler{FarNet.ModuleCommandEventArgs})"/>.
            It can be accessed by <see cref="M:FarNet.IFar.GetModuleAction(System.Guid)"/> from any module.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleCommand.Invoke(System.Object,FarNet.ModuleCommandEventArgs)">
            <summary>
            Processes the command event.
            </summary>
        </member>
        <member name="P:FarNet.IModuleCommand.Prefix">
            <summary>
            Gets the command prefix. Setting is for internal use.
            </summary>
        </member>
        <member name="T:FarNet.IModuleEditor">
            <summary>
            Module editor runtime representation.
            </summary>
            <remarks>
            It represents an auto registered <see cref="T:FarNet.ModuleEditor"/> actions.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleEditor.Invoke(System.Object,FarNet.ModuleEditorEventArgs)">
            <summary>
            Processes the editor event.
            </summary>
        </member>
        <member name="P:FarNet.IModuleEditor.Mask">
            <summary>
            Gets the file mask. Setting is for internal use.
            </summary>
        </member>
        <member name="T:FarNet.IModuleDrawer">
            <summary>
            Module drawer runtime representation.
            </summary>
            <remarks>
            It represents an auto registered <see cref="T:FarNet.ModuleDrawer"/> or a drawer registered by <see cref="M:FarNet.IModuleManager.RegisterModuleDrawer(System.Guid,FarNet.ModuleDrawerAttribute,System.EventHandler{FarNet.ModuleDrawerEventArgs})"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleDrawer.CreateHandler">
            <summary>
            Returns the drawer handler.
            </summary>
        </member>
        <member name="P:FarNet.IModuleDrawer.Mask">
            <summary>
            Gets the file mask. Setting is for internal use.
            </summary>
        </member>
        <member name="P:FarNet.IModuleDrawer.Priority">
            <summary>
            Gets the priority. Setting is for internal use.
            </summary>
        </member>
        <member name="T:FarNet.IModuleTool">
            <summary>
            Module tool runtime representation.
            </summary>
            <remarks>
            It represents an auto registered <see cref="T:FarNet.ModuleTool"/> or a tool registered by <see cref="M:FarNet.IModuleManager.RegisterModuleTool(System.Guid,FarNet.ModuleToolAttribute,System.EventHandler{FarNet.ModuleToolEventArgs})"/>.
            It can be accessed by <see cref="M:FarNet.IFar.GetModuleAction(System.Guid)"/> from any module.
            </remarks>
        </member>
        <member name="M:FarNet.IModuleTool.Invoke(System.Object,FarNet.ModuleToolEventArgs)">
            <summary>
            Processes the tool event.
            </summary>
        </member>
        <member name="P:FarNet.IModuleTool.Options">
            <summary>
            Gets the tool options. Setting is for internal use.
            </summary>
        </member>
        <member name="P:FarNet.IModuleTool.DefaultOptions">
            <summary>
            Gets the default tool options.
            </summary>
        </member>
        <member name="T:FarNet.Panel">
            <summary>
            Module panel. Create it or a derived class instance directly,
            set properties, add event handlers and open it.
            </summary>
            <remarks>
            <para>
            Exposed as <see cref="P:FarNet.IFar.Panel"/> and <see cref="P:FarNet.IFar.Panel2"/>.
            </para>
            <para>
            Properties of this class are requested by the core quite frequently.
            For better performance the core caches internal representation of these data.
            After opening a panel it is recommended to avoid excessive modifications of data.
            </para>
            <para>
            Some settings often configured before opening:
            <see cref="P:FarNet.Panel.Title"/>,
            <see cref="P:FarNet.Panel.SortMode"/>,
            <see cref="P:FarNet.Panel.ViewMode"/>,
            <see cref="M:FarNet.Panel.SetPlan(FarNet.PanelViewMode,FarNet.PanelPlan)"/>.
            </para>
            <para>
            After opening changing of panel state properties normally does not cause immediate visual effects.
            When all changes are done call one of the redraw methods in order to make the changes shown.
            </para>
            <para>
            Most of <c>UI*</c> methods should not be called directly, they are called by the core on user interaction.
            Many of them can be overriden in derived classes but this should be done only if explorer methods are not enough.
            </para>
            <para>
            All <c>Works*</c> members are for internal use only.
            </para>
            </remarks>
        </member>
        <member name="T:FarNet.IPanel">
            <summary>
            Any panel: native, plugin, or module.
            Exposed as <see cref="P:FarNet.IFar.Panel"/> and <see cref="P:FarNet.IFar.Panel2"/>.
            </summary>
        </member>
        <member name="M:FarNet.IPanel.Redraw">
            <summary>
            Redraws the panel. Normally you should call it after changes to make them visible.
            </summary>
        </member>
        <member name="M:FarNet.IPanel.Redraw(System.Int32,System.Int32)">
            <summary>
            Redraws the panel and sets the current and\or the first visible item.
            If both arguments are negative, result is the same as per <see cref="M:FarNet.IPanel.Redraw"/>
            </summary>
            <param name="current">Index of the current panel item.</param>
            <param name="top">Index of the first visible panel item.</param>
        </member>
        <member name="M:FarNet.IPanel.Update(System.Boolean)">
            <summary>
            Updates panel contents.
            </summary>
            <param name="keepSelection">Keep the current selection.</param>
        </member>
        <member name="M:FarNet.IPanel.Close">
            <summary>
            Closes the plugin panel and opens the original file panel.
            </summary>
            <remarks>
            Mantis 1114: the current original panel item depends on the current plugin panel item on closing.
            It is resolved for module panels, the original current and even selected items should be restored.
            </remarks>
        </member>
        <member name="M:FarNet.IPanel.Close(System.String)">
            <summary>
            Closes the plugin panel and opens a file panel with the specified path.
            </summary>
            <param name="path">
            Name of the directory that will be set in the panel after closing the panel (or {null|empty}).
            If the path doesn't exist the core shows an error message box always.
            </param>
        </member>
        <member name="M:FarNet.IPanel.GoToName(System.String)">
            <summary>
            Sets the specified item current by name, if it exists.
            </summary>
            <param name="name">Name or alternative name of an item to be set current.</param>
            <remarks>
            If the item does not exist or it is hidden and the panel does not show hidden items
            then just nothing happens, it is not an error.
            </remarks>
            <seealso cref="P:FarNet.IPanel.CurrentDirectory"/>
            <seealso cref="M:FarNet.IPanel.GoToPath(System.String)"/>
            <seealso cref="M:FarNet.IPanel.GoToName(System.String,System.Boolean)"/>
        </member>
        <member name="M:FarNet.IPanel.GoToName(System.String,System.Boolean)">
            <summary>
            Sets the specified item current by name and optionally fails if it is not shown.
            </summary>
            <returns>True if a file is found.</returns>
            <param name="name">Name or alternative name of a file to be set current.</param>
            <param name="fail">Fail mode: to throw if a file is not shown.</param>
            <exception cref="T:System.IO.FileNotFoundException">Fail mode: a file is not shown.</exception>
            <seealso cref="P:FarNet.IPanel.CurrentDirectory"/>
            <seealso cref="M:FarNet.IPanel.GoToName(System.String)"/>
            <seealso cref="M:FarNet.IPanel.GoToPath(System.String)"/>
        </member>
        <member name="M:FarNet.IPanel.GoToPath(System.String)">
            <summary>
            Opens the parent directory of a specified item and sets the item current in the panel.
            </summary>
            <param name="path">Path of an item to be set current.</param>
            <remarks>
            If the path is not valid or the parent directory does not exist an exception is thrown.
            Otherwise the directory of the item is opened on the panel. If the item does not exist
            or it is hidden and the panel does not show hidden items it is fine, in this case the
            top panel item is set current after the call. Otherwise the requested item is set as
            the current.
            </remarks>
            <seealso cref="P:FarNet.IPanel.CurrentDirectory"/>
            <seealso cref="M:FarNet.IPanel.GoToName(System.String)"/>
        </member>
        <member name="M:FarNet.IPanel.SelectAll">
            <summary>
            Selects all shown items.
            </summary>
            <remarks>
            Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.IPanel.UnselectAll">
            <summary>
            Unselects all shown items.
            </summary>
            <remarks>
            Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.IPanel.SelectAt(System.Int32[])">
            <summary>
            Selects shown items by their indexes.
            </summary>
            <param name="indexes">Indexes of items to be selected. Null is OK.</param>
            <remarks>
            Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.IPanel.UnselectAt(System.Int32[])">
            <summary>
            Unselects shown items by their indexes. See <see cref="M:FarNet.IPanel.Redraw"/>.
            </summary>
            <param name="indexes">Indexes of items to be unselected. Null os OK.</param>
            <remarks>
            Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.IPanel.SelectNames(System.Collections.IEnumerable)">
            <summary>
			Select panel items with specified names.
		</summary><param name="names">
			Names to be selected or objects converted to strings by <c>ToString()</c>. Null is OK.
		</param><remarks>
			Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
			<para>
				Names are processed as case sensitive, not found input names are ignored.
			</para>
		</remarks>
        </member>
        <member name="M:FarNet.IPanel.UnselectNames(System.Collections.IEnumerable)">
            <summary>
			Unselect panel items with specified names.
		</summary><param name="names">
			Names to be unselected or objects converted to strings by <c>ToString()</c>. Null is OK.
		</param><remarks>
			Call <see cref="M:FarNet.IPanel.Redraw"/> after that.
			<para>
				Names are processed as case sensitive, not found input names are ignored.
			</para>
		</remarks>
        </member>
        <member name="M:FarNet.IPanel.Push">
            <summary>
            Pushes or puts the panel to the internal panel shelve.
            </summary>
        </member>
        <member name="M:FarNet.IPanel.SelectedIndexes">
            <summary>
            Gets indexes of selected items.
            </summary>
            <remarks>
            The indexes are valid only for the <see cref="P:FarNet.IPanel.ShownList"/> items.
            Unlike the <see cref="P:FarNet.IPanel.SelectedFiles"/> or <see cref="P:FarNet.IPanel.SelectedList"/> this list is empty if none is selected.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.CaseSensitiveSort">
            <summary>
            Gets or sets the case sensitive sort flag.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.DirectoriesFirst">
            <summary>
            Gets or sets the directories first sort flag.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.NumericSort">
            <summary>
            Gets or sets the numeric sort flag.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.Highlight">
            <summary>
            Gets true if file highlighting is turned on.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.RealNames">
            <summary>
            Gets (all panels) or sets (module panel) the real file system names flag.
            </summary>
            <remarks>
            If this flag is set then panel item names are related to real file system names.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.SelectedFirst">
            <summary>
            Gets the show selected files first flag.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.ShowHidden">
            <summary>
            Gets true if hidden and system files are shown.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.UseSortGroups">
            <summary>
            Gets (all panels) or sets (module panel) the use sort groups flags.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.CurrentDirectory">
            <summary>
			Gets the panel directory or sets a new directory and opens its native file panel.
		</summary><remarks>
			If it is a directory tree panel then the path is the currently selected directory in the tree.
			If it is a module panel then it normally returns <see cref="P:FarNet.Explorer.Location"/>
			or the value assigned to the <see cref="P:FarNet.Panel.CurrentLocation"/>.
			<para>
				It throws on setting if a directory path is not valid or does not exist.
			</para>
			<para>
				Call <see cref="M:FarNet.IPanel.Redraw"/> after changing the directory in order to show changes immediately.
			</para>
		</remarks><seealso cref="M:FarNet.IPanel.GoToName(System.String)"/><seealso cref="M:FarNet.IPanel.GoToPath(System.String)"/>
        </member>
        <member name="P:FarNet.IPanel.CurrentFile">
            <summary>
            Gets the current file.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.CurrentIndex">
            <summary>
            Gets the current file index in the <see cref="P:FarNet.IPanel.ShownList"/> files.
            </summary>
            <remarks>
            This is the index of the current file in the <see cref="P:FarNet.IPanel.ShownList"/> files.
            It is not directly related to other panel file collections.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.Frame">
            <summary>
            Gets the current frame: current and top file indexes.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.IsActive">
            <summary>
            Gets true if the panel is active.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.IsLeft">
            <summary>
            Gets true if the panel is the left panel.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.IsNavigation">
            <summary>
            Gets true if the panel is designed for navigation by paths.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.IsPlugin">
            <summary>
            Gets true if it is a plugin panel.
            </summary>
            <remarks>
            Note: module panels are plugin panels because they are created by the plugin.
            Plugin panels may or may not be module panels.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.IsVisible">
            <summary>
            Gets or sets visibility of the panel.
            </summary>
            <remarks>
            Setting takes effect only when Far gets control.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.Kind">
            <summary>
            Gets the panel kind.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.SelectedFiles">
            <summary>
            Gets all selected panel files at once or the current file if none is selected.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.IPanel.SelectedList"/> this list is a snapshot of files,
            it can be used even after changes in the panel.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.SelectedList">
            <summary>
            Gets all selected panel files or the current file if none is selected.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.IPanel.SelectedFiles"/> you must not change panel items while using this list.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.ShownFiles">
            <summary>
            Gets all shown panel files at once. File ".." is excluded.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.IPanel.ShownList"/> this list is a snapshot of all files,
            it can be used even after changes in the panel.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.ShownList">
            <summary>
            Gets all shown panel files including "..".
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.IPanel.ShownFiles"/> you must not change panel items while using this list.
            The current file index in this list is <see cref="P:FarNet.IPanel.CurrentIndex"/>.
            </remarks>
        </member>
        <member name="P:FarNet.IPanel.TopIndex">
            <summary>
            Gets the first visible file index.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.SortMode">
            <summary>
            Gets or sets the panel sort mode.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.ViewMode">
            <summary>
            Gets or sets the panel view mode.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.ViewPlan">
            <summary>
			Gets the current view plan.
		</summary><remarks>
			This plan info is incomplete, for example column names are empty.
		</remarks><seealso cref="M:FarNet.Panel.GetPlan(FarNet.PanelViewMode)"/>
        </member>
        <member name="P:FarNet.IPanel.Window">
            <summary>
            Gets the panel window position.
            </summary>
        </member>
        <member name="P:FarNet.IPanel.SelectionExists">
            <summary>
            Gets true if selection exists.
            </summary>
        </member>
        <member name="M:FarNet.Panel.OnThatFileChanged(FarNet.Panel,System.EventArgs)">
            <summary>
            Called when files of another module panel have been changed.
            </summary>
            <remarks>
            This panel may want to be updated if it contains data related to that panel.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)">
            <summary>
            Called when files of this panel have been changed.
            </summary>
            <remarks>
            The base method calls <see cref="M:FarNet.Panel.OnThatFileChanged(FarNet.Panel,System.EventArgs)"/>.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIExplorerEntered(FarNet.ExplorerEnteredEventArgs)">
            <summary>
            It is called when a new explorer has been attached after one of the explore methods.
            </summary>
            <remarks>
            The base method triggers the <see cref="E:FarNet.Panel.ExplorerEntered"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.WorksExportExplorerFile(FarNet.Explorer,FarNet.Panel,FarNet.ExplorerModes,FarNet.FarFile,System.String)">
            
        </member>
        <member name="M:FarNet.Panel.UICopyMove(System.Boolean)">
            <summary>
            Copy/move action.
            </summary>
            <remarks>
            The source and target panel are module panels.
            The target panel explorer accepts the selected files.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UICreate">
            <summary>
            Creates a new file or directory.
            </summary>
            <remarks>
            It is normally called on [F7].
            It calls <see cref="M:FarNet.Panel.UICreateFile(FarNet.CreateFileEventArgs)"/> if the explorer supports it.
            <para>
            Current file after the operation is defined by <c>Post*</c> in the arguments.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIDelete(System.Boolean)">
            <summary>
            Delete action.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIDeleteWithRecover(FarNet.DeleteFilesEventArgs,System.Boolean)">
            <summary>
            Deletes files, heals selection.
            </summary>
        </member>
        <member name="M:FarNet.Panel.WorksEscaping(FarNet.KeyEventArgs)">
            
        </member>
        <member name="M:FarNet.Panel.UIEscape(System.Boolean)">
            <summary>
            Called when [Esc] or [ShiftEsc] is pressed and the command line is empty.
            </summary>
            <remarks>
            By default it closes the the panel itself or with all parent panels.
            The panel may override this method or use the <see cref="E:FarNet.Panel.Escaping"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIEditFile(FarNet.FarFile)">
            <summary>
            Opens the file in the editor.
            </summary>
            <remarks>
            The default method calls <see cref="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)"/>  to get a temporary file to edit
            and <see cref="M:FarNet.Explorer.SetFile(FarNet.SetFileEventArgs)"/> to save changes when the editor closes.
            The explorer should have at least export implemented.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIViewFile(FarNet.FarFile)">
            <summary>
            Opens the file in the viewer.
            </summary>
            <remarks>
            The default method calls <see cref="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)"/> to get a temporary file to view.
            The explorer should have it implemented.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIOpenFile(FarNet.FarFile)">
            <summary>
            Opens the file.
            </summary>
            <remarks>
            It is called for the current file when [Enter] is pressed.
            The base method just calls <see cref="M:FarNet.Explorer.OpenFile(FarNet.OpenFileEventArgs)"/> if the explorer supports it.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIClone">
            <summary>
            Clone action.
            </summary>
            <remarks>
            It is called for the current item when [ShiftF5] is pressed.
            It calls <see cref="M:FarNet.Panel.UICloneFile(FarNet.CloneFileEventArgs)"/> if the explorer supports it.
            <para>
            Current file after the operation is defined by <c>Post*</c> in the arguments.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIRename">
            <summary>
            Rename action.
            </summary>
            <remarks>
            It is called for the current item when [ShiftF6] is pressed.
            It calls <see cref="M:FarNet.Panel.UIRenameFile(FarNet.RenameFileEventArgs)"/> if the explorer supports it.
            <para>
            Current file after the operation is defined by <c>Post*</c> in the arguments.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIIdle">
            <summary>
            Called periodically when idle.
            </summary>
            <remarks>
            It is used for panel updating and redrawing if data have changed.
            The base method triggers the <see cref="E:FarNet.Panel.Idled"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.WorksKeyPressed(FarNet.KeyEventArgs)">
            
        </member>
        <member name="M:FarNet.Panel.UIKeyPressed(FarNet.KeyInfo)">
            <summary>
            Called when a key is pressed after the <see cref="E:FarNet.Panel.KeyPressed"/> event.
            </summary>
            <param name="key">The pressed key.</param>
            <returns>True if the key has been processed.</returns>
        </member>
        <member name="M:FarNet.Panel.UIGetFiles(FarNet.GetFilesEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.GetFiles(FarNet.GetFilesEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIExploreDirectory(FarNet.ExploreDirectoryEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ExploreDirectory(FarNet.ExploreDirectoryEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIExploreLocation(FarNet.ExploreLocationEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ExploreLocation(FarNet.ExploreLocationEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIExploreParent(FarNet.ExploreParentEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ExploreParent(FarNet.ExploreParentEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIExploreRoot(FarNet.ExploreRootEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ExploreRoot(FarNet.ExploreRootEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIGetContent(FarNet.GetContentEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.GetContent(FarNet.GetContentEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UISetFile(FarNet.SetFileEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.SetFile(FarNet.SetFileEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UISetText(FarNet.SetTextEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.SetText(FarNet.SetTextEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIAcceptFiles(FarNet.AcceptFilesEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.AcceptFiles(FarNet.AcceptFilesEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIDeleteFiles(FarNet.DeleteFilesEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.DeleteFiles(FarNet.DeleteFilesEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIExportFiles(FarNet.ExportFilesEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ExportFiles(FarNet.ExportFilesEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIImportFiles(FarNet.ImportFilesEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.ImportFiles(FarNet.ImportFilesEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UICloneFile(FarNet.CloneFileEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.CloneFile(FarNet.CloneFileEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UICreateFile(FarNet.CreateFileEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.CreateFile(FarNet.CreateFileEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIOpenFile(FarNet.OpenFileEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.OpenFile(FarNet.OpenFileEventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.UIRenameFile(FarNet.RenameFileEventArgs)">
            <summary>
            Calls <see cref="M:FarNet.Explorer.RenameFile(FarNet.RenameFileEventArgs)"/> and <see cref="M:FarNet.Panel.OnThisFileChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:FarNet.Panel.#ctor(FarNet.Explorer)">
            <summary>
            New module panel with its file explorer.
            </summary>
        </member>
        <member name="M:FarNet.Panel.Navigate(FarNet.Explorer)">
            <summary>
            Navigates to a virtual file system location specified by the explorer and updates the panel.
            </summary>
            <remarks>
            A new explorer must have the same <see cref="P:FarNet.Explorer.TypeId"/> as the current one.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.Open">
            <summary>
            Tells to open the panel when the core gets control.
            </summary>
            <remarks>
            Normally a panel should be opened when a module is called from panels window
            (command line, disk menu or plugins menu in panels). If panels window cannot
            be set current, this method fails.
            <para>
            Other possible reasons of failure:
            *) another panel has been already posted for opening;
            *) the module is not called for opening, e.g. it is called to process events.
            </para>
            <para>
            It is recommended to call this as soon as possible and only then to configure the panel and other data.
            Technically this method only tries to post the panel for opening and may fail due to the reasons above.
            Early call and failure avoids jobs for nothing.
            </para>
            </remarks>
            <seealso cref="M:FarNet.Panel.Open(System.Boolean)"/>
            <seealso cref="M:FarNet.Panel.OpenChild(FarNet.Panel)"/>
        </member>
        <member name="M:FarNet.Panel.Open(System.Boolean)">
            <summary>
            Calls <see cref="M:FarNet.Panel.Open"/> or <see cref="M:FarNet.Panel.OpenChild(FarNet.Panel)"/> depending on the parameter.
            </summary>
            <param name="child">Tells to open the panel as a child of the active module panel, if any.</param>
        </member>
        <member name="M:FarNet.Panel.OpenChild(FarNet.Panel)">
            <summary>
            Opens this panel as a child of the parent panel.
            </summary>
            <param name="parent">The opend parent panel. Null tells to use the active module panel, if any.</param>
            <remarks>
            When this panel is opened as a child of the parent panel, the parent is hidden, not closed.
            When the child closes itself later then the parent is shown again and its state is restored.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.OpenChildBegin(FarNet.Panel)">
            <summary>
            It is called from <see cref="M:FarNet.Panel.OpenChild(FarNet.Panel)"/> before linking the panels together.
            </summary>
            <param name="parent">The panel about to be parent.</param>
            <returns>False to cancel opening.</returns>
            <remarks>
            This method is designed for cases when the child opening depends on the parent.
            For example the initial current file may depend on the parent current file.
            When this methods is called the parent is the active panel and its data can
            be used as usual. The panels are not yet linked together, use the parameter
            in order to access the parent.
            <para>
            If it returns false or even throws then the parent panel remains opened.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.SaveState">
            <summary>
            Saves the panel state.
            </summary>
            <remarks>
            It is called when the panel is about to be offline (pushed or replaced by a child panel).
            The panel UI state is saved by the core (view and sort modes, etc.).
            The base method posts the current file to be restored as current.
            It is important to have the proper <see cref="P:FarNet.Explorer.FileComparer"/>.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.CloseChild">
            <summary>
            Closes this child panel and opens the parent panel if both panels are ready.
            </summary>
            <remarks>
            The method only tries to close the child panel.
            The panel is not closed if <see cref="M:FarNet.Panel.CanClose"/> or <see cref="M:FarNet.Panel.CanCloseChild"/> gets false.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.CanClose">
            <summary>
            Can the panel close now?
            </summary>
            <remarks>
            It can be called from a child; in this case the panel is offline.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.CanCloseChild">
            <summary>
            Can the parent panel close its child?
            </summary>
        </member>
        <member name="M:FarNet.Panel.SaveData">
            <summary>
            Saves the panel data.
            </summary>
            <returns>True if there is no more data to save.</returns>
        </member>
        <member name="M:FarNet.Panel.PostData(System.Object)">
            <summary>
            Posts the <see cref="P:FarNet.FarFile.Data"/> to be used to find a file and set it current on redrawing.
            </summary>
        </member>
        <member name="M:FarNet.Panel.PostFile(FarNet.FarFile)">
            <summary>
            Posts the file to be found and set current on redrawing.
            </summary>
            <remarks>
            The posted file is ignored if <see cref="M:FarNet.Panel.PostData(System.Object)"/> or <see cref="M:FarNet.Panel.PostName(System.String)"/> were called.
            The <see cref="P:FarNet.Explorer.FileComparer"/> is used in order to find the file.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.PostName(System.String)">
            <summary>
            Posts the file name to be used to find a file and set it current on redrawing.
            </summary>
        </member>
        <member name="M:FarNet.Panel.Redraw">
            <summary>
            Redraws the panel. Normally you should call it after changes to make them visible.
            </summary>
        </member>
        <member name="M:FarNet.Panel.Redraw(System.Int32,System.Int32)">
            <summary>
            Redraws the panel and sets the current and\or the first visible item.
            If both arguments are negative, result is the same as per <see cref="M:FarNet.Panel.Redraw"/>
            </summary>
            <param name="current">Index of the current panel item.</param>
            <param name="top">Index of the first visible panel item.</param>
        </member>
        <member name="M:FarNet.Panel.Update(System.Boolean)">
            <summary>
            Updates panel contents.
            </summary>
            <param name="keepSelection">Keep the current selection.</param>
        </member>
        <member name="M:FarNet.Panel.Close">
            <summary>
            Closes the module panel and all parents and opens the original file panel.
            </summary>
            <remarks>
            Mantis 1114: the current original panel item depends on the current plugin panel item on closing.
            It is resolved for module panels, the original current and even selected items should be restored.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.Close(System.String)">
            <summary>
            Closes the module panel and all parents and opens the original file panel with the specified path.
            </summary>
            <param name="path">
            Name of the directory that will be set in the panel after closing the panel (or {null|empty}).
            If the path doesn't exist the core shows an error message box always.
            </param>
        </member>
        <member name="M:FarNet.Panel.GoToName(System.String)">
            <summary>
            Sets the specified item current by name, if it exists.
            </summary>
            <param name="name">Name or alternative name of an item to be set current.</param>
            <remarks>
            If the item does not exist or it is hidden and the panel does not show hidden items
            then just nothing happens, it is not an error.
            </remarks>
            <seealso cref="P:FarNet.Panel.CurrentDirectory"/>
            <seealso cref="M:FarNet.Panel.GoToPath(System.String)"/>
            <seealso cref="M:FarNet.Panel.GoToName(System.String,System.Boolean)"/>
        </member>
        <member name="M:FarNet.Panel.GoToName(System.String,System.Boolean)">
            <summary>
            Sets the specified item current by name and optionally fails if it is not shown.
            </summary>
            <returns>True if a file is found.</returns>
            <param name="name">Name or alternative name of a file to be set current.</param>
            <param name="fail">Fail mode: to throw if a file is not shown.</param>
            <exception cref="T:System.IO.FileNotFoundException">Fail mode: a file is not shown.</exception>
            <seealso cref="P:FarNet.Panel.CurrentDirectory"/>
            <seealso cref="M:FarNet.Panel.GoToName(System.String)"/>
            <seealso cref="M:FarNet.Panel.GoToPath(System.String)"/>
        </member>
        <member name="M:FarNet.Panel.GoToPath(System.String)">
            <summary>
            Opens the parent directory of a specified item and sets the item current in the panel.
            </summary>
            <param name="path">Path of an item to be set current.</param>
            <remarks>
            If the path is not valid or the parent directory does not exist an exception is thrown.
            Otherwise the directory of the item is opened on the panel. If the item does not exist
            or it is hidden and the panel does not show hidden items it is fine, in this case the
            top panel item is set current after the call. Otherwise the requested item is set as
            the current.
            </remarks>
            <seealso cref="P:FarNet.Panel.CurrentDirectory"/>
            <seealso cref="M:FarNet.Panel.GoToName(System.String)"/>
        </member>
        <member name="M:FarNet.Panel.SelectAll">
            <summary>
            Selects all shown items.
            </summary>
            <remarks>
            Call <see cref="M:FarNet.Panel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UnselectAll">
            <summary>
            Unselects all shown items.
            </summary>
            <remarks>
            Call <see cref="M:FarNet.Panel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.SelectAt(System.Int32[])">
            <summary>
            Selects shown items by their indexes.
            </summary>
            <param name="indexes">Indexes of items to be selected. Null is OK.</param>
            <remarks>
            Call <see cref="M:FarNet.Panel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UnselectAt(System.Int32[])">
            <summary>
            Unselects shown items by their indexes. See <see cref="M:FarNet.Panel.Redraw"/>.
            </summary>
            <param name="indexes">Indexes of items to be unselected. Null os OK.</param>
            <remarks>
            Call <see cref="M:FarNet.Panel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.SelectNames(System.Collections.IEnumerable)">
            <summary>
			Select panel items with specified names.
		</summary><param name="names">
			Names to be selected or objects converted to strings by <c>ToString()</c>. Null is OK.
		</param><remarks>
			Call <see cref="M:FarNet.Panel.Redraw"/> after that.
			<para>
				Names are processed as case sensitive, not found input names are ignored.
			</para>
		</remarks>
        </member>
        <member name="M:FarNet.Panel.UnselectNames(System.Collections.IEnumerable)">
            <summary>
			Unselect panel items with specified names.
		</summary><param name="names">
			Names to be unselected or objects converted to strings by <c>ToString()</c>. Null is OK.
		</param><remarks>
			Call <see cref="M:FarNet.Panel.Redraw"/> after that.
			<para>
				Names are processed as case sensitive, not found input names are ignored.
			</para>
		</remarks>
        </member>
        <member name="M:FarNet.Panel.Push">
            <summary>
            Pushes or puts the panel to the internal panel shelve.
            </summary>
        </member>
        <member name="M:FarNet.Panel.SelectedIndexes">
            <summary>
            Gets indexes of selected items.
            </summary>
            <remarks>
            The indexes are valid only for the <see cref="P:FarNet.Panel.ShownList"/> items.
            Unlike the <see cref="P:FarNet.Panel.SelectedFiles"/> or <see cref="P:FarNet.Panel.SelectedList"/> this list is empty if none is selected.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIClosed">
            <summary>
            Called when the panel has been closed.
            </summary>
            <remarks>
            The method releases panel resources. It should not do anything else, the panel has gone.
            <para>
            Overriden methods must call the base. Consider to use try/finally and call the base from finally.
            </para>
            <para>
            The base method triggers the <see cref="E:FarNet.Panel.Closed"/> event and then disposes the <see cref="P:FarNet.Panel.Garbage"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIClosing(FarNet.PanelEventArgs)">
            <summary>
            Called when the panel is about to be closed.
            </summary>
            <remarks>
            There are issues:  http://bugs.farmanager.com/view.php?id=602
            <para>
            Far calls this unexpectedly on plugin commands invoked from the command line
            even if a new panel is not going to be opened and the current one closed.
            Thus, it can be called more than once.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.WorksInvokingCommand(FarNet.CommandLineEventArgs)">
            
        </member>
        <member name="M:FarNet.Panel.UIUpdateInfo">
            <summary>
            Called by the core to get the panel info. Use it only when it is absolutely needed.
            </summary>
            <remarks>
            Normally you should not use this. It is not recommended for many reasons:
            *) it is called frequently and can be very expensive;
            *) it may have problems if panel data are accessed, even for reading.
            <para>
            Consider to update the panel info in other methods.
            As the last resort use <see cref="M:FarNet.Panel.UIRedrawing(FarNet.PanelEventArgs)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UICtrlBreak">
            <summary>
            Called when [CtrlBreak] is pressed, normally from a separate thread.
            </summary>
            <remarks>
            Processing is performed in a separate thread, use only approved API and thread safe techniques.
            <para>
            The base method triggers the <see cref="E:FarNet.Panel.CtrlBreak"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIRedrawing(FarNet.PanelEventArgs)">
            <summary>
            Called when the panel is about to redraw.
            </summary>
            <remarks>
            Set <see cref="P:FarNet.PanelEventArgs.Ignore"/> = true if the module redraws the panel itself.
            <para>
            The base method triggers the <see cref="E:FarNet.Panel.Redrawing"/> event.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIViewChanged(FarNet.ViewChangedEventArgs)">
            <summary>
            Called when panel view mode is changed.
            </summary>
            <remarks>
            The base method triggers the <see cref="E:FarNet.Panel.ViewChanged"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UIGotFocus">
            <summary>
            Called when the panel has got focus.
            </summary>
            <remarks>
            The base method triggers the <see cref="E:FarNet.Panel.GotFocus"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.UILosingFocus">
            <summary>
            Called when the panel is losing focus.
            </summary>
            <remarks>
            The base method triggers the <see cref="E:FarNet.Panel.LosingFocus"/> event.
            </remarks>
        </member>
        <member name="M:FarNet.Panel.SetKeyBars(FarNet.KeyBar[])">
            <summary>
            Sets key bars.
            </summary>
        </member>
        <member name="M:FarNet.Panel.GetPlan(FarNet.PanelViewMode)">
            <summary>
            Gets the panel view plan or null if it is not set.
            </summary>
            <param name="mode">View mode to get the plan for.</param>
            <returns>
            The view plan. If you change it for the opened panel then call <see cref="M:FarNet.Panel.SetPlan(FarNet.PanelViewMode,FarNet.PanelPlan)"/> even with the same object.
            </returns>
        </member>
        <member name="M:FarNet.Panel.SetPlan(FarNet.PanelViewMode,FarNet.PanelPlan)">
            <summary>
            Sets the panel plan.
            </summary>
            <param name="mode">View mode to set the plan for.</param>
            <param name="plan">The plan. If it has no columns then a column "Name" is assumed.</param>
        </member>
        <member name="M:FarNet.Panel.SelectFiles(System.Collections.IEnumerable,System.Collections.Generic.IEqualityComparer{FarNet.FarFile})">
            <summary>
            Selects the specified panel files.
            </summary>
            <param name="files">Collection of <see cref="T:FarNet.FarFile"/> files to be selected.</param>
            <param name="comparer">The file comparer or null for the panel comparer.</param>
            <remarks>
            Call <see cref="M:FarNet.Panel.Redraw"/> after that.
            </remarks>
        </member>
        <member name="E:FarNet.Panel.ExplorerEntered">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIExplorerEntered(FarNet.ExplorerEnteredEventArgs)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.Escaping">
            <summary>
            Called before <see cref="M:FarNet.Panel.UIEscape(System.Boolean)"/>.
            </summary>
            <remarks>
            If <see cref="P:FarNet.PanelEventArgs.Ignore"/> = true then the core does nothing.
            Otherwise it calls <see cref="M:FarNet.Panel.UIEscape(System.Boolean)"/> to close the panel.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.IdleUpdate">
            <summary>
            Tells to update and redraw the panel automatically when idle.
            </summary>
            <remarks>
            If it is set the panel is updated automatically every few seconds when idle.
            This is suitable only for panels with very frequently changed data,
            otherwise it results in expensive updates for nothing.
            </remarks>
            <seealso cref="E:FarNet.Panel.Idled"/>
        </member>
        <member name="E:FarNet.Panel.Idled">
            <summary>
            Called periodically when a user is idle.
            </summary>
            <seealso cref="P:FarNet.Panel.IdleUpdate"/>
            <seealso cref="T:FarNet.IdledHandler"/>
        </member>
        <member name="E:FarNet.Panel.KeyPressed">
            <summary>
            Called when a key is pressed.
            </summary>
            <remarks>
            Set <see cref="P:FarNet.PanelEventArgs.Ignore"/> = true if the module processes the key itself.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.NeedsNewFiles">
            <summary>
            Gets or sets the flag telling that files should be refreshed, reloaded, etc.
            </summary>
            <remarks>
            The flag is set by the core on opening a panel and when a user presses [CtrlR] or [PgDn]/[PgUp] on paging.
            Modules also can set it after some panel or data changes before calling the <see cref="M:FarNet.Panel.Update(System.Boolean)"/>.
            The core drops the flag automatically after panel updates.
            <para>
            The flag is passed in <see cref="T:FarNet.GetFilesEventArgs"/> and used by explorers that cache their data
            but still allow them to be refreshed (e.g. on [CtrlR]) or even completely changed (e.g. on paging).
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.Panel.PageLimit">
            <summary>
            Gets or sets the maximum number of files for paging. The default is 0, paging is not used.
            </summary>
        </member>
        <member name="P:FarNet.Panel.PageOffset">
            <summary>
            Gets or sets the number of files to skip on paging.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Explorer">
            <summary>
            Gets the current file explorer.
            </summary>
            <remarks>
            An explorer is set on creation and it cannot be changed directly.
            But the panel should not assume that its explorer is the same,
            the core normally changes panel explorers on navigation.
            See <see cref="E:FarNet.Panel.ExplorerEntered"/>.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.WorksPanel">
            
        </member>
        <member name="P:FarNet.Panel.Data">
            <summary>
			Gets the user data key/value table.
		</summary><remarks>
			Any user data can be attached by one or more external tools.
			Keys should be chosen carefully in order to avoid conflicts.
			When in doubts generate and use <c>Guid</c> based keys.
		</remarks>
        </member>
        <member name="P:FarNet.Panel.Child">
            <summary>
            Gets the child panel.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Parent">
            <summary>
            Gets the parent panel.
            </summary>
            <remarks>
            The parent panel is null if this panel is not a child panel.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.DefaultTitle">
            <summary>
            Gets the default panel title to be set on show.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Title">
            <summary>
            Gets or sets the panel header.
            </summary>
        </member>
        <member name="P:FarNet.Panel.TargetPanel">
            <summary>
            Gets the opposite opened module panel, the target for dual operations, or null.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Garbage">
            <summary>
            Gets the list of user objects to be disposed when the panel is closed.
            </summary>
            <remarks>
            It is mostly designed for PowerShell scripts and not recommended for modules.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.StartDirectory">
            <summary>
            Gets <see cref="P:FarNet.IFar.CurrentDirectory"/> saved when the panel starts.
            </summary>
        </member>
        <member name="P:FarNet.Panel.DotsMode">
            <summary>
            Tells how to add the dots item. See also <see cref="P:FarNet.Panel.DotsDescription"/>.
            </summary>
        </member>
        <member name="P:FarNet.Panel.DotsDescription">
            <summary>
            Gets or sets the dots item item description.
            </summary>
            <remarks>
            This text is used and shown only if the dots item is added, see <see cref="P:FarNet.Panel.DotsMode"/>.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.IsOpened">
            <summary>
            Gets true if the panel is opened.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsPushed">
            <summary>
            Gets true if the panel is pushed.
            </summary>
        </member>
        <member name="P:FarNet.Panel.TypeId">
            <summary>
            Gets or sets the panel type ID.
            </summary>
            <remarks>
            This property is optionally set once, normally by a creator.
            It is used for distinguishing panel types when a class type is not enough.
            </remarks>
            <seealso cref="M:FarNet.IFar.Panels(System.Guid)"/>
        </member>
        <member name="P:FarNet.Panel.CaseSensitiveSort">
            <summary>
            Gets or sets the case sensitive sort flag.
            </summary>
        </member>
        <member name="P:FarNet.Panel.DirectoriesFirst">
            <summary>
            Gets or sets the directories first sort flag.
            </summary>
        </member>
        <member name="P:FarNet.Panel.NumericSort">
            <summary>
            Gets or sets the numeric sort flag.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Highlight">
            <summary>
            Gets the file highlighting flag.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RealNames">
            <summary>
            Tells that the panel items represent the real file system.
            Set it before opening.
            </summary>
            <remarks>
            If this flag is set then panel item names are related to real file system names.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.SelectedFirst">
            <summary>
            Gets the show selected files first flag.
            </summary>
        </member>
        <member name="P:FarNet.Panel.ShowHidden">
            <summary>
            Gets true if hidden and system files are shown.
            </summary>
        </member>
        <member name="P:FarNet.Panel.UseSortGroups">
            <summary>
            Gets the use sort groups flags.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.Panel.CurrentFile">
            <summary>
            Gets the current file.
            </summary>
        </member>
        <member name="P:FarNet.Panel.CurrentIndex">
            <summary>
            Gets the current file index in the <see cref="P:FarNet.Panel.ShownList"/> files.
            </summary>
            <remarks>
            This is the index of the current file in the <see cref="P:FarNet.Panel.ShownList"/> files.
            It is not directly related to other panel file collections.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.Frame">
            <summary>
            Gets the current frame: current and top file indexes.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsActive">
            <summary>
            Gets true if the panel is active.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsLeft">
            <summary>
            Gets true if the panel is the left panel.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsNavigation">
            <summary>
            Gets true if the panel is designed for navigation by paths.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsPlugin">
            <summary>
            Gets true always.
            </summary>
        </member>
        <member name="P:FarNet.Panel.IsVisible">
            <summary>
            Gets or sets visibility of the panel.
            </summary>
            <remarks>
            Setting takes effect only when Far gets control.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.Kind">
            <summary>
            Gets file kind always.
            </summary>
        </member>
        <member name="P:FarNet.Panel.CurrentDirectory">
            <summary>
			Gets the panel directory or sets a new directory and opens its native file panel.
		</summary><remarks>
			If it is a directory tree panel then the path is the currently selected directory in the tree.
			If it is a module panel then it normally returns <see cref="P:FarNet.Explorer.Location"/>
			or the value assigned to the <see cref="P:FarNet.Panel.CurrentLocation"/>.
			<para>
				It throws on setting if a directory path is not valid or does not exist.
			</para>
			<para>
				Call <see cref="M:FarNet.Panel.Redraw"/> after changing the directory in order to show changes immediately.
			</para>
		</remarks><seealso cref="M:FarNet.Panel.GoToName(System.String)"/><seealso cref="M:FarNet.Panel.GoToPath(System.String)"/>
        </member>
        <member name="P:FarNet.Panel.CurrentLocation">
            <summary>
            Gets or sets the path which is or going to be the <see cref="P:FarNet.Panel.CurrentDirectory"/>.
            </summary>
            <remarks>
            It should be set only when the directory is not the same as the explorer location, this is a rare case.
            If it is empty then the core closes the panel when [Enter] is pressed on the dots item.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.SelectedFiles">
            <summary>
            Gets all selected panel files at once or the current file if none is selected.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.Panel.SelectedList"/> this list is a snapshot of files,
            it can be used even after changes in the panel.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.SelectedList">
            <summary>
            Gets all selected panel files or the current file if none is selected.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.Panel.SelectedFiles"/> you must not change panel items while using this list.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.ShownFiles">
            <summary>
            Gets all shown panel files at once. File ".." is excluded.
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.Panel.ShownList"/> this list is a snapshot of all files,
            it can be used even after changes in the panel.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.ShownList">
            <summary>
            Gets all shown panel files including "..".
            </summary>
            <remarks>
            In contrast to <see cref="P:FarNet.Panel.ShownFiles"/> you must not change panel items while using this list.
            The current file index in this list is <see cref="P:FarNet.Panel.CurrentIndex"/>.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.TopIndex">
            <summary>
            Gets the first visible file index.
            </summary>
        </member>
        <member name="P:FarNet.Panel.SortMode">
            <summary>
            Gets or sets the panel sort mode. It works before and after opening.
            </summary>
        </member>
        <member name="P:FarNet.Panel.ViewMode">
            <summary>
            Gets or sets the panel view mode. It works before and after opening.
            </summary>
        </member>
        <member name="P:FarNet.Panel.ViewPlan">
            <summary>
			Gets the current view plan.
		</summary><remarks>
			This plan info is incomplete, for example column names are empty.
		</remarks><seealso cref="M:FarNet.Panel.GetPlan(FarNet.PanelViewMode)"/>
        </member>
        <member name="P:FarNet.Panel.Window">
            <summary>
            Gets the panel window position.
            </summary>
        </member>
        <member name="P:FarNet.Panel.CompareFatTime">
            <summary>
            Tells to convert timestamps to FAT format for the Compare folders operation.
            </summary>
            <remarks>
            Set this flag if the panel file system doesn't provide time accuracy necessary for standard comparison operations.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.PreserveCase">
            <summary>
            Tells to show file names using original case regardless of Far settings.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RawSelection">
            <summary>
            Tells that folders are selected regardless of the core settings.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RealNamesDeleteFiles">
            <summary>
            Tells to use the core method instead of explorer if <see cref="P:FarNet.Panel.RealNames"/> is true.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RealNamesExportFiles">
            <summary>
            Tells to use the core method instead of explorer if <see cref="P:FarNet.Panel.RealNames"/> is true.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RealNamesImportFiles">
            <summary>
            Tells to use the core method instead of explorer if <see cref="P:FarNet.Panel.RealNames"/> is true.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RealNamesMakeDirectory">
            <summary>
            Tells to use the core method instead of explorer if <see cref="P:FarNet.Panel.RealNames"/> is true.
            </summary>
        </member>
        <member name="P:FarNet.Panel.RightAligned">
            <summary>
            Tells to show file names right-aligned by default in all panel display modes.
            </summary>
        </member>
        <member name="P:FarNet.Panel.ShowNamesOnly">
            <summary>
            Tells to show file names without paths by default.
            </summary>
        </member>
        <member name="P:FarNet.Panel.NoFilter">
            <summary>
            Tells to disable filters in the panel.
            </summary>
        </member>
        <member name="P:FarNet.Panel.Highlighting">
            <summary>
            Gets or sets the highlighting mode.
            </summary>
        </member>
        <member name="P:FarNet.Panel.SelectionExists">
            <summary>
            Gets true if selection exists.
            </summary>
        </member>
        <member name="E:FarNet.Panel.Closed">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIClosed"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.Closing">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIClosing(FarNet.PanelEventArgs)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.InvokingCommand">
            <summary>
            Called on invoking a command from the command line.
            </summary>
            <remarks>
            If the command is supported then set <see cref="P:FarNet.PanelEventArgs.Ignore"/> = true
            as soon as possible before potential exceptions.
            </remarks>
        </member>
        <member name="E:FarNet.Panel.UpdateInfo">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIUpdateInfo"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.CtrlBreak">
            <summary>
            Called by <see cref="M:FarNet.Panel.UICtrlBreak"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.Redrawing">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIRedrawing(FarNet.PanelEventArgs)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.ViewChanged">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIViewChanged(FarNet.ViewChangedEventArgs)"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.GotFocus">
            <summary>
            Called by <see cref="M:FarNet.Panel.UIGotFocus"/>.
            </summary>
        </member>
        <member name="E:FarNet.Panel.LosingFocus">
            <summary>
            Called by <see cref="M:FarNet.Panel.UILosingFocus"/>.
            </summary>
        </member>
        <member name="P:FarNet.Panel.FormatName">
            <summary>
            Gets or sets the format name (shown in the file copy dialog).
            </summary>
        </member>
        <member name="P:FarNet.Panel.HostFile">
            <summary>
            Gets or sets the base file of emulated file system.
            </summary>
            <remarks>
            If the panel doesn't emulate a file system based on files it should be empty.
            </remarks>
        </member>
        <member name="P:FarNet.Panel.InfoItems">
            <summary>
            Gets or sets info panel item array.
            </summary>
            <remarks>
            If you get it and change items then set it again after changes.
            Without that individual item changes will have no effect.
            </remarks>
        </member>
        <member name="T:FarNet.Works.IPanelWorks">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.Navigate(FarNet.Explorer)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.Open">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.OpenReplace(FarNet.Panel)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.PostData(System.Object)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.PostFile(FarNet.FarFile)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.PostName(System.String)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.SetKeyBars(FarNet.KeyBar[])">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.GetPlan(FarNet.PanelViewMode)">
            
        </member>
        <member name="M:FarNet.Works.IPanelWorks.SetPlan(FarNet.PanelViewMode,FarNet.PanelPlan)">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.MyExplorer">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.Files">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.IsOpened">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.IsPushed">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.StartDirectory">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.Title">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.TargetPanel">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.CompareFatTime">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.PreserveCase">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RawSelection">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RealNamesDeleteFiles">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RealNamesExportFiles">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RealNamesImportFiles">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RealNamesMakeDirectory">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.RightAligned">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.ShowNamesOnly">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.NoFilter">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.Highlighting">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.FormatName">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.HostFile">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.InfoItems">
            
        </member>
        <member name="P:FarNet.Works.IPanelWorks.CurrentLocation">
            
        </member>
        <member name="T:FarNet.PanelKind">
            <summary>
            Far panel kind.
            </summary>
        </member>
        <member name="F:FarNet.PanelKind.File">
            <summary>
            File list.
            </summary>
        </member>
        <member name="F:FarNet.PanelKind.Tree">
            <summary>
            File tree.
            </summary>
        </member>
        <member name="F:FarNet.PanelKind.QView">
            <summary>
            Quick view.
            </summary>
        </member>
        <member name="F:FarNet.PanelKind.Info">
            <summary>
            Information.
            </summary>
        </member>
        <member name="T:FarNet.PanelViewMode">
            <summary>
            Panel view mode.
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.AlternativeFull">
            <summary>
            Alternative full (Ctrl-0).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Brief">
            <summary>
            Brief (Ctrl-1).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Medium">
            <summary>
            Medium (Ctrl-2).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Full">
            <summary>
            Full (Ctrl-3).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Wide">
            <summary>
            Wide (Ctrl-4).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Detailed">
            <summary>
            Detailed (Ctrl-5).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Descriptions">
            <summary>
            Descriptions (Ctrl-6).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.LongDescriptions">
            <summary>
            LongDescriptions (Ctrl-7).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.FileOwners">
            <summary>
            FileOwners (Ctrl-8).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.FileLinks">
            <summary>
            FileLinks (Ctrl-9).
            </summary>
        </member>
        <member name="F:FarNet.PanelViewMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:FarNet.PanelSortMode">
            <summary>
            Panel sort mode.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Default">
            <summary>
            Default mode.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Unsorted">
            <summary>
            Unsorted mode.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Name">
            <summary>
            Sorted by name.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Extension">
            <summary>
            Sorted by extension.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LastWriteTime">
            <summary>
            Sorted by modification time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.CreationTime">
            <summary>
            Sorted by creation time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LastAccessTime">
            <summary>
            Sorted by access time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Length">
            <summary>
            Sorted by length.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Description">
            <summary>
            Sorted by description.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.Owner">
            <summary>
            Sorted by owner.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.CompressedSize">
            <summary>
            Sorted by compressed size.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LinkCount">
            <summary>
            Sorted by hard link count.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.StreamCount">
            <summary>
            Sorted by NTFS stream count.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.StreamSize">
            <summary>
            Sorted by NTFS stream data size.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.FullName">
            <summary>
            Sorted by full name.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.ChangeTime">
            <summary>
            Sorted by time of any change.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.UnsortedReversed">
            <summary>
            Unsorted mode.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.NameReversed">
            <summary>
            Sorted by name.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.ExtensionReversed">
            <summary>
            Sorted by extension.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LastWriteTimeReversed">
            <summary>
            Sorted by modification time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.CreationTimeReversed">
            <summary>
            Sorted by creation time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LastAccessTimeReversed">
            <summary>
            Sorted by access time.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LengthReversed">
            <summary>
            Sorted by length.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.DescriptionReversed">
            <summary>
            Sorted by description.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.OwnerReversed">
            <summary>
            Sorted by owner.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.CompressedSizeReversed">
            <summary>
            Sorted by compressed size.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.LinkCountReversed">
            <summary>
            Sorted by hard link count.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.StreamCountReversed">
            <summary>
            Sorted by NTFS stream count.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.StreamSizeReversed">
            <summary>
            Sorted by NTFS stream data size.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.FullNameReversed">
            <summary>
            Sorted by full name.
            </summary>
        </member>
        <member name="F:FarNet.PanelSortMode.ChangeTimeReversed">
            <summary>
            Sorted by time of any change.
            </summary>
        </member>
        <member name="T:FarNet.DataItem">
            <summary>
            Named data item, e.g. an info panel item (<see cref="P:FarNet.Panel.InfoItems"/>).
            </summary>
        </member>
        <member name="M:FarNet.DataItem.#ctor(System.String,System.Object)">
            <summary>
            New completely defined data item.
            </summary>
            <param name="name">Name (or separator text in some cases).</param>
            <param name="data">Data (or null for separator in some cases).</param>
        </member>
        <member name="P:FarNet.DataItem.Name">
            <summary>
            Name (or separator text in some cases).
            </summary>
        </member>
        <member name="P:FarNet.DataItem.Data">
            <summary>
            Data (or null for separator in some cases).
            </summary>
        </member>
        <member name="T:FarNet.PanelHighlighting">
            <summary>
            Panel highlighting modes.
            </summary>
        </member>
        <member name="F:FarNet.PanelHighlighting.Default">
            <summary>
            Highlighting by item attributes only.
            </summary>
        </member>
        <member name="F:FarNet.PanelHighlighting.Full">
            <summary>
            Highlighting by attributes and names.
            </summary>
        </member>
        <member name="F:FarNet.PanelHighlighting.Off">
            <summary>
            Highlighting is turned off.
            </summary>
        </member>
        <member name="T:FarNet.PanelDotsMode">
            <summary>
            Panel dots item modes.
            </summary>
        </member>
        <member name="F:FarNet.PanelDotsMode.Auto">
            <summary>
            Add the dots item if the panel is a child panel.
            </summary>
        </member>
        <member name="F:FarNet.PanelDotsMode.Dots">
            <summary>
            Always add the dots item.
            </summary>
        </member>
        <member name="F:FarNet.PanelDotsMode.Off">
            <summary>
            No dots item.
            </summary>
        </member>
        <member name="T:FarNet.PanelPlan">
            <summary>
            Panel view plan.
            </summary>
            <remarks>
            Normally it is used for <see cref="M:FarNet.Panel.SetPlan(FarNet.PanelViewMode,FarNet.PanelPlan)"/>.
            When a panel is opened you can change modes dynamically, but do not forget
            to reset the list itself, changes in items are not reflected without this.
            <para>
            WARNING: column titles, kinds and custom columns is a sort of low level stuff;
            if you use this incorrectly the Far may crash.
            </para>
            </remarks>
            <seealso cref="P:FarNet.FarFile.Columns"/>
            <seealso cref="P:FarNet.SetFile.Columns"/>
        </member>
        <member name="M:FarNet.PanelPlan.Clone">
            <summary>
            Creates a new mode as a shallow copy of this.
            </summary>
            <remarks>
            Use it to create another mode with the same properties and then change a few of them.
            </remarks>
        </member>
        <member name="P:FarNet.PanelPlan.Columns">
            <summary>
            Columns info.
            </summary>
            <remarks>
            <para>
            All supported kinds: "N", "Z", "O", "S", "DC", "DM", "DA", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9".
            Supported Far column kind suffixes may be added to the end, e.g. NR, ST, DCB, and etc., see Far API [Column types].
            </para>
            <para>
            Default column kind sequence: "N", "Z", "O", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9".
            It is exposed as <see cref="P:FarNet.FarColumn.DefaultColumnKinds"/>.
            </para>
            <para>
            Column kind rules:
            <ul>
            <li>Specify column kinds only when you really have to do so, especially try to avoid C0..C9, let them to be processed by default.</li>
            <li>C0...C9 must be listed incrementally without gaps; but other kinds between them is OK. E.g. C0, C2 is bad; C0, N, C1 is OK.</li>
            <li>If a kind is not specified then the next available from the remaining default sequence is taken.</li>
            <li>Column kinds should not be specified more than once.</li>
            </ul>
            </para>
            </remarks>
        </member>
        <member name="P:FarNet.PanelPlan.StatusColumns">
            <summary>
            Status columns info.
            </summary>
            <remarks>
            Use it for status columns in the same way as <see cref="P:FarNet.PanelPlan.Columns"/> is used.
            Column names are ignored.
            </remarks>
        </member>
        <member name="P:FarNet.PanelPlan.IsFullScreen">
            <summary>
            Tells to resize panel to fill the entire window (instead of a half).
            </summary>
        </member>
        <member name="P:FarNet.PanelPlan.IsDetailedStatus">
            <summary>
            Tells to display full status info for a file.
            </summary>
            <remarks>
            Tells to display full status info for a file if <c>Status*</c> are not defined.
            Otherwise, the status line displays the file name.
            </remarks>
        </member>
        <member name="P:FarNet.PanelPlan.IsAlignedExtensions">
            <summary>
            Tells to align file extensions.
            </summary>
        </member>
        <member name="P:FarNet.PanelPlan.IsCaseConversion">
            <summary>
            Tells to use name case conversion.
            </summary>
        </member>
        <member name="T:FarNet.PanelEventArgs">
            <summary>
            Panel event arguments.
            </summary>
        </member>
        <member name="P:FarNet.PanelEventArgs.Ignore">
            <summary>
            Tells that a job is done or an action has to be ignored, it depends on the event.
            </summary>
        </member>
        <member name="T:FarNet.CommandLineEventArgs">
            <summary>
            Arguments of <see cref="M:FarNet.Panel.WorksInvokingCommand(FarNet.CommandLineEventArgs)"/>.
            Set <see cref="P:FarNet.PanelEventArgs.Ignore"/> = true to tell that command has been processed internally.
            </summary>
        </member>
        <member name="M:FarNet.CommandLineEventArgs.#ctor(System.String)">
            
        </member>
        <member name="P:FarNet.CommandLineEventArgs.Command">
            <summary>
            Gets the command to be processed.
            </summary>
        </member>
        <member name="T:FarNet.ViewChangedEventArgs">
            <summary>
            Arguments of <see cref="E:FarNet.Panel.ViewChanged"/> event. [FE_CHANGEVIEWMODE], [Column types].
            </summary>
        </member>
        <member name="M:FarNet.ViewChangedEventArgs.#ctor(System.String)">
            
        </member>
        <member name="P:FarNet.ViewChangedEventArgs.Columns">
            <summary>
            Gets column kinds, e.g. N,S,D,T.
            </summary>
        </member>
        <member name="T:FarNet.FarColumn">
            <summary>
            Panel column options (abstract).
            </summary>
            <remarks>
            Column options are used by <see cref="P:FarNet.PanelPlan.Columns"/> and <see cref="P:FarNet.PanelPlan.StatusColumns"/>.
            <para>
            This class is only a base for <see cref="T:FarNet.SetColumn"/> (recommended and ready to use)
            and other classes derived by modules (basically they are not needed).
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.FarColumn.#ctor">
            <summary>
            Only for derived classes.
            </summary>
        </member>
        <member name="P:FarNet.FarColumn.Name">
            <summary>
            Column name.
            </summary>
            <remarks>
            Title of a standard panel column. It is ignored for a status column.
            </remarks>
        </member>
        <member name="P:FarNet.FarColumn.Kind">
            <summary>
            Column kind. See <see cref="P:FarNet.PanelPlan.Columns"/>.
            </summary>
        </member>
        <member name="P:FarNet.FarColumn.Width">
            <summary>
            Column width.
            </summary>
            <remarks>
            Positive: absolute width; negative: percentage; 0: variable.
            </remarks>
        </member>
        <member name="P:FarNet.FarColumn.DefaultColumnKinds">
            <summary>
            Default column kind sequence: "N", "Z", "O", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9".
            </summary>
        </member>
        <member name="T:FarNet.SetColumn">
            <summary>
            Panel column options.
            </summary>
            <remarks>
            Use this class directly to create column options instance and set its properties.
            See <see cref="T:FarNet.FarColumn"/> for details.
            </remarks>
        </member>
        <member name="P:FarNet.SetColumn.Name">
            
        </member>
        <member name="P:FarNet.SetColumn.Kind">
            
        </member>
        <member name="P:FarNet.SetColumn.Width">
            
        </member>
        <member name="T:FarNet.KeyBar">
            <summary>
            Panel key bar item.
            </summary>
        </member>
        <member name="M:FarNet.KeyBar.#ctor(System.Int32,FarNet.ControlKeyStates,System.String,System.String)">
            
        </member>
        <member name="P:FarNet.KeyBar.Key">
            
        </member>
        <member name="P:FarNet.KeyBar.Text">
            
        </member>
        <member name="P:FarNet.KeyBar.LongText">
            
        </member>
        <member name="T:FarNet.IUserInterface">
            <summary>
            Low level UI.
            </summary>
            <remarks>
            It is exposed as <see cref="P:FarNet.IFar.UI"/>.
            This API is mostly for internal use and modules should use it sparingly.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.FlushInputBuffer">
            <summary>
            Flushes the input buffer. All input records currently in the input buffer are discarded.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.ReadKey(FarNet.Works.ReadKeyOptions)">
            <summary>
            Reads a key from the input buffer.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.GetBufferContents(FarNet.Place)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.ScrollBufferContents(FarNet.Place,FarNet.Point,FarNet.Place,FarNet.Works.BufferCell)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.SetBufferContents(FarNet.Point,FarNet.Works.BufferCell[0:,0:])">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.SetBufferContents(FarNet.Place,FarNet.Works.BufferCell)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.Break">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.Draw">
            <summary>
            Draws the changes done by the <see cref="M:FarNet.IUserInterface.DrawColor(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.String)"/> and <see cref="M:FarNet.IUserInterface.DrawPalette(System.Int32,System.Int32,FarNet.PaletteColor,System.String)"/>.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.DrawColor(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Draws at the specified position with defined colors (in the internal buffer).
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param>
            <param name="foregroundColor">Foreground color.</param><param name="backgroundColor">Background color.</param>
            <param name="text">Text.</param>
            <seealso cref="M:FarNet.IUserInterface.GetPaletteForeground(FarNet.PaletteColor)"/>
            <seealso cref="M:FarNet.IUserInterface.GetPaletteBackground(FarNet.PaletteColor)"/>
            <remarks>
            When all drawing operations are done call the <see cref="M:FarNet.IUserInterface.Draw"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.DrawPalette(System.Int32,System.Int32,FarNet.PaletteColor,System.String)">
            <summary>
            Draws at the specified position using Far palette colors (in the internal buffer).
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param>
            <param name="paletteColor">Palette color.</param>
            <param name="text">Text.</param>
            <remarks>
            When all drawing operations are done call the <see cref="M:FarNet.IUserInterface.Draw"/>.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.RestoreScreen(System.Int32)">
            <summary>
            Restores previously saved by <see cref="M:FarNet.IUserInterface.SaveScreen(System.Int32,System.Int32,System.Int32,System.Int32)"/> screen area.
            </summary>
            <param name="screen">
            A handle received from <c>SaveScreen</c>.
            This handle is no longer usable after calling.
            </param>
            <remarks>
            For performance sake it redraws only the modified screen area.
            But if there was screen output produced by an external program,
            it can't calculate this area correctly. In that case you have to
            call it with <c>screen</c> = 0 and then with an actual screen handle.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.SaveScreen(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Saves screen area.
            You always have to call <see cref="M:FarNet.IUserInterface.RestoreScreen(System.Int32)"/>.
            </summary>
            <param name="left">Left position.</param><param name="top">Top line.</param><param name="right">Right position.</param><param name="bottom">Bottom line.</param>
            <returns>A handle for restoring the screen.</returns>
            <remarks>
            If <c>right</c> and <c>bottom</c> are equal to -1,
            they are replaced with screen right and bottom coordinates.
            So <c>SaveScreen(0,0,-1,-1)</c> will save the entire screen.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.SaveUserScreen">
            <summary>
            Copies the current screen contents to the user screen buffer
            (which is displayed when the panels are switched off).
            </summary>
            <remarks>
            Normally it is called after <see cref="M:FarNet.IUserInterface.ShowUserScreen"/> and direct console writing.
            Note: try to avoid these low level operations.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.ShowUserScreen">
            <summary>
            Copies the current user screen buffer to console screen
            (which is displayed when the panels are switched off).
            </summary>
            <remarks>
            Normally it is called before direct console screen operations and <see cref="M:FarNet.IUserInterface.SaveUserScreen"/> has to be called after.
            Note: try to avoid these low level operations.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.Write(System.String)">
            <summary>
            Writes text on the user screen (under panels).
            </summary>
            <param name="text">Text.</param>
            <remarks>
            This method is called from the panels area in order to simulate classic console output.
            Calls from other areas are allowed but console output is unexpected and difficult to see.
            <para>
            In PowerShell scripts consider to use the <c>Write-Host</c> cmdlet instead of this method.
            </para>
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.Write(System.String,System.ConsoleColor)">
            <summary>
            Writes colored text on the user screen (under panels).
            </summary>
            <param name="text">Text.</param>
            <param name="foregroundColor">Text color.</param>
        </member>
        <member name="M:FarNet.IUserInterface.Write(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Writes colored text on the user screen (under panels).
            </summary>
            <param name="foregroundColor">Foreground color.</param><param name="backgroundColor">Background color.</param>
            <param name="text">Text.</param>
        </member>
        <member name="M:FarNet.IUserInterface.SetProgressFlash">
            <summary>
            Tells the icon of not active window to flash.
            </summary>
            <remarks>
            It is normally used to show that an operation is complete.
            If the window is not active the icon flashes a few times and then remains highlighted until the window gets focus.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.SetProgressState(FarNet.TaskbarProgressBarState)">
            <summary>
            Sets the type and state of the progress indicator displayed on a taskbar button of the main application window.
            </summary>
            <param name="state">Progress state of the progress button.</param>
        </member>
        <member name="M:FarNet.IUserInterface.SetProgressValue(System.Int32,System.Int32)">
            <summary>
            Displays or updates a progress bar hosted in a taskbar button of the main application window
            to show the specific percentage completed of the full operation.
            </summary>
            <param name="currentValue">Indicates the proportion of the operation that has been completed.</param>
            <param name="maximumValue">Specifies the value <c>currentValue</c> will have when the operation is complete.</param>
        </member>
        <member name="M:FarNet.IUserInterface.GetPaletteBackground(FarNet.PaletteColor)">
            <summary>
            Returns background color of Far palette.
            </summary>
            <param name="paletteColor">Palette color.</param>
        </member>
        <member name="M:FarNet.IUserInterface.GetPaletteForeground(FarNet.PaletteColor)">
            <summary>
            Returns foreground color of Far palette.
            </summary>
            <param name="paletteColor">Palette color.</param>
        </member>
        <member name="M:FarNet.IUserInterface.Clear">
            <summary>
            Clears the buffer and the user screen.
            </summary>
        </member>
        <member name="M:FarNet.IUserInterface.Redraw">
            <summary>
            Redraws all windows.
            </summary>
            <remarks>
            This method helps in rare cases when all windows should be redrawn
            even those that are normally not, e.g. panels under opened dialogs.
            </remarks>
        </member>
        <member name="M:FarNet.IUserInterface.ReadKeys(FarNet.KeyData[])">
            <summary>
            Reads all keys from the input buffer and finds one of the given.
            </summary>
            <returns>Index of the first found key or -1.</returns>
            <remarks>
            The input buffer is empty after the call.
            </remarks>
        </member>
        <member name="P:FarNet.IUserInterface.MainWindowHandle">
            <summary>
            Gets the Far main window handle.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.WindowTitle">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.BackgroundColor">
            <summary>
            Gets or sets the background color of text to be written.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.ForegroundColor">
            <summary>
            Gets or sets the foreground color of text to be written.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.CursorSize">
            <summary>
            Gets or sets the cursor size.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.BufferCursor">
            <summary>
            Gets or sets the cursor position in the buffer.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.WindowCursor">
            <summary>
            Gets or sets the cursor position in the window.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.BufferSize">
            <summary>
            Gets or sets the buffer size.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.WindowPlace">
            <summary>
            Gets the window place in the buffer.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.WindowPoint">
            <summary>
            Gets the window left top point in the buffer.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.WindowSize">
            <summary>
            Gets the window size.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.MaxPhysicalWindowSize">
            <summary>
            Gets the maximum physical window size.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.MaxWindowSize">
            <summary>
            Gets the maximum window size.
            </summary>
        </member>
        <member name="P:FarNet.IUserInterface.KeyAvailable">
            <summary>
            Gets true if a key press is available in the input buffer.
            </summary>
        </member>
        <member name="T:FarNet.ControlKeyStates">
            <summary>
            Represents control key states.
            </summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.None">
            <summary>None.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.RightAltPressed">
            <summary>Right Alt.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.LeftAltPressed">
            <summary>Left Alt.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.RightCtrlPressed">
            <summary>Right control.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.LeftCtrlPressed">
            <summary>Left Cotrol.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.ShiftPressed">
            <summary>Shift.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.NumLockOn">
            <summary>NumLock.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.ScrollLockOn">
            <summary>ScrollLock.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.CapsLockOn">
            <summary>CapsLock.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.EnhancedKey">
            <summary>Enhanced key.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.CtrlAltShift">
            <summary>Ctrl, Alt and Shift states.</summary>
        </member>
        <member name="F:FarNet.ControlKeyStates.All">
            <summary>All states.</summary>
        </member>
        <member name="T:FarNet.MouseButtons">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:FarNet.MouseButtons.None">
            <summary>No mouse button was pressed.</summary>
        </member>
        <member name="F:FarNet.MouseButtons.Left">
            <summary>The left mouse button was pressed.</summary>
        </member>
        <member name="F:FarNet.MouseButtons.Right">
            <summary>The right mouse button was pressed.</summary>
        </member>
        <member name="F:FarNet.MouseButtons.Middle">
            <summary>The middle mouse button was pressed.</summary>
        </member>
        <member name="F:FarNet.MouseButtons.XButton1">
            
        </member>
        <member name="F:FarNet.MouseButtons.XButton2">
            
        </member>
        <member name="F:FarNet.MouseButtons.All">
            
        </member>
        <member name="T:FarNet.MouseAction">
            <summary>
            Mouse action.
            </summary>
        </member>
        <member name="F:FarNet.MouseAction.Click">
            <summary>
            Regular click.
            </summary>
        </member>
        <member name="F:FarNet.MouseAction.Moved">
            <summary>
            A change in mouse position occurred.
            </summary>
        </member>
        <member name="F:FarNet.MouseAction.DoubleClick">
            <summary>
            The second click (button press) of a double-click occurred.
            The first click is returned as a regular button-press event.
            </summary>
        </member>
        <member name="F:FarNet.MouseAction.Wheeled">
            <summary>
            The mouse wheel was rolled.
            </summary>
        </member>
        <member name="F:FarNet.MouseAction.All">
            Masks all flags.
        </member>
        <member name="T:FarNet.KeyCode">
            <summary>
            Virtual key codes.
            </summary>
            <remarks>
            They are similar to <c>System.ConsoleKey</c> and <c>System.Windows.Forms.Keys</c>.
            <para>
            [enum]::GetNames([ConsoleKey]) | %{ '{0} = {1},' -f $_, [int][ConsoleKey]$_ }
            </para>
            </remarks>
        </member>
        <member name="F:FarNet.KeyCode.Backspace">
            
        </member>
        <member name="F:FarNet.KeyCode.Tab">
            
        </member>
        <member name="F:FarNet.KeyCode.Clear">
            
        </member>
        <member name="F:FarNet.KeyCode.Enter">
            
        </member>
        <member name="F:FarNet.KeyCode.Pause">
            
        </member>
        <member name="F:FarNet.KeyCode.Escape">
            
        </member>
        <member name="F:FarNet.KeyCode.Spacebar">
            
        </member>
        <member name="F:FarNet.KeyCode.PageUp">
            
        </member>
        <member name="F:FarNet.KeyCode.PageDown">
            
        </member>
        <member name="F:FarNet.KeyCode.End">
            
        </member>
        <member name="F:FarNet.KeyCode.Home">
            
        </member>
        <member name="F:FarNet.KeyCode.LeftArrow">
            
        </member>
        <member name="F:FarNet.KeyCode.UpArrow">
            
        </member>
        <member name="F:FarNet.KeyCode.RightArrow">
            
        </member>
        <member name="F:FarNet.KeyCode.DownArrow">
            
        </member>
        <member name="F:FarNet.KeyCode.Select">
            
        </member>
        <member name="F:FarNet.KeyCode.Print">
            
        </member>
        <member name="F:FarNet.KeyCode.Execute">
            
        </member>
        <member name="F:FarNet.KeyCode.PrintScreen">
            
        </member>
        <member name="F:FarNet.KeyCode.Insert">
            
        </member>
        <member name="F:FarNet.KeyCode.Delete">
            
        </member>
        <member name="F:FarNet.KeyCode.Help">
            
        </member>
        <member name="F:FarNet.KeyCode.D0">
            
        </member>
        <member name="F:FarNet.KeyCode.D1">
            
        </member>
        <member name="F:FarNet.KeyCode.D2">
            
        </member>
        <member name="F:FarNet.KeyCode.D3">
            
        </member>
        <member name="F:FarNet.KeyCode.D4">
            
        </member>
        <member name="F:FarNet.KeyCode.D5">
            
        </member>
        <member name="F:FarNet.KeyCode.D6">
            
        </member>
        <member name="F:FarNet.KeyCode.D7">
            
        </member>
        <member name="F:FarNet.KeyCode.D8">
            
        </member>
        <member name="F:FarNet.KeyCode.D9">
            
        </member>
        <member name="F:FarNet.KeyCode.A">
            
        </member>
        <member name="F:FarNet.KeyCode.B">
            
        </member>
        <member name="F:FarNet.KeyCode.C">
            
        </member>
        <member name="F:FarNet.KeyCode.D">
            
        </member>
        <member name="F:FarNet.KeyCode.E">
            
        </member>
        <member name="F:FarNet.KeyCode.F">
            
        </member>
        <member name="F:FarNet.KeyCode.G">
            
        </member>
        <member name="F:FarNet.KeyCode.H">
            
        </member>
        <member name="F:FarNet.KeyCode.I">
            
        </member>
        <member name="F:FarNet.KeyCode.J">
            
        </member>
        <member name="F:FarNet.KeyCode.K">
            
        </member>
        <member name="F:FarNet.KeyCode.L">
            
        </member>
        <member name="F:FarNet.KeyCode.M">
            
        </member>
        <member name="F:FarNet.KeyCode.N">
            
        </member>
        <member name="F:FarNet.KeyCode.O">
            
        </member>
        <member name="F:FarNet.KeyCode.P">
            
        </member>
        <member name="F:FarNet.KeyCode.Q">
            
        </member>
        <member name="F:FarNet.KeyCode.R">
            
        </member>
        <member name="F:FarNet.KeyCode.S">
            
        </member>
        <member name="F:FarNet.KeyCode.T">
            
        </member>
        <member name="F:FarNet.KeyCode.U">
            
        </member>
        <member name="F:FarNet.KeyCode.V">
            
        </member>
        <member name="F:FarNet.KeyCode.W">
            
        </member>
        <member name="F:FarNet.KeyCode.X">
            
        </member>
        <member name="F:FarNet.KeyCode.Y">
            
        </member>
        <member name="F:FarNet.KeyCode.Z">
            
        </member>
        <member name="F:FarNet.KeyCode.LeftWindows">
            
        </member>
        <member name="F:FarNet.KeyCode.RightWindows">
            
        </member>
        <member name="F:FarNet.KeyCode.Applications">
            
        </member>
        <member name="F:FarNet.KeyCode.Sleep">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad0">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad1">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad2">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad3">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad4">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad5">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad6">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad7">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad8">
            
        </member>
        <member name="F:FarNet.KeyCode.NumPad9">
            
        </member>
        <member name="F:FarNet.KeyCode.Multiply">
            
        </member>
        <member name="F:FarNet.KeyCode.Add">
            
        </member>
        <member name="F:FarNet.KeyCode.Separator">
            
        </member>
        <member name="F:FarNet.KeyCode.Subtract">
            
        </member>
        <member name="F:FarNet.KeyCode.Decimal">
            
        </member>
        <member name="F:FarNet.KeyCode.Divide">
            
        </member>
        <member name="F:FarNet.KeyCode.F1">
            
        </member>
        <member name="F:FarNet.KeyCode.F2">
            
        </member>
        <member name="F:FarNet.KeyCode.F3">
            
        </member>
        <member name="F:FarNet.KeyCode.F4">
            
        </member>
        <member name="F:FarNet.KeyCode.F5">
            
        </member>
        <member name="F:FarNet.KeyCode.F6">
            
        </member>
        <member name="F:FarNet.KeyCode.F7">
            
        </member>
        <member name="F:FarNet.KeyCode.F8">
            
        </member>
        <member name="F:FarNet.KeyCode.F9">
            
        </member>
        <member name="F:FarNet.KeyCode.F10">
            
        </member>
        <member name="F:FarNet.KeyCode.F11">
            
        </member>
        <member name="F:FarNet.KeyCode.F12">
            
        </member>
        <member name="F:FarNet.KeyCode.F13">
            
        </member>
        <member name="F:FarNet.KeyCode.F14">
            
        </member>
        <member name="F:FarNet.KeyCode.F15">
            
        </member>
        <member name="F:FarNet.KeyCode.F16">
            
        </member>
        <member name="F:FarNet.KeyCode.F17">
            
        </member>
        <member name="F:FarNet.KeyCode.F18">
            
        </member>
        <member name="F:FarNet.KeyCode.F19">
            
        </member>
        <member name="F:FarNet.KeyCode.F20">
            
        </member>
        <member name="F:FarNet.KeyCode.F21">
            
        </member>
        <member name="F:FarNet.KeyCode.F22">
            
        </member>
        <member name="F:FarNet.KeyCode.F23">
            
        </member>
        <member name="F:FarNet.KeyCode.F24">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserBack">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserForward">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserRefresh">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserStop">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserSearch">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserFavorites">
            
        </member>
        <member name="F:FarNet.KeyCode.BrowserHome">
            
        </member>
        <member name="F:FarNet.KeyCode.VolumeMute">
            
        </member>
        <member name="F:FarNet.KeyCode.VolumeDown">
            
        </member>
        <member name="F:FarNet.KeyCode.VolumeUp">
            
        </member>
        <member name="F:FarNet.KeyCode.MediaNext">
            
        </member>
        <member name="F:FarNet.KeyCode.MediaPrevious">
            
        </member>
        <member name="F:FarNet.KeyCode.MediaStop">
            
        </member>
        <member name="F:FarNet.KeyCode.MediaPlay">
            
        </member>
        <member name="F:FarNet.KeyCode.LaunchMail">
            
        </member>
        <member name="F:FarNet.KeyCode.LaunchMediaSelect">
            
        </member>
        <member name="F:FarNet.KeyCode.LaunchApp1">
            
        </member>
        <member name="F:FarNet.KeyCode.LaunchApp2">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem1">
            
        </member>
        <member name="F:FarNet.KeyCode.OemPlus">
            
        </member>
        <member name="F:FarNet.KeyCode.OemComma">
            
        </member>
        <member name="F:FarNet.KeyCode.OemMinus">
            
        </member>
        <member name="F:FarNet.KeyCode.OemPeriod">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem2">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem3">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem4">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem5">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem6">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem7">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem8">
            
        </member>
        <member name="F:FarNet.KeyCode.Oem102">
            
        </member>
        <member name="F:FarNet.KeyCode.Process">
            
        </member>
        <member name="F:FarNet.KeyCode.Packet">
            
        </member>
        <member name="F:FarNet.KeyCode.Attention">
            
        </member>
        <member name="F:FarNet.KeyCode.CrSel">
            
        </member>
        <member name="F:FarNet.KeyCode.ExSel">
            
        </member>
        <member name="F:FarNet.KeyCode.EraseEndOfFile">
            
        </member>
        <member name="F:FarNet.KeyCode.Play">
            
        </member>
        <member name="F:FarNet.KeyCode.Zoom">
            
        </member>
        <member name="F:FarNet.KeyCode.NoName">
            
        </member>
        <member name="F:FarNet.KeyCode.Pa1">
            
        </member>
        <member name="F:FarNet.KeyCode.OemClear">
            
        </member>
        <member name="T:FarNet.PaletteColor">
            <summary>
            Palette colors used in UI.
            </summary>
            <seealso cref="M:FarNet.IUserInterface.DrawColor(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.String)"/>
            <seealso cref="M:FarNet.IUserInterface.DrawPalette(System.Int32,System.Int32,FarNet.PaletteColor,System.String)"/>
            <seealso cref="M:FarNet.IUserInterface.GetPaletteForeground(FarNet.PaletteColor)"/>
            <seealso cref="M:FarNet.IUserInterface.GetPaletteBackground(FarNet.PaletteColor)"/>
        </member>
        <member name="F:FarNet.PaletteColor.MenuText">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.HMenuText">
            
        </member>
        <member name="F:FarNet.PaletteColor.HMenuSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.HMenuHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.HMenuSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelText">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelHighlightText">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelInfoText">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelCursor">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelSelectedCursor">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelSelectedTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelColumnTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelTotalInfo">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelSelectedInfo">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogHighlightText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogBoxTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogHighlightBoxTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogEdit">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogSelectedButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogHighlightButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogSelectedHighlightButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogHighlightText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogBoxTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogHighlightBoxTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogEdit">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogSelectedButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogHighlightButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogSelectedHighlightButton">
            
        </member>
        <member name="F:FarNet.PaletteColor.KeyBarNumber">
            
        </member>
        <member name="F:FarNet.PaletteColor.KeyBarText">
            
        </member>
        <member name="F:FarNet.PaletteColor.KeyBarBackground">
            
        </member>
        <member name="F:FarNet.PaletteColor.CommandLine">
            
        </member>
        <member name="F:FarNet.PaletteColor.Clock">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerText">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerStatus">
            
        </member>
        <member name="F:FarNet.PaletteColor.EditorText">
            
        </member>
        <member name="F:FarNet.PaletteColor.EditorSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.EditorStatus">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpText">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpHighlightText">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpTopic">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpSelectedTopic">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpBoxTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelDragText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogEditUnchanged">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.HelpScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.PanelScreensNumber">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogEditSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.CommandLineSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.NotUsed0">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.CommandLinePrefix">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogEditDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogEditDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuDisabledText">
            
        </member>
        <member name="F:FarNet.PaletteColor.EditorClock">
            
        </member>
        <member name="F:FarNet.PaletteColor.ViewerClock">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogEditSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogEditUnchanged">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboSelectedText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboSelectedHighlight">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboBox">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboTitle">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboScrollBar">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListArrowsDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListArrowsSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboArrowsDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboArrowsSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListArrowsDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListArrowsSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboArrowsDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboArrowsSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuArrows">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuArrowsDisabled">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuArrowsSelected">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.MenuSelectedGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboGray">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogComboSelectedGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListGray">
            
        </member>
        <member name="F:FarNet.PaletteColor.DialogListSelectedGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboGray">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogComboSelectedGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListGray">
            
        </member>
        <member name="F:FarNet.PaletteColor.WarnDialogListSelectedGrayText">
            
        </member>
        <member name="F:FarNet.PaletteColor.LastPaletteColor">
            
        </member>
        <member name="T:FarNet.Switching">
            <summary>
            Switching between editor and viewer.
            Used by editor <see cref="P:FarNet.IEditor.Switching"/> and viewer <see cref="P:FarNet.IViewer.Switching"/>.
            </summary>
        </member>
        <member name="F:FarNet.Switching.Auto">
            <summary>
            Switching is disabled if editor <see cref="P:FarNet.IEditor.DeleteSource"/> or viewer <see cref="P:FarNet.IViewer.DeleteSource"/> is set
            or there are any event handlers added to an editor or viewer.
            </summary>
        </member>
        <member name="F:FarNet.Switching.Enabled">
            <summary>
            Switching is enabled. If you use it together with events or <c>DeleteSource</c> take into account possible side effects.
            </summary>
        </member>
        <member name="F:FarNet.Switching.Disabled">
            <summary>
            Switching is disabled.
            </summary>
        </member>
        <member name="T:FarNet.KeyBase">
            <summary>
            Base class for keyboard related classes.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.#ctor">
            
        </member>
        <member name="M:FarNet.KeyBase.#ctor(FarNet.ControlKeyStates)">
            
        </member>
        <member name="M:FarNet.KeyBase.Is">
            <summary>
            Tests no Ctrl, Alt, or Shift.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsAlt">
            <summary>
            Tests Alt state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsCtrl">
            <summary>
            Tests Ctrl state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsShift">
            <summary>
            Tests Shift state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsAltShift">
            <summary>
            Tests AltShift state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsCtrlAlt">
            <summary>
            Tests CtrlAlt state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.IsCtrlShift">
            <summary>
            Tests CtrlShift state.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.CtrlAltShift">
            <summary>
            Gets only Ctrl, Alt, and Shift states excluding special flags.
            </summary>
        </member>
        <member name="M:FarNet.KeyBase.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.KeyBase.GetHashCode">
            
        </member>
        <member name="M:FarNet.KeyBase.ToString">
            
        </member>
        <member name="P:FarNet.KeyBase.ControlKeyState">
            <summary>
            Gets all control key states including special flags.
            </summary>
        </member>
        <member name="T:FarNet.KeyData">
            <summary>
            Minimal key data.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.#ctor(System.Int32)">
            
        </member>
        <member name="M:FarNet.KeyData.#ctor(System.Int32,FarNet.ControlKeyStates)">
            
        </member>
        <member name="M:FarNet.KeyData.Is(System.Int32)">
            <summary>
            Tests a key code with no Ctrl, Alt, or Shift.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsAlt(System.Int32)">
            <summary>
            Tests a key code with Alt.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsCtrl(System.Int32)">
            <summary>
            Tests a key code with Ctrl.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsShift(System.Int32)">
            <summary>
            Tests a key code with Shift.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsAltShift(System.Int32)">
            <summary>
            Tests a key with AltShift.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsCtrlAlt(System.Int32)">
            <summary>
            Tests a key with CtrlAlt.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.IsCtrlShift(System.Int32)">
            <summary>
            Tests a key with CtrlShift.
            </summary>
        </member>
        <member name="M:FarNet.KeyData.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.KeyData.GetHashCode">
            
        </member>
        <member name="M:FarNet.KeyData.ToString">
            
        </member>
        <member name="P:FarNet.KeyData.Empty">
            <summary>
            Gets the empty key instance.
            </summary>
        </member>
        <member name="P:FarNet.KeyData.VirtualKeyCode">
            <summary>
            <see cref="T:FarNet.KeyCode"/> code.
            </summary>
        </member>
        <member name="T:FarNet.KeyInfo">
            <summary>
            Full key information.
            </summary>
        </member>
        <member name="M:FarNet.KeyInfo.#ctor(System.Int32,System.Char,FarNet.ControlKeyStates,System.Boolean)">
            
        </member>
        <member name="M:FarNet.KeyInfo.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.KeyInfo.GetHashCode">
            
        </member>
        <member name="M:FarNet.KeyInfo.ToString">
            
        </member>
        <member name="P:FarNet.KeyInfo.Character">
            <summary>
            Character.
            </summary>
        </member>
        <member name="P:FarNet.KeyInfo.KeyDown">
            <summary>
            Key down state.
            </summary>
        </member>
        <member name="T:FarNet.MouseInfo">
            <summary>
            Mouse event information.
            </summary>
        </member>
        <member name="M:FarNet.MouseInfo.#ctor(FarNet.Point,FarNet.MouseAction,FarNet.MouseButtons,FarNet.ControlKeyStates,System.Int32)">
            <param name="where">Position.</param>
            <param name="action">Action.</param>
            <param name="buttons">Buttons.</param>
            <param name="controls">Control keys.</param>
            <param name="value">Wheel value.</param>
        </member>
        <member name="M:FarNet.MouseInfo.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.MouseInfo.GetHashCode">
            
        </member>
        <member name="M:FarNet.MouseInfo.ToString">
            
        </member>
        <member name="P:FarNet.MouseInfo.Where">
            <summary>
            Mouse positon.
            </summary>
        </member>
        <member name="P:FarNet.MouseInfo.Action">
            <summary>
            Action.
            </summary>
        </member>
        <member name="P:FarNet.MouseInfo.Buttons">
            <summary>
            Buttons.
            </summary>
        </member>
        <member name="P:FarNet.MouseInfo.Value">
            <summary>
            Wheel value.
            </summary>
            <remarks>
            It is positive or negative depending on the wheel direction.
            The value is normally 120*X but it depends on the mouse driver.
            </remarks>
        </member>
        <member name="T:FarNet.IdledHandler">
            <summary>
            Helper for <c>Idled</c> events with a custom frequency.
            </summary>
            <remarks>
            It is a helper for <c>Idled</c> events. These events may be called too frequently for
            a particular task. In this case use <see cref="M:FarNet.IdledHandler.Create(System.Double,System.EventHandler)"/> to get a handler with a
            custom call frequency.
            </remarks>
        </member>
        <member name="M:FarNet.IdledHandler.Create(System.Double,System.EventHandler)">
            <summary>
            Creates a handler with a custom frequency.
            </summary>
            <param name="seconds">Time interval in seconds.</param>
            <param name="handler">Wrapped handler to be invoked.</param>
        </member>
        <member name="T:FarNet.Works.DelegateToString">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.Works.DelegateToString.#ctor(System.Delegate)">
            
        </member>
        <member name="M:FarNet.Works.DelegateToString.ToString">
            
        </member>
        <member name="T:FarNet.Works.FormatMessageMode">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:FarNet.Works.FormatMessageMode.Cut">
            <summary>
            Cut wide lines.
            </summary>
        </member>
        <member name="F:FarNet.Works.FormatMessageMode.Word">
            <summary>
            Wrap lines by words.
            </summary>
        </member>
        <member name="T:FarNet.Works.Kit">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.Works.Kit.SplitLines(System.String)">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.Works.Kit.FormatMessage(System.Collections.Generic.IList{System.String},System.String,System.Int32,System.Int32,FarNet.Works.FormatMessageMode)">
            <summary>
            For internal use.
            </summary>
            <param name="lines">Output lines.</param>
            <param name="message">Input string.</param>
            <param name="width">Maximum line width.</param>
            <param name="height">Maximum line count (message text area height).</param>
            <param name="mode">Formatting mode.</param>
            <remarks>
            Formats the string as a limited number of lines of limited width.
            </remarks>
        </member>
        <member name="M:FarNet.Works.Kit.HashFiles(System.Collections.IEnumerable,System.Collections.Generic.IEqualityComparer{FarNet.FarFile})">
            <summary>
            For internal use. Hashes the files using the comparer, counts dupes.
            </summary>
        </member>
        <member name="M:FarNet.Works.Kit.IsInvalidFileName(System.String)">
            <summary>
            Gets true if a string is not a valid file system file name.
            </summary>
        </member>
        <member name="M:FarNet.Works.Kit.FixInvalidFileName(System.String)">
            <summary>
            Interactively fixes an invalid file name.
            </summary>
            <param name="name">An invalid file name.</param>
            <returns>A valid file name or null if canceled.</returns>
        </member>
        <member name="T:FarNet.IViewerBase">
            <summary>
            Common viewer events.
            </summary>
        </member>
        <member name="E:FarNet.IViewerBase.Closed">
            <summary>
            Called when the viewer is closed.
            </summary>
            <remarks>
            This event is called once for the viewer instance, even if there were several files opened in it,
            e.g. on [Add], [Subtract] keys the <see cref="E:FarNet.IViewerBase.Opened"/> is called every time.
            <para>
            Don't operate on the viewer, it has really gone.
            </para>
            </remarks>
        </member>
        <member name="E:FarNet.IViewerBase.Opened">
            <summary>
            Called when a file is opened in the viewer.
            </summary>
            <remarks>
            This event can be called more than once for the same viewer instance,
            e.g. on [Add], [Subtract] keys.
            </remarks>
        </member>
        <member name="E:FarNet.IViewerBase.GotFocus">
            <summary>
            Called when the viewer window has got focus.
            </summary>
        </member>
        <member name="E:FarNet.IViewerBase.LosingFocus">
            <summary>
            Called when the viewer window is losing focus.
            </summary>
        </member>
        <member name="T:FarNet.IAnyViewer">
            <summary>
            Any viewer operator.
            Exposed as <see cref="P:FarNet.IFar.AnyViewer"/>.
            </summary>
        </member>
        <member name="M:FarNet.IAnyViewer.ViewText(System.String,System.String,FarNet.OpenMode)">
            <summary>
            Opens a viewer to view some text.
            </summary>
        </member>
        <member name="T:FarNet.IViewer">
            <summary>
            Viewer operator. Exposed as <see cref="P:FarNet.IFar.Viewer"/>. Created by <see cref="M:FarNet.IFar.CreateViewer"/>.
            </summary>
            <remarks>
            Normally this object should be created or requested, used instantly and never kept for future use.
            When you need the current viewer operator next time call <see cref="P:FarNet.IFar.Viewer"/> again to get it.
            </remarks>
        </member>
        <member name="M:FarNet.IViewer.Open">
            <summary>
            Opens the viewer.
            </summary>
            <remarks>
            It is the same as <see cref="M:FarNet.IViewer.Open(FarNet.OpenMode)"/> with open mode <see cref="F:FarNet.OpenMode.None"/>.
            See remarks there.
            </remarks>
        </member>
        <member name="M:FarNet.IViewer.Open(FarNet.OpenMode)">
            <summary>
            Opens the viewer.
            </summary>
            <remarks>
            To open a viewer you should create a viewer operator by <see cref="M:FarNet.IFar.CreateViewer"/>,
            set at least its <see cref="P:FarNet.IViewer.FileName"/> and optionally: <see cref="P:FarNet.IViewer.DeleteSource"/>,
            <see cref="P:FarNet.IViewer.DisableHistory"/>, <see cref="P:FarNet.IViewer.Switching"/>, <see cref="P:FarNet.IViewer.Title"/>, and
            <see cref="P:FarNet.IViewer.Window"/>. Then this method is called.
            </remarks>
        </member>
        <member name="M:FarNet.IViewer.SetFrame(System.Int64,System.Int32,FarNet.ViewFrameOptions)">
            <summary>
            Sets the current view frame.
            </summary>
            <param name="offset">New file position (depends on options).</param>
            <param name="column">New left position.</param>
            <param name="options">Options.</param>
            <returns>New actual position.</returns>
        </member>
        <member name="M:FarNet.IViewer.Close">
            <summary>
            Closes the current viewer window.
            </summary>
        </member>
        <member name="M:FarNet.IViewer.Redraw">
            <summary>
            Redraws the current viewer window.
            </summary>
        </member>
        <member name="M:FarNet.IViewer.SelectText(System.Int64,System.Int32)">
            <summary>
            Selects the block of text in the current viewer.
            </summary>
            <param name="symbolStart">Selection start in charactes, not in bytes.</param>
            <param name="symbolCount">Selected character count.</param>
        </member>
        <member name="M:FarNet.IViewer.Activate">
            <summary>
            Makes the instance window active.
            </summary>
            <remarks>It may throw if the window cannot be activated.</remarks>
        </member>
        <member name="P:FarNet.IViewer.Id">
            <summary>
            Gets the internal identifier.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.DeleteSource">
            <summary>
            Gets or sets the option to delete the source file on exit.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.Switching">
            <summary>
            Tells how editor\viewer switching should work on [F6].
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.DisableHistory">
            <summary>
            Tells to not use history.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.FileName">
            <summary>
            Name of a file being viewed. Set it before opening.
            On opening it can be corrected, e.g. converted into full path.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.CodePage">
            <summary>
            Gets or sets the code page identifier.
            </summary>
            <remarks>
            Before opening it sets encoding for reading a file.
            After opening it only gets the current encoding.
            </remarks>
        </member>
        <member name="P:FarNet.IViewer.Window">
            <summary>
            Gets or sets the start window place.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.WindowSize">
            <summary>
            Gets the current window size.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.Title">
            <summary>
            Gets or sets the window title.
            Set it before opening.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.FileSize">
            <summary>
            Gets the current file size, in symbols, not in bytes.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.Frame">
            <summary>
            Gets the current view frame.
            </summary>
        </member>
        <member name="P:FarNet.IViewer.HexMode">
            <summary>
            Gets or sets the hexadecimal mode in the current viewer (~ [F4]).
            </summary>
        </member>
        <member name="P:FarNet.IViewer.WrapMode">
            <summary>
            Gets or sets the wrap mode in the current editor (~ [F2]).
            </summary>
        </member>
        <member name="P:FarNet.IViewer.WordWrapMode">
            <summary>
            Gets or sets the word wrap mode in the current editor (~ [ShiftF2]).
            </summary>
        </member>
        <member name="P:FarNet.IViewer.TimeOfOpen">
            <summary>
            Gets the opening time of the instance.
            </summary>
        </member>
        <member name="T:FarNet.ViewFrameOptions">
            <summary>
            Options for <see cref="M:FarNet.IViewer.SetFrame(System.Int64,System.Int32,FarNet.ViewFrameOptions)"/>.
            </summary>
        </member>
        <member name="F:FarNet.ViewFrameOptions.None">
            
        </member>
        <member name="F:FarNet.ViewFrameOptions.NoRedraw">
            <summary>
            Don't redraw.
            </summary>
        </member>
        <member name="F:FarNet.ViewFrameOptions.Percent">
            <summary>
            Offset is defined in percents.
            </summary>
        </member>
        <member name="F:FarNet.ViewFrameOptions.Relative">
            <summary>
            Offset is relative to the current (and can be negative).
            </summary>
        </member>
        <member name="T:FarNet.OpenMode">
            <summary>
            Open modes of editor and viewer.
            </summary>
        </member>
        <member name="F:FarNet.OpenMode.None">
            <summary>
            Tells to open not modal editor or viewer and return immediately.
            </summary>
        </member>
        <member name="F:FarNet.OpenMode.Wait">
            <summary>
            Tells to open not modal editor or viewer and wait for exit.
            </summary>
        </member>
        <member name="F:FarNet.OpenMode.Modal">
            <summary>
            Tells to open modal editor or viewer.
            </summary>
        </member>
        <member name="T:FarNet.DeleteSource">
            <summary>
            Options to delete temporary source files and empty folders after use.
            </summary>
        </member>
        <member name="F:FarNet.DeleteSource.None">
            <summary>
            Default action: do not delete a file.
            </summary>
        </member>
        <member name="F:FarNet.DeleteSource.File">
            <summary>
            Try to delete a file always. It is not recommended if editor\viewer switching is enabled (F6).
            You may set it at any time, i.e. before or after opening.
            </summary>
        </member>
        <member name="F:FarNet.DeleteSource.Folder">
            <summary>
            The same as <see cref="F:FarNet.DeleteSource.File"/> plus delete its folder if it is empty.
            You may set it at any time, i.e. before or after opening.
            </summary>
        </member>
        <member name="F:FarNet.DeleteSource.UnusedFile">
            <summary>
            Delete a file if it was not used. The file is used if:
            *) it was saved;
            *) there was editor\viewer switching (F6).
            *) it is opened in another editor or viewer.
            You should set it before opening.
            </summary>
        </member>
        <member name="F:FarNet.DeleteSource.UnusedFolder">
            <summary>
            The same as <see cref="F:FarNet.DeleteSource.UnusedFile"/> plus delete its folder if it is empty.
            You should set it before opening.
            </summary>
        </member>
        <member name="T:FarNet.ViewFrame">
            <summary>
            Viewer frame info.
            </summary>
        </member>
        <member name="M:FarNet.ViewFrame.#ctor(System.Int64,System.Int64)">
            
        </member>
        <member name="M:FarNet.ViewFrame.op_Equality(FarNet.ViewFrame,FarNet.ViewFrame)">
            
        </member>
        <member name="M:FarNet.ViewFrame.op_Inequality(FarNet.ViewFrame,FarNet.ViewFrame)">
            
        </member>
        <member name="M:FarNet.ViewFrame.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.ViewFrame.GetHashCode">
            
        </member>
        <member name="M:FarNet.ViewFrame.ToString">
            
        </member>
        <member name="P:FarNet.ViewFrame.Offset">
            <summary>
            Offset in the file.
            </summary>
        </member>
        <member name="P:FarNet.ViewFrame.Column">
            <summary>
            Leftmost visible column index.
            </summary>
        </member>
        <member name="T:FarNet.IWindow">
            <summary>
            Far windows operator.
            </summary>
        </member>
        <member name="M:FarNet.IWindow.GetKindAt(System.Int32)">
            <summary>
            Returns the window kind.
            </summary>
            <param name="index">
            Window index or -1 for the current window, same as <see cref="T:FarNet.WindowKind"/>.
            See <see cref="P:FarNet.IWindow.Count"/>.
            </param>
        </member>
        <member name="M:FarNet.IWindow.GetNameAt(System.Int32)">
            <summary>
            Returns the window title.
            </summary>
            <param name="index">
            Window index or -1 for the current window.
            See <see cref="P:FarNet.IWindow.Count"/>.
            </param>
            <remarks>
            Window title:
            viewer, editor: the file name;
            panels: selected file name;
            help: HLF file path;
            menu, dialog: header.
            </remarks>
        </member>
        <member name="M:FarNet.IWindow.SetCurrentAt(System.Int32)">
            <summary>
            Sets the current window by the specified index.
            </summary>
            <param name="index">Window index. See <see cref="P:FarNet.IWindow.Count"/>.</param>
        </member>
        <member name="P:FarNet.IWindow.Count">
            <summary>
            Gets open window count.
            </summary>
            <remarks>
            There is at least one window (panels, editor, or viewer).
            </remarks>
        </member>
        <member name="P:FarNet.IWindow.Kind">
            <summary>
            Gets the current window kind.
            </summary>
            <remarks>
            It is the same as the result of <see cref="M:FarNet.IWindow.GetKindAt(System.Int32)"/> with the index -1.
            </remarks>
        </member>
        <member name="P:FarNet.IWindow.IsModal">
            <summary>
            Gets true if the the current window is modal.
            </summary>
        </member>
        <member name="T:FarNet.WindowKind">
            <summary>
            Window kind constants.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.None">
            
        </member>
        <member name="F:FarNet.WindowKind.Panels">
            <summary>
            File panels.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.Viewer">
            <summary>
            Internal viewer window.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.Editor">
            <summary>
            Internal editor window.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.Dialog">
            <summary>
            Dialog.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.Menu">
            <summary>
            Menu.
            </summary>
        </member>
        <member name="F:FarNet.WindowKind.Help">
            <summary>
            Help window.
            </summary>
        </member>
        <member name="T:FarNet.Works.BufferCellType">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:FarNet.Works.BufferCellType.Complete">
            
        </member>
        <member name="F:FarNet.Works.BufferCellType.Leading">
            
        </member>
        <member name="F:FarNet.Works.BufferCellType.Trailing">
            
        </member>
        <member name="T:FarNet.Works.ReadKeyOptions">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="F:FarNet.Works.ReadKeyOptions.AllowCtrlC">
            
        </member>
        <member name="F:FarNet.Works.ReadKeyOptions.NoEcho">
            
        </member>
        <member name="F:FarNet.Works.ReadKeyOptions.IncludeKeyDown">
            
        </member>
        <member name="F:FarNet.Works.ReadKeyOptions.IncludeKeyUp">
            
        </member>
        <member name="T:FarNet.Works.BufferCell">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="M:FarNet.Works.BufferCell.#ctor(System.Char,System.ConsoleColor,System.ConsoleColor,FarNet.Works.BufferCellType)">
            
        </member>
        <member name="M:FarNet.Works.BufferCell.op_Equality(FarNet.Works.BufferCell,FarNet.Works.BufferCell)">
            
        </member>
        <member name="M:FarNet.Works.BufferCell.op_Inequality(FarNet.Works.BufferCell,FarNet.Works.BufferCell)">
            
        </member>
        <member name="M:FarNet.Works.BufferCell.Equals(System.Object)">
            
        </member>
        <member name="M:FarNet.Works.BufferCell.GetHashCode">
            
        </member>
        <member name="M:FarNet.Works.BufferCell.ToString">
            
        </member>
        <member name="P:FarNet.Works.BufferCell.Character">
            
        </member>
        <member name="P:FarNet.Works.BufferCell.ForegroundColor">
            
        </member>
        <member name="P:FarNet.Works.BufferCell.BackgroundColor">
            
        </member>
        <member name="P:FarNet.Works.BufferCell.BufferCellType">
            
        </member>
    </members>
</doc>
